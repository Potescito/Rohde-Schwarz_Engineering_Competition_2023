//! Rohde & Schwarz Engineering Competition 2023
//!
//! This is the code to speed up. Enjoy!

#pragma once

#include "ec2023/ec2023.h"
#include <iostream>
#include <vector>

static constexpr float OVERLAP_RATIO = 0.75;
static constexpr size_t WINDOW_SIZE = 1024;

static const ec::Float NEG(-1.0f);
static const ec::Float innerLobesGain(6.0206f); // = -20.0f * ec_log10(ec::Float(2.0f))
static const ec::Float gainOffset(-24.1854f); // = 30.0f + innerLobesGain - 20.0f * ec_log10(ec::Float(WINDOW_SIZE))
// Equivalent constants inside the log, such that they are included in the magnitude calculation
static const ec::Float main_Fact(0.00381467300768291012202081353869f);
static const ec::Float side_Fact(0.00095366676588332382116783981164f);

void rfft(ec::StreamHw& streamHw);

void blackman_Mult(ec::StreamHw& streamHw);
void bitReversal_Streamed(ec::StreamHw& streamHw, int offset);

void fft_1_Streamed(ec::StreamHw& streamHw);
void fft_2_Streamed(ec::StreamHw& streamHw);
void fft_3_Streamed(ec::StreamHw& streamHw);
void fft_4_Streamed(ec::StreamHw& streamHw);
void fft_5_Streamed(ec::StreamHw& streamHw);

void fft_7_Streamed(ec::StreamHw& streamHw);
void fft_8_Streamed(ec::StreamHw& streamHw);
void fft_9_Streamed(ec::StreamHw& streamHw);
void fft_10_Streamed(ec::StreamHw& streamHw);
void mag_out_Streamed(ec::StreamHw& streamHw);

// LUTs of pre-computed values
std::vector<ec::Float> blackmanCoeffs =
{	
  -1.3877787807814457e-17f, 3.395133803971162e-06f, 1.3581090180514455e-05f, 3.055953389992372e-05f, 5.433323916569088e-05f,
  8.490608899498764e-05f, 0.00012228307435091512f, 0.00016647029302682692f, 0.00021747494828386338f, 0.00027530534724047595f,
  0.0003399708990153849f, 0.00041148211262373446f, 0.0004898505946268478f, 0.0005750890465359981f, 0.0006672112619706683f,
  0.0007662321235716446f, 0.0008721675996697376f, 0.0009850347407101001f, 0.001104851675433366f, 0.00123163760681394f,
  0.0013654128077558447f, 0.001506198616547605f, 0.0016540174320758272f, 0.0018088927087991091f, 0.0019708489514828897f,
  0.00213991170969606f, 0.0023161075720698615f, 0.0024994641603207357f, 0.0026900101230373785f, 0.0028877751292339104f,
  0.0030927898616688043f, 0.0033050860099324425f, 0.003524696263302693f, 0.0037516543033711963f, 0.003985994796440129f,
  0.004227753385692146f, 0.004476966683133479f, 0.004733672261312424f, 0.004997908644813934f, 0.005269715301532349f,
  0.0055491326337230445f, 0.005836201968834831f, 0.006130965550124684f, 0.006433466527055842f, 0.006743748945481645f,
  0.00706185773761582f, 0.007387838711791744f, 0.007721738542011261f, 0.008063604757286152f, 0.008413485730772802f,
  0.008771430668702382f, 0.009137489599108414f, 0.00951171336035321f, 0.00989415358945557f, 0.010284862710220971f,
  0.01068389392117721f, 0.01109130118331609f, 0.01150713920764456f, 0.011931463442546267f, 0.012364330060956531f,
  0.012805795947351671f, 0.013255918684556348f, 0.01371475654036932f, 0.014182368454011468f, 0.014658814022397423f,
  0.01514415348623259f, 0.015638447715939613f, 0.016141758197414084f, 0.0166541470176145f, 0.017175676849986485f,
  0.017706410939725407f, 0.018246413088878657f, 0.018795747641291036f, 0.019354479467394457f, 0.019922673948845976f,
  0.02050039696301538f, 0.021087714867325733f, 0.02168469448344878f, 0.02229140308135867f, 0.0229079083632455f,
  0.023534278447292722f, 0.024170581851319616f, 0.024816887476292675f, 0.025473264589707875f, 0.02613978280884724f,
  0.02681651208391183f, 0.027503522681034225f, 0.028200885165173467f, 0.028908670382894935f, 0.029626949445038256f,
  0.030355793709276213f, 0.031095274762566863f, 0.03184546440350292f, 0.03260643462456032f, 0.03337825759424905f,
  0.03416100563916997f, 0.0349547512259796f, 0.03575956694326646f, 0.03657552548334167f, 0.03740269962394746f,
  0.038241162209885285f, 0.03909098613456838f, 0.03995224432150018f, 0.04082500970568283f, 0.041709355214958194f,
  0.04260535375128485f, 0.04351307817195407f, 0.04443260127074758f, 0.04536399575904115f, 0.04630733424685606f,
  0.04726268922386219f, 0.04823013304033605f, 0.04920973788807647f, 0.050201575781281635f, 0.05120571853738985f,
  0.052222237757888645f, 0.05325120480909373f, 0.054292690802902256f, 0.055346766577523424f, 0.05641350267818888f,
  0.05749296933784714f, 0.058585236457844934f, 0.05969037358859802f, 0.060808449910256374f, 0.061939534213364275f,
  0.06308369487952278f, 0.06424099986205245f, 0.06541151666666441f, 0.06659531233214026f, 0.06779245341102494f,
  0.06900300595033572f, 0.07022703547229067f, 0.07146460695505966f, 0.07271578481354138f, 0.07398063288016929f,
  0.07525921438575028f, 0.07655159194033885f, 0.07785782751415016f, 0.07917798241851529f, 0.08051211728688186f,
  0.08186029205586338f, 0.08322256594634038f, 0.08459899744461649f, 0.08598964428363308f, 0.08739456342424522f,
  0.08881381103656243f, 0.09024744248135733f, 0.09169551229154542f, 0.09315807415373888f, 0.09463518088987827f,
  0.0961268844389444f, 0.09763323583875418f, 0.0991542852078433f, 0.10069008172743905f, 0.10224067362352576f,
  0.10380610814900713f, 0.10538643156596778f, 0.10698168912803656f, 0.10859192506285617f, 0.11021718255466052f,
  0.11185750372696435f, 0.11351292962536708f, 0.11518350020047376f, 0.1168692542909375f, 0.11857022960662503f,
  0.12028646271190796f, 0.12201798900908517f, 0.12376484272193539f, 0.1255270568794073f, 0.12730466329944587f,
  0.12909769257296042f, 0.13090617404793697f, 0.1327301358136961f, 0.1345696046853016f, 0.1364246061881202f,
  0.13829516454253668f, 0.14018130264882728f, 0.1420830420721924f, 0.14400040302795364f, 0.14593340436691574f,
  0.1478820635608973f, 0.14984639668843291f, 0.15182641842064826f, 0.1538221420073118f, 0.15583357926306568f,
  0.15786074055383703f, 0.1599036347834339f, 0.16196226938032715f, 0.16403665028462044f, 0.16612678193521313f,
  0.1682326672571542f, 0.17035430764919438f, 0.1724917029715351f, 0.17464485153377807f, 0.17681375008307854f,
  0.17899839379250226f, 0.18119877624959094f, 0.18341488944513648f, 0.18564672376216657f, 0.1878942679651446f,
  0.19015750918938507f, 0.19243643293068674f, 0.1947310230351863f, 0.1970412616894323f, 0.19936712941068552f,
  0.2017086050374422f, 0.2040656657201877f, 0.20643828691237753f, 0.20882644236165077f, 0.2112301041012769f,
  0.21364924244183658f, 0.21608382596314024f, 0.21853382150638428f, 0.22099919416654706f, 0.2234799072850278f,
  0.22597592244252676f, 0.22848719945217227f, 0.23101369635289248f, 0.23355536940303534f, 0.2361121730742386f,
  0.23868406004554849f, 0.2412709811977932f, 0.24387288560820675f, 0.24648972054530932f, 0.2491214314640431f,
  0.2517679620011648f, 0.25442925397089644f, 0.2571052473608364f, 0.2597958803281298f, 0.2625010891959012f,
  0.26522080844994994f, 0.26795497073570773f, 0.2707035068554635f, 0.27346634576585055f, 0.27624341457560236f,
  0.2790346385435743f, 0.28183994107703336f, 0.2846592437302172f, 0.28749246620316204f, 0.29033952634080046f,
  0.2932003401323303f, 0.29607482171085464f, 0.2989628833532933f, 0.301864435480567f, 0.3047793866580546f,
  0.3077076435963225f, 0.31064911115212845f, 0.31360369232969926f, 0.31657128828228204f, 0.31955179831397096f,
  0.322545119881808f, 0.32555114859815837f, 0.32856977823336153f, 0.331600900718657f, 0.33464440614938573f,
  0.33770018278846586f, 0.3407681170701441f, 0.3438480936040226f, 0.34693999517935925f, 0.35004370276964514f,
  0.3531590955374546f, 0.3562860508395701f, 0.35942444423238196f, 0.36257414947756095f, 0.3657350385480047f,
  0.3689069816340575f, 0.3720898471500014f, 0.37528350174082087f, 0.3784878102892384f, 0.3817026359230201f,
  0.3849278400225538f, 0.3881632822286946f, 0.39140882045088116f, 0.3946643108755191f, 0.3979296079746329f,
  0.4012045645147838f, 0.40448903156625354f, 0.40778285851249396f, 0.41108589305983934f, 0.41439798124748267f,
  0.41771896745771386f, 0.4210486944264184f, 0.4243870032538366f, 0.4277337334155814f, 0.4310887227739128f,
  0.434451807589271f, 0.4378228225320612f, 0.441201600694696f, 0.44458797360388747f, 0.44798177123319105f,
  0.4513828220158007f, 0.4547909528575893f, 0.4582059891503994f, 0.4616277547855763f, 0.46505607216774614f,
  0.46849076222883634f, 0.4719316444423355f, 0.47537853683779363f, 0.4788312560155578f, 0.482289617161744f,
  0.48575343406344323f, 0.48922251912415726f, 0.4926966833794672f, 0.4961757365129278f, 0.49965948687218814f,
  0.503147741485338f, 0.5066403060774743f, 0.5101369850874895f, 0.513637581685077f, 0.5171418977879518f,
  0.5206497340792877f, 0.5241608900253633f, 0.5276751638934181f, 0.531192352769718f, 0.5347122525778227f,
  0.5382346580970585f, 0.5417593629811888f, 0.5452861597772851f, 0.5488148399447932f, 0.5523451938747903f,
  0.5558770109094368f, 0.5594100793616127f, 0.5629441865347419f, 0.5664791187427995f, 0.5700146613304996f,
  0.5735505986936605f, 0.5770867142997472f, 0.580622790708585f, 0.5841586095932437f, 0.58769395176109f,
  0.591228597175004f, 0.5947623249747583f, 0.5982949134985552f, 0.6018261403047204f, 0.6053557821935536f,
  0.6088836152293233f, 0.6124094147624165f, 0.615932955451628f, 0.6194540112865953f, 0.6229723556103688f,
  0.6264877611421242f, 0.6299999999999999f, 0.6335088437240718f, 0.6370140632994503f, 0.6405154291795048f,
  0.6440127113092061f, 0.6475056791485883f, 0.6509941016963257f, 0.6544777475134195f, 0.6579563847469955f,
  0.6614297811542044f, 0.6648977041262262f, 0.668359920712372f, 0.671816197644283f, 0.6752663013602204f,
  0.6787099980294442f, 0.6821470535766808f, 0.6855772337066693f, 0.6890003039287902f, 0.6924160295817667f,
  0.695824175858444f, 0.6992245078306313f, 0.7026167904740154f, 0.7060007886931338f, 0.7093762673464077f,
  0.712742991271232f, 0.716100725309115f, 0.7194492343308716f, 0.7227882832618563f, 0.7261176371072443f,
  0.7294370609773477f, 0.7327463201129679f, 0.7360451799107794f, 0.7393334059487454f, 0.7426107640115519f,
  0.7458770201160702f, 0.7491319405368335f, 0.7523752918315283f, 0.7556068408664994f, 0.7588263548422579f,
  0.7620336013190002f, 0.7652283482421195f, 0.7684103639677218f, 0.771579417288131f, 0.7747352774573864f,
  0.7778777142167248f, 0.7810064978200484f, 0.7841213990593721f, 0.7872221892902426f, 0.7903086404571374f,
  0.7933805251188274f, 0.7964376164737083f, 0.7994796883850906f, 0.8025065154064556f, 0.805517872806657f,
  0.808513536595083f, 0.8114932835467615f, 0.8144568912274129f, 0.8174041380184427f, 0.8203348031418722f,
  0.8232486666852068f, 0.8261455096262298f, 0.8290251138577297f, 0.8318872622121477f, 0.8347317384861491f,
  0.8375583274651083f, 0.8403668149475136f, 0.8431569877692767f, 0.845928633827953f, 0.8486815421068663f,
  0.8514155026991321f, 0.85413030683158f, 0.8568257468885673f, 0.8595016164356886f, 0.862157710243367f,
  0.8647938243103328f, 0.8674097558869832f, 0.8700053034986167f, 0.8725802669685465f, 0.8751344474410803f,
  0.8776676474043724f, 0.8801796707131371f, 0.8826703226112256f, 0.8851394097540619f, 0.8875867402309329f,
  0.8900121235871299f, 0.8924153708459438f, 0.8947962945304999f, 0.8971547086854407f, 0.899490428898448f,
  0.9018032723216002f, 0.9040930576925654f, 0.9063596053556249f, 0.908602737282526f, 0.9108222770931576f,
  0.9130180500760516f, 0.9151898832087013f, 0.9173376051776978f, 0.919461046398679f, 0.9215600390360912f,
  0.9236344170227594f, 0.9256840160792601f, 0.9277086737331012f, 0.9297082293376991f, 0.9316825240911552f,
  0.9336314010548243f, 0.9355547051716817f, 0.9374522832844716f, 0.9393239841536498f, 0.9411696584751083f,
  0.9429891588976804f, 0.9447823400404302f, 0.9465490585097139f, 0.9482891729160221f, 0.9500025438905885f,
  0.9516890341017736f, 0.9533485082712148f, 0.9549808331897414f, 0.9565858777330544f, 0.9581635128771672f,
  0.9597136117136044f, 0.9612360494643596f, 0.9627307034966064f, 0.9641974533371633f, 0.9656361806867083f,
  0.9670467694337431f, 0.9684291056683049f, 0.9697830776954206f, 0.9711085760483077f, 0.9724054935013126f,
  0.9736737250825908f, 0.9749131680865241f, 0.9761237220858727f, 0.9773052889436634f, 0.9784577728248077f,
  0.9795810802074532f, 0.9806751198940619f, 0.9817398030222189f, 0.9827750430751642f, 0.9837807558920523f,
  0.9847568596779318f, 0.9857032750134497f, 0.9866199248642744f, 0.9875067345902389f, 0.9883636319542003f,
  0.9891905471306182f, 0.9899874127138465f, 0.9907541637261402f, 0.991490737625376f, 0.9921970743124829f,
  0.9928731161385865f, 0.9935188079118612f, 0.9941340969040916f, 0.9947189328569436f, 0.9952732679879405f,
  0.9957970569961472f, 0.9962902570675589f, 0.9967528278801951f, 0.9971847316088976f, 0.9975859329298319f,
  0.9979563990246911f, 0.9982960995846026f, 0.9986050068137355f, 0.9988830954326104f, 0.9991303426811088f,
  0.9993467283211825f, 0.9995322346392647f, 0.9996868464483781f, 0.9998105510899443f, 0.9999033384352909f,
  0.9999652008868579f, 0.9999961333791026f, 0.9999961333791026f, 0.9999652008868579f, 0.9999033384352909f,
  0.9998105510899443f, 0.9996868464483781f, 0.9995322346392647f, 0.9993467283211825f, 0.9991303426811088f,
  0.9988830954326104f, 0.9986050068137355f, 0.9982960995846027f, 0.9979563990246911f, 0.997585932929832f,
  0.9971847316088978f, 0.9967528278801951f, 0.9962902570675589f, 0.9957970569961472f, 0.9952732679879405f,
  0.9947189328569436f, 0.9941340969040917f, 0.9935188079118612f, 0.9928731161385865f, 0.992197074312483f,
  0.991490737625376f, 0.9907541637261402f, 0.9899874127138464f, 0.9891905471306183f, 0.9883636319542003f,
  0.9875067345902389f, 0.9866199248642746f, 0.9857032750134497f, 0.9847568596779318f, 0.9837807558920523f,
  0.9827750430751643f, 0.9817398030222187f, 0.9806751198940619f, 0.9795810802074533f, 0.9784577728248077f,
  0.9773052889436634f, 0.9761237220858727f, 0.974913168086524f, 0.9736737250825908f, 0.9724054935013126f,
  0.9711085760483077f, 0.9697830776954207f, 0.9684291056683049f, 0.9670467694337432f, 0.9656361806867083f,
  0.9641974533371633f, 0.9627307034966066f, 0.9612360494643596f, 0.9597136117136043f, 0.9581635128771673f,
  0.9565858777330546f, 0.9549808331897414f, 0.953348508271215f, 0.9516890341017736f, 0.9500025438905885f,
  0.948289172916022f, 0.946549058509714f, 0.94478234004043f, 0.9429891588976804f, 0.9411696584751083f,
  0.9393239841536501f, 0.9374522832844716f, 0.9355547051716818f, 0.9336314010548247f, 0.931682524091155f,
  0.9297082293376991f, 0.9277086737331013f, 0.9256840160792601f, 0.9236344170227593f, 0.9215600390360914f,
  0.9194610463986789f, 0.9173376051776978f, 0.9151898832087016f, 0.9130180500760516f, 0.9108222770931577f,
  0.9086027372825258f, 0.9063596053556251f, 0.9040930576925654f, 0.9018032723216003f, 0.8994904288984481f,
  0.8971547086854409f, 0.8947962945304998f, 0.8924153708459441f, 0.8900121235871302f, 0.8875867402309328f,
  0.885139409754062f, 0.8826703226112256f, 0.8801796707131371f, 0.8776676474043724f, 0.8751344474410806f,
  0.8725802669685464f, 0.8700053034986168f, 0.8674097558869833f, 0.8647938243103331f, 0.8621577102433671f,
  0.8595016164356889f, 0.8568257468885676f, 0.8541303068315798f, 0.8514155026991324f, 0.8486815421068664f,
  0.8459286338279531f, 0.8431569877692765f, 0.840366814947514f, 0.8375583274651086f, 0.834731738486149f,
  0.831887262212148f, 0.8290251138577297f, 0.8261455096262299f, 0.8232486666852068f, 0.8203348031418726f,
  0.8174041380184426f, 0.814456891227413f, 0.8114932835467618f, 0.8085135365950832f, 0.805517872806657f,
  0.8025065154064557f, 0.799479688385091f, 0.7964376164737081f, 0.7933805251188277f, 0.7903086404571376f,
  0.7872221892902427f, 0.7841213990593718f, 0.7810064978200487f, 0.7778777142167248f, 0.7747352774573864f,
  0.7715794172881313f, 0.7684103639677219f, 0.7652283482421196f, 0.7620336013190003f, 0.7588263548422582f,
  0.7556068408664993f, 0.7523752918315285f, 0.7491319405368335f, 0.7458770201160704f, 0.7426107640115518f,
  0.7393334059487457f, 0.7360451799107798f, 0.7327463201129683f, 0.729437060977348f, 0.7261176371072446f,
  0.7227882832618564f, 0.7194492343308716f, 0.716100725309115f, 0.7127429912712322f, 0.709376267346408f,
  0.7060007886931342f, 0.7026167904740154f, 0.6992245078306314f, 0.6958241758584441f, 0.6924160295817666f,
  0.6890003039287905f, 0.6855772337066698f, 0.6821470535766812f, 0.6787099980294441f, 0.6752663013602201f,
  0.6718161976442831f, 0.6683599207123723f, 0.6648977041262264f, 0.6614297811542047f, 0.6579563847469958f,
  0.6544777475134195f, 0.6509941016963255f, 0.6475056791485883f, 0.6440127113092067f, 0.640515429179505f,
  0.6370140632994505f, 0.6335088437240719f, 0.6300000000000002f, 0.6264877611421242f, 0.622972355610369f,
  0.6194540112865956f, 0.6159329554516282f, 0.6124094147624165f, 0.6088836152293235f, 0.6053557821935537f,
  0.6018261403047203f, 0.5982949134985553f, 0.5947623249747587f, 0.5912285971750045f, 0.58769395176109f,
  0.5841586095932437f, 0.5806227907085854f, 0.5770867142997471f, 0.573550598693661f, 0.5700146613304999f,
  0.5664791187428f, 0.5629441865347419f, 0.5594100793616127f, 0.555877010909437f, 0.5523451938747904f,
  0.5488148399447933f, 0.5452861597772853f, 0.541759362981189f, 0.5382346580970585f, 0.5347122525778227f,
  0.531192352769718f, 0.5276751638934186f, 0.5241608900253634f, 0.5206497340792879f, 0.517141897787952f,
  0.5136375816850768f, 0.5101369850874895f, 0.5066403060774742f, 0.5031477414853385f, 0.49965948687218825f,
  0.496175736512928f, 0.4926966833794675f, 0.4892225191241576f, 0.48575343406344296f, 0.48228961716174445f,
  0.4788312560155582f, 0.47537853683779363f, 0.4719316444423355f, 0.46849076222883634f, 0.46505607216774625f,
  0.46162775478557605f, 0.4582059891503998f, 0.45479095285758964f, 0.45138282201580104f, 0.44798177123319105f,
  0.44458797360388747f, 0.44120160069469616f, 0.43782282253206084f, 0.4344518075892711f, 0.431088722773913f,
  0.4277337334155817f, 0.4243870032538366f, 0.4210486944264184f, 0.41771896745771386f, 0.4143979812474833f,
  0.4110858930598395f, 0.4077828585124942f, 0.40448903156625376f, 0.40120456451478353f, 0.3979296079746328f,
  0.39466431087551906f, 0.39140882045088166f, 0.38816328222869473f, 0.384927840022554f, 0.38170263592302034f,
  0.37848781028923867f, 0.37528350174082076f, 0.37208984715000126f, 0.36890698163405783f, 0.3657350385480047f,
  0.362574149477561f, 0.3594244442323821f, 0.3562860508395703f, 0.3531590955374545f, 0.35004370276964547f,
  0.3469399951793596f, 0.3438480936040229f, 0.3407681170701441f, 0.33770018278846586f, 0.33464440614938584f,
  0.33160090071865667f, 0.32856977823336164f, 0.3255511485981586f, 0.32254511988180834f, 0.31955179831397096f,
  0.31657128828228204f, 0.31360369232969926f, 0.310649111152129f, 0.3077076435963227f, 0.3047793866580548f,
  0.3018644354805673f, 0.2989628833532931f, 0.2960748217108546f, 0.2932003401323303f, 0.29033952634080096f,
  0.28749246620316216f, 0.28465924373021734f, 0.2818399410770336f, 0.27903463854357446f, 0.27624341457560225f,
  0.27346634576585044f, 0.2707035068554638f, 0.26795497073570773f, 0.26522080844994994f, 0.2625010891959014f,
  0.25979588032813f, 0.2571052473608362f, 0.2544292539708967f, 0.2517679620011651f, 0.2491214314640435f,
  0.24648972054530932f, 0.2438728856082068f, 0.24127098119779328f, 0.23868406004554826f, 0.2361121730742387f,
  0.23355536940303562f, 0.23101369635289276f, 0.22848719945217227f, 0.22597592244252676f, 0.2234799072850278f,
  0.2209991941665475f, 0.2185338215063844f, 0.2160838259631404f, 0.21364924244183675f, 0.2112301041012767f,
  0.20882644236165068f, 0.20643828691237753f, 0.20406566572018814f, 0.2017086050374423f, 0.19936712941068563f,
  0.19704126168943248f, 0.19473102303518647f, 0.1924364329306867f, 0.19015750918938498f, 0.18789426796514488f,
  0.18564672376216657f, 0.18341488944513656f, 0.18119877624959113f, 0.17899839379250243f, 0.1768137500830784f,
  0.17464485153377834f, 0.17249170297153535f, 0.1703543076491944f, 0.16823266725715422f, 0.16612678193521313f,
  0.16403665028462056f, 0.16196226938032693f, 0.1599036347834341f, 0.15786074055383725f, 0.1558335792630659f,
  0.15382214200731179f, 0.15182641842064823f, 0.14984639668843297f, 0.1478820635608974f, 0.14593340436691582f,
  0.14400040302795375f, 0.14208304207219255f, 0.14018130264882722f, 0.1382951645425367f, 0.1364246061881202f,
  0.13456960468530196f, 0.1327301358136962f, 0.13090617404793703f, 0.12909769257296053f, 0.12730466329944576f,
  0.12552705687940727f, 0.12376484272193536f, 0.12201798900908535f, 0.12028646271190804f, 0.11857022960662511f,
  0.11686925429093765f, 0.11518350020047385f, 0.11351292962536695f, 0.11185750372696453f, 0.1102171825546607f,
  0.10859192506285617f, 0.1069816891280366f, 0.10538643156596786f, 0.10380610814900725f, 0.10224067362352563f,
  0.10069008172743915f, 0.09915428520784347f, 0.09763323583875433f, 0.09612688443894438f, 0.09463518088987827f,
  0.09315807415373892f, 0.0916955122915453f, 0.09024744248135746f, 0.08881381103656258f, 0.08739456342424534f,
  0.08598964428363305f, 0.0845989974446165f, 0.08322256594634041f, 0.0818602920558636f, 0.08051211728688193f,
  0.07917798241851534f, 0.07785782751415025f, 0.07655159194033878f, 0.07525921438575021f, 0.07398063288016925f,
  0.07271578481354157f, 0.07146460695505968f, 0.07022703547229074f, 0.06900300595033577f, 0.06779245341102502f,
  0.0665953123321402f, 0.06541151666666452f, 0.06424099986205262f, 0.06308369487952277f, 0.06193953421336431f,
  0.06080844991025639f, 0.05969037358859808f, 0.05858523645784485f, 0.05749296933784727f, 0.05641350267818899f,
  0.05534676657752352f, 0.05429269080290225f, 0.05325120480909373f, 0.05222223775788867f, 0.05120571853738977f,
  0.05020157578128167f, 0.0492097378880766f, 0.04823013304033618f, 0.04726268922386216f, 0.046307334246856055f,
  0.04536399575904118f, 0.04443260127074775f, 0.04351307817195409f, 0.04260535375128491f, 0.04170935521495829f,
  0.0408250097056828f, 0.03995224432150016f, 0.03909098613456834f, 0.038241162209885424f, 0.03740269962394745f,
  0.036575525483341725f, 0.03575956694326646f, 0.034954751225979644f, 0.03416100563916996f, 0.03337825759424911f,
  0.03260643462456041f, 0.03184546440350297f, 0.031095274762566842f, 0.030355793709276234f, 0.02962694944503832f,
  0.028908670382894887f, 0.028200885165173502f, 0.027503522681034294f, 0.026816512083911885f, 0.02613978280884724f,
  0.025473264589707875f, 0.024816887476292702f, 0.02417058185131958f, 0.02353427844729277f, 0.022907908363245542f,
  0.022291403081358747f, 0.021684694483448806f, 0.02108771486732572f, 0.02050039696301542f, 0.01992267394884606f,
  0.01935447946739447f, 0.018795747641291036f, 0.0182464130888787f, 0.01770641093972538f, 0.017175676849986443f,
  0.016654147017614508f, 0.01614175819741419f, 0.015638447715939585f, 0.015144153486232617f, 0.014658814022397437f,
  0.014182368454011524f, 0.013714756540369293f, 0.013255918684556382f, 0.012805795947351754f, 0.012364330060956517f,
  0.01193146344254626f, 0.011507139207644589f, 0.011091301183316103f, 0.01068389392117719f, 0.010284862710221027f,
  0.009894153589455612f, 0.009511713360353224f, 0.009137489599108414f, 0.008771430668702437f, 0.00841348573077283f,
  0.008063604757286139f, 0.007721738542011275f, 0.0073878387117918f, 0.00706185773761589f, 0.006743748945481659f,
  0.006433466527055842f, 0.006130965550124684f, 0.005836201968834873f, 0.005549132633723072f, 0.005269715301532363f,
  0.004997908644813948f, 0.004733672261312383f, 0.004476966683133493f, 0.004227753385692146f, 0.003985994796440184f,
  0.0037516543033711824f, 0.0035246962633027346f, 0.0033050860099324703f, 0.003092789861668818f, 0.0028877751292339243f,
  0.0026900101230373924f, 0.0024994641603207357f, 0.0023161075720698615f, 0.0021399117096961018f, 0.0019708489514829314f,
  0.0018088927087990814f, 0.0016540174320757994f, 0.0015061986165476327f, 0.0013654128077558586f, 0.00123163760681394f,
  0.001104851675433366f, 0.0009850347407100862f, 0.0008721675996697376f, 0.0007662321235716585f, 0.0006672112619706405f,
  0.0005750890465359704f, 0.0004898505946268339f, 0.00041148211262373446f, 0.00033997089901537103f, 0.00027530534724047595f,
  0.00021747494828386338f, 0.00016647029302682692f, 0.00012228307435091512f, 8.490608899498764e-05f, 5.433323916569088e-05f,
  3.055953389992372e-05f, 1.3581090180514455e-05f, 3.395133803971162e-06f, -1.3877787807814457e-17f,
};

static const std::vector<int> shiftRev_I = 
{
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39,
  40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
  59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78,
  79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98,
  99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115,
  116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 133,
  134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150,
  151, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 169,
  170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187,
  188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206,
  207, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225,
  226, 227, 229, 230, 231, 233, 234, 235, 237, 238, 239, 241, 242, 243, 245,
  246, 247, 249, 250, 251, 253, 254, 255, 257, 259, 261, 262, 263, 265, 266,
  267, 269, 270, 271, 273, 274, 275, 277, 278, 279, 281, 282, 283, 285, 286,
  287, 289, 291, 293, 294, 295, 297, 298, 299, 301, 302, 303, 305, 307, 309,
  310, 311, 313, 314, 315, 317, 318, 319, 321, 323, 325, 326, 327, 329, 331,
  333, 334, 335, 337, 339, 341, 342, 343, 345, 346, 347, 349, 350, 351, 353,
  355, 357, 358, 359, 361, 363, 365, 366, 367, 369, 371, 373, 374, 375, 377,
  379, 381, 382, 383, 385, 387, 389, 391, 393, 395, 397, 398, 399, 401, 403,
  405, 406, 407, 409, 411, 413, 414, 415, 417, 419, 421, 423, 425, 427, 429,
  430, 431, 433, 435, 437, 439, 441, 443, 445, 446, 447, 449, 451, 453, 455,
  457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 478, 479, 481, 483,
  485, 487, 489, 491, 493, 495, 497, 499, 501, 503, 505, 507, 509, 511, 515,
  517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 547,
  549, 551, 553, 555, 557, 559, 563, 565, 567, 569, 571, 573, 575, 579, 581,
  583, 587, 589, 591, 595, 597, 599, 601, 603, 605, 607, 611, 613, 615, 619,
  621, 623, 627, 629, 631, 635, 637, 639, 643, 647, 651, 653, 655, 659, 661,
  663, 667, 669, 671, 675, 679, 683, 685, 687, 691, 695, 699, 701, 703, 707,
  711, 715, 719, 723, 727, 731, 733, 735, 739, 743, 747, 751, 755, 759, 763,
  767, 775, 779, 783, 787, 791, 795, 799, 807, 811, 815, 823, 827, 831, 839,
  847, 855, 859, 863, 871, 879, 887, 895, 911, 919, 927, 943, 959, 991
};

static const std::vector<int> shiftRev_J = 
{
  512, 256, 768, 128, 640, 384, 896, 64, 576, 320, 832, 192, 704, 448, 960, 32,
  544, 288, 800, 160, 672, 416, 928, 96, 608, 352, 864, 224, 736, 480, 992, 528,
  272, 784, 144, 656, 400, 912, 80, 592, 336, 848, 208, 720, 464, 976, 560, 304,
  816, 176, 688, 432, 944, 112, 624, 368, 880, 240, 752, 496, 1008, 520, 264, 776,
  136, 648, 392, 904, 584, 328, 840, 200, 712, 456, 968, 552, 296, 808, 168, 680,
  424, 936, 104, 616, 360, 872, 232, 744, 488, 1000, 536, 280, 792, 152, 664, 408,
  920, 600, 344, 856, 216, 728, 472, 984, 568, 312, 824, 184, 696, 440, 952, 632,
  376, 888, 248, 760, 504, 1016, 516, 260, 772, 644, 388, 900, 580, 324, 836, 196,
  708, 452, 964, 548, 292, 804, 164, 676, 420, 932, 612, 356, 868, 228, 740, 484,
  996, 532, 276, 788, 660, 404, 916, 596, 340, 852, 212, 724, 468, 980, 564, 308,
  820, 692, 436, 948, 628, 372, 884, 244, 756, 500, 1012, 524, 268, 780, 652, 396,
  908, 588, 332, 844, 716, 460, 972, 556, 300, 812, 684, 428, 940, 620, 364, 876,
  236, 748, 492, 1004, 540, 284, 796, 668, 412, 924, 604, 348, 860, 732, 476, 988,
  572, 316, 828, 700, 444, 956, 636, 380, 892, 764, 508, 1020, 514, 770, 642, 386,
  898, 578, 322, 834, 706, 450, 962, 546, 290, 802, 674, 418, 930, 610, 354, 866,
  738, 482, 994, 530, 786, 658, 402, 914, 594, 338, 850, 722, 466, 978, 562, 818,
  690, 434, 946, 626, 370, 882, 754, 498, 1010, 522, 778, 650, 394, 906, 586, 842,
  714, 458, 970, 554, 810, 682, 426, 938, 618, 362, 874, 746, 490, 1002, 538, 794,
  666, 410, 922, 602, 858, 730, 474, 986, 570, 826, 698, 442, 954, 634, 890, 762,
  506, 1018, 518, 774, 646, 902, 582, 838, 710, 454, 966, 550, 806, 678, 422, 934,
  614, 870, 742, 486, 998, 534, 790, 662, 918, 598, 854, 726, 470, 982, 566, 822,
  694, 950, 630, 886, 758, 502, 1014, 526, 782, 654, 910, 590, 846, 718, 974, 558,
  814, 686, 942, 622, 878, 750, 494, 1006, 542, 798, 670, 926, 606, 862, 734, 990,
  574, 830, 702, 958, 638, 894, 766, 1022, 769, 641, 897, 577, 833, 705, 961, 545,
  801, 673, 929, 609, 865, 737, 993, 785, 657, 913, 593, 849, 721, 977, 817, 689,
  945, 625, 881, 753, 1009, 777, 649, 905, 841, 713, 969, 809, 681, 937, 617, 873,
  745, 1001, 793, 665, 921, 857, 729, 985, 825, 697, 953, 889, 761, 1017, 773, 901,
  837, 709, 965, 805, 677, 933, 869, 741, 997, 789, 917, 853, 725, 981, 821, 949,
  885, 757, 1013, 781, 909, 845, 973, 813, 941, 877, 749, 1005, 797, 925, 861, 989,
  829, 957, 893, 1021, 899, 835, 963, 803, 931, 867, 995, 915, 851, 979, 947, 883,
  1011, 907, 971, 939, 875, 1003, 923, 987, 955, 1019, 967, 935, 999, 983, 1015, 1007
};

static const std::vector<int> bitRev = 
{
    0, 512, 256, 768, 128, 640, 384, 896,  64, 576, 320, 832, 192, 704, 448, 960,  32, 544, 288, 800, //   0 -  19
  160, 672, 416, 928,  96, 608, 352, 864, 224, 736, 480, 992,  16, 528, 272, 784, 144, 656, 400, 912, //  20 -  39
   80, 592, 336, 848, 208, 720, 464, 976,  48, 560, 304, 816, 176, 688, 432, 944, 112, 624, 368, 880, //  40 -  59
  240, 752, 496,1008,   8, 520, 264, 776, 136, 648, 392, 904,  72, 584, 328, 840, 200, 712, 456, 968, //  60 -  79
   40, 552, 296, 808, 168, 680, 424, 936, 104, 616, 360, 872, 232, 744, 488,1000,  24, 536, 280, 792, //  80 -  99
  152, 664, 408, 920,  88, 600, 344, 856, 216, 728, 472, 984,  56, 568, 312, 824, 184, 696, 440, 952, // 100 - 119
  120, 632, 376, 888, 248, 760, 504, 1016,  4, 516, 260, 772, 132, 644, 388, 900,  68, 580, 324, 836, // 120 - 139
  196, 708, 452, 964,  36, 548, 292, 804, 164, 676, 420, 932, 100, 612, 356, 868, 228, 740, 484, 996, // 140 - 159
   20, 532, 276, 788, 148, 660, 404, 916,  84, 596, 340, 852, 212, 724, 468, 980,  52, 564, 308, 820, // 160 - 179
  180, 692, 436, 948, 116, 628, 372, 884, 244, 756, 500,1012,  12, 524, 268, 780, 140, 652, 396, 908, // 180 - 199
   76, 588, 332, 844, 204, 716, 460, 972,  44, 556, 300, 812, 172, 684, 428, 940, 108, 620, 364, 876, // 200 - 219
  236, 748, 492,1004,  28, 540, 284, 796, 156, 668, 412, 924,  92, 604, 348, 860, 220, 732, 476, 988, // 220 - 239
   60, 572, 316, 828, 188, 700, 444, 956, 124, 636, 380, 892, 252, 764, 508,1020,   2, 514, 258, 770, // 240 - 259
  130, 642, 386, 898,  66, 578, 322, 834, 194, 706, 450, 962,  34, 546, 290, 802, 162, 674, 418, 930, // 260 - 279
   98, 610, 354, 866, 226, 738, 482, 994,  18, 530, 274, 786, 146, 658, 402, 914,  82, 594, 338, 850, // 280 - 299
  210, 722, 466, 978,  50, 562, 306, 818, 178, 690, 434, 946, 114, 626, 370, 882, 242, 754, 498,1010, // 300 - 319
   10, 522, 266, 778, 138, 650, 394, 906,  74, 586, 330, 842, 202, 714, 458, 970,  42, 554, 298, 810, // 320 - 339
  170, 682, 426, 938, 106, 618, 362, 874, 234, 746, 490,1002,  26, 538, 282, 794, 154, 666, 410, 922, // 340 - 359
   90, 602, 346, 858, 218, 730, 474, 986,  58, 570, 314, 826, 186, 698, 442, 954, 122, 634, 378, 890, // 360 - 379
  250, 762, 506,1018,   6, 518, 262, 774, 134, 646, 390, 902,  70, 582, 326, 838, 198, 710, 454, 966, // 380 - 399
   38, 550, 294, 806, 166, 678, 422, 934, 102, 614, 358, 870, 230, 742, 486, 998,  22, 534, 278, 790, // 400 - 419
  150, 662, 406, 918,  86, 598, 342, 854, 214, 726, 470, 982,  54, 566, 310, 822, 182, 694, 438, 950, // 420 - 439
  118, 630, 374, 886, 246, 758, 502,1014,  14, 526, 270, 782, 142, 654, 398, 910,  78, 590, 334, 846, // 440 - 459
  206, 718, 462, 974,  46, 558, 302, 814, 174, 686, 430, 942, 110, 622, 366, 878, 238, 750, 494,1006, // 460 - 479
   30, 542, 286, 798, 158, 670, 414, 926,  94, 606, 350, 862, 222, 734, 478, 990,  62, 574, 318, 830, // 480 - 499
  190, 702, 446, 958, 126, 638, 382, 894, 254, 766, 510,1022,   1, 513, 257, 769, 129, 641, 385, 897, // 500 - 519
   65, 577, 321, 833, 193, 705, 449, 961,  33, 545, 289, 801, 161, 673, 417, 929,  97, 609, 353, 865, // 520 - 539
  225, 737, 481, 993,  17, 529, 273, 785, 145, 657, 401, 913,  81, 593, 337, 849, 209, 721, 465, 977, // 540 - 559
   49, 561, 305, 817, 177, 689, 433, 945, 113, 625, 369, 881, 241, 753, 497,1009,   9, 521, 265, 777, // 560 - 579
  137, 649, 393, 905,  73, 585, 329, 841, 201, 713, 457, 969,  41, 553, 297, 809, 169, 681, 425, 937, // 580 - 599
  105, 617, 361, 873, 233, 745, 489,1001,  25, 537, 281, 793, 153, 665, 409, 921,  89, 601, 345, 857, // 600 - 619
  217, 729, 473, 985,  57, 569, 313, 825, 185, 697, 441, 953, 121, 633, 377, 889, 249, 761, 505,1017, // 620 - 639
    5, 517, 261, 773, 133, 645, 389, 901,  69, 581, 325, 837, 197, 709, 453, 965,  37, 549, 293, 805, // 640 - 659
  165, 677, 421, 933, 101, 613, 357, 869, 229, 741, 485, 997,  21, 533, 277, 789, 149, 661, 405, 917, // 660 - 679
   85, 597, 341, 853, 213, 725, 469, 981,  53, 565, 309, 821, 181, 693, 437, 949, 117, 629, 373, 885, // 680 - 699
  245, 757, 501,1013,  13, 525, 269, 781, 141, 653, 397, 909,  77, 589, 333, 845, 205, 717, 461, 973, // 700 - 719
   45, 557, 301, 813, 173, 685, 429, 941, 109, 621, 365, 877, 237, 749, 493,1005,  29, 541, 285, 797, // 720 - 739
  157, 669, 413, 925,  93, 605, 349, 861, 221, 733, 477, 989,  61, 573, 317, 829, 189, 701, 445, 957, // 740 - 759
  125, 637, 381, 893, 253, 765, 509,1021,   3, 515, 259, 771, 131, 643, 387, 899,  67, 579, 323, 835, // 760 - 779
  195, 707, 451, 963,  35, 547, 291, 803, 163, 675, 419, 931,  99, 611, 355, 867, 227, 739, 483, 995, // 780 - 799
   19, 531, 275, 787, 147, 659, 403, 915,  83, 595, 339, 851, 211, 723, 467, 979,  51, 563, 307, 819, // 800 - 819
  179, 691, 435, 947, 115, 627, 371, 883, 243, 755, 499,1011,  11, 523, 267, 779, 139, 651, 395, 907, // 820 - 839
   75, 587, 331, 843, 203, 715, 459, 971,  43, 555, 299, 811, 171, 683, 427, 939, 107, 619, 363, 875, // 840 - 859
  235, 747, 491,1003,  27, 539, 283, 795, 155, 667, 411, 923,  91, 603, 347, 859, 219, 731, 475, 987, // 860 - 879
   59, 571, 315, 827, 187, 699, 443, 955, 123, 635, 379, 891, 251, 763, 507,1019,   7, 519, 263, 775, // 880 - 899
  135, 647, 391, 903,  71, 583, 327, 839, 199, 711, 455, 967,  39, 551, 295, 807, 167, 679, 423, 935, // 900 - 919
  103, 615, 359, 871, 231, 743, 487, 999,  23, 535, 279, 791, 151, 663, 407, 919,  87, 599, 343, 855, // 920 - 939
  215, 727, 471, 983,  55, 567, 311, 823, 183, 695, 439, 951, 119, 631, 375, 887, 247, 759, 503,1015, // 940 - 959
   15, 527, 271, 783, 143, 655, 399, 911,  79, 591, 335, 847, 207, 719, 463, 975,  47, 559, 303, 815, // 960 - 979
  175, 687, 431, 943, 111, 623, 367, 879, 239, 751, 495,1007,  31, 543, 287, 799, 159, 671, 415, 927, // 980 - 999
   95, 607, 351, 863, 223, 735, 479, 991,  63, 575, 319, 831, 191, 703, 447, 959, 127, 639, 383, 895, //1000 -1019
  255,767,511,1023                                                                                    //1020 -1023
};

// The order of the coeffs is: CC1 | CC3 | SS1 | SS3
std::vector<ec::Float> CC_Coeffs =
{
   0.9999810f,  0.9999250f,  0.9998310f,  0.99969900f,  0.9995290f,  0.9993220f,  0.99907800f,  0.9987950f,
   0.9984760f,  0.9981180f,  0.9977230f,  0.99729000f,  0.9968200f,  0.9963130f,  0.99576700f,  0.9951850f,
   0.9945650f,  0.9939070f,  0.9932120f,  0.99248000f,  0.9917100f,  0.9909030f,  0.99005800f,  0.9891770f,
   0.9882580f,  0.9873010f,  0.9863080f,  0.98527800f,  0.9842100f,  0.9831050f,  0.98196400f,  0.9807850f,
   0.9795700f,  0.9783170f,  0.9770280f,  0.97570200f,  0.9743390f,  0.9729400f,  0.97150400f,  0.9700310f,
   0.9685220f,  0.9669760f,  0.9653940f,  0.96377600f,  0.9621210f,  0.9604310f,  0.95870300f,  0.9569400f,
   0.9551410f,  0.9533060f,  0.9514350f,  0.94952800f,  0.9475860f,  0.9456070f,  0.94359300f,  0.9415440f,
   0.9394590f,  0.9373390f,  0.9351840f,  0.93299300f,  0.9307670f,  0.9285060f,  0.92621000f,  0.9238800f,
   0.9215140f,  0.9191140f,  0.9166790f,  0.91421000f,  0.9117060f,  0.9091680f,  0.90659600f,  0.9039890f,
   0.9013490f,  0.8986740f,  0.8959660f,  0.89322400f,  0.8904490f,  0.8876400f,  0.88479700f,  0.8819210f,
   0.8790120f,  0.8760700f,  0.8730950f,  0.87008700f,  0.8670460f,  0.8639730f,  0.86086700f,  0.8577290f,
   0.8545580f,  0.8513550f,  0.8481200f,  0.84485400f,  0.8415550f,  0.8382250f,  0.83486300f,  0.8314700f,
   0.8280450f,  0.8245890f,  0.8211020f,  0.81758500f,  0.8140360f,  0.8104570f,  0.80684800f,  0.8032080f,
   0.7995370f,  0.7958370f,  0.7921070f,  0.78834600f,  0.7845570f,  0.7807370f,  0.77688800f,  0.7730100f,
   0.7691030f,  0.7651670f,  0.7612020f,  0.75720900f,  0.7531870f,  0.7491360f,  0.74505800f,  0.7409510f,
   0.7368170f,  0.7326540f,  0.7284640f,  0.72424700f,  0.7200020f,  0.7157310f,  0.71143200f,  0.9998310f,
   0.9993220f,  0.9984760f,  0.9972900f,  0.99576700f,  0.9939070f,  0.9917100f,  0.98917700f,  0.9863080f,
   0.9831050f,  0.9795700f,  0.9757020f,  0.97150400f,  0.9669760f,  0.9621210f,  0.95694000f,  0.9514350f,
   0.9456070f,  0.9394590f,  0.9329930f,  0.92621000f,  0.9191140f,  0.9117060f,  0.90398900f,  0.8959660f,
   0.8876400f,  0.8790120f,  0.8700870f,  0.86086700f,  0.8513550f,  0.8415550f,  0.83147000f,  0.8211020f,
   0.8104570f,  0.7995370f,  0.7883460f,  0.77688800f,  0.7651670f,  0.7531870f,  0.74095100f,  0.7284640f,
   0.7157310f,  0.7027550f,  0.6895410f,  0.67609300f,  0.6624160f,  0.6485140f,  0.63439300f,  0.6200570f,
   0.6055110f,  0.5907600f,  0.5758080f,  0.56066200f,  0.5453250f,  0.5298040f,  0.51410300f,  0.4982280f,
   0.4821840f,  0.4659770f,  0.4496110f,  0.43309400f,  0.4164300f,  0.3996240f,  0.38268300f,  0.3656130f,
   0.3484190f,  0.3311060f,  0.3136820f,  0.29615100f,  0.2785200f,  0.2607940f,  0.24298000f,  0.2250840f,
   0.2071110f,  0.1890690f,  0.1709620f,  0.15279700f,  0.1345810f,  0.1163190f,  0.09801710f,  0.0796824f,
   0.0613207f,  0.0429382f,  0.0245411f,  0.00613586f, -0.0122716f, -0.0306748f, -0.04906770f, -0.0674439f,
  -0.0857974f, -0.1041220f, -0.1224110f, -0.14065800f, -0.1588580f, -0.1770040f, -0.19509000f, -0.2131100f,
  -0.2310580f, -0.2489280f, -0.2667130f, -0.28440800f, -0.3020060f, -0.3195020f, -0.33689000f, -0.3541640f,
  -0.3713170f, -0.3883450f, -0.4052410f, -0.42200000f, -0.4386160f, -0.4550840f, -0.47139700f, -0.4875500f,
  -0.5035380f, -0.5193560f, -0.5349980f, -0.55045800f, -0.5657320f, -0.5808140f, -0.59569900f, -0.6103830f,
  -0.6248600f, -0.6391240f, -0.6531730f, -0.66700000f, -0.6806010f, -0.6939710f,  0.00613588f,  0.0122715f,
   0.0184067f,  0.0245412f,  0.0306748f,  0.03680720f,  0.0429383f,  0.0490677f,  0.05519520f,  0.0613207f,
   0.0674439f,  0.0735646f,  0.0796824f,  0.08579730f,  0.0919090f,  0.0980171f,  0.10412200f,  0.1102220f,
   0.1163190f,  0.1224110f,  0.1284980f,  0.13458100f,  0.1406580f,  0.1467300f,  0.15279700f,  0.1588580f,
   0.1649130f,  0.1709620f,  0.1770040f,  0.18304000f,  0.1890690f,  0.1950900f,  0.20110500f,  0.2071110f,
   0.2131100f,  0.2191010f,  0.2250840f,  0.23105800f,  0.2370240f,  0.2429800f,  0.24892800f,  0.2548660f,
   0.2607940f,  0.2667130f,  0.2726210f,  0.27852000f,  0.2844080f,  0.2902850f,  0.29615100f,  0.3020060f,
   0.3078500f,  0.3136820f,  0.3195020f,  0.32531000f,  0.3311060f,  0.3368900f,  0.34266100f,  0.3484190f,
   0.3541640f,  0.3598950f,  0.3656130f,  0.37131700f,  0.3770070f,  0.3826830f,  0.38834500f,  0.3939920f,
   0.3996240f,  0.4052410f,  0.4108430f,  0.41643000f,  0.4220000f,  0.4275550f,  0.43309400f,  0.4386160f,
   0.4441220f,  0.4496110f,  0.4550840f,  0.46053900f,  0.4659770f,  0.4713970f,  0.47679900f,  0.4821840f,
   0.4875500f,  0.4928980f,  0.4982280f,  0.50353800f,  0.5088300f,  0.5141030f,  0.51935600f,  0.5245900f,
   0.5298040f,  0.5349980f,  0.5401720f,  0.54532500f,  0.5504580f,  0.5555700f,  0.56066200f,  0.5657320f,
   0.5707810f,  0.5758080f,  0.5808140f,  0.58579800f,  0.5907600f,  0.5956990f,  0.60061700f,  0.6055110f,
   0.6103830f,  0.6152320f,  0.6200570f,  0.62486000f,  0.6296380f,  0.6343930f,  0.63912400f,  0.6438320f,
   0.6485140f,  0.6531730f,  0.6578070f,  0.66241600f,  0.6670000f,  0.6715590f,  0.67609300f,  0.6806010f,
   0.6850840f,  0.6895410f,  0.6939710f,  0.69837600f,  0.7027550f,  0.0184067f,  0.03680720f,  0.0551952f,
   0.0735646f,  0.0919090f,  0.1102220f,  0.12849800f,  0.1467300f,  0.1649130f,  0.18304000f,  0.2011050f,
   0.2191010f,  0.2370240f,  0.2548660f,  0.27262100f,  0.2902850f,  0.3078500f,  0.32531000f,  0.3426610f,
   0.3598950f,  0.3770070f,  0.3939920f,  0.41084300f,  0.4275550f,  0.4441220f,  0.46053900f,  0.4767990f,
   0.4928980f,  0.5088300f,  0.5245900f,  0.54017200f,  0.5555700f,  0.5707810f,  0.58579800f,  0.6006170f,
   0.6152320f,  0.6296380f,  0.6438320f,  0.65780700f,  0.6715590f,  0.6850840f,  0.69837600f,  0.7114320f,
   0.7242470f,  0.7368170f,  0.7491360f,  0.76120200f,  0.7730100f,  0.7845570f,  0.79583700f,  0.8068480f,
   0.8175850f,  0.8280450f,  0.8382250f,  0.84812000f,  0.8577290f,  0.8670460f,  0.87607000f,  0.8847970f,
   0.8932240f,  0.9013490f,  0.9091680f,  0.91667900f,  0.9238800f,  0.9307670f,  0.93733900f,  0.9435930f,
   0.9495280f,  0.9551410f,  0.9604310f,  0.96539400f,  0.9700310f,  0.9743390f,  0.97831700f,  0.98196400f,
   0.9852780f,  0.9882580f,  0.9909030f,  0.99321200f,  0.9951850f,  0.9968200f,  0.99811800f,  0.9990780f,
   0.9996990f,  0.9999810f,  0.9999250f,  0.99952900f,  0.9987950f,  0.9977230f,  0.99631300f,  0.9945650f,
   0.9924800f,  0.9900580f,  0.9873010f,  0.98421000f,  0.9807850f,  0.9770280f,  0.97294000f,  0.9685220f,
   0.9637760f,  0.9587030f,  0.9533060f,  0.94758600f,  0.9415440f,  0.9351840f,  0.92850600f,  0.9215140f,
   0.9142100f,  0.9065960f,  0.8986740f,  0.89044900f,  0.8819210f,  0.8730950f,  0.86397300f,  0.8545580f,
   0.8448540f,  0.8348630f,  0.8245890f,  0.81403600f,  0.8032080f,  0.7921070f,  0.78073700f,  0.7691030f,
   0.7572090f,  0.7450580f,  0.7326540f,  0.72000300f, -0.7071070f
};

std::vector<ec::Float> process_signal(const std::vector<ec::Float>& inputSignal)
{  
  const size_t numSamples = inputSignal.size();
  const size_t sizeSpectrum = (WINDOW_SIZE / 2) + 1; // Always 513
  const size_t stepBetweenWins = static_cast<size_t>(ceil(WINDOW_SIZE * (1 - OVERLAP_RATIO)));
  const size_t numWins = (numSamples - WINDOW_SIZE) / stepBetweenWins + 1;

  std::vector<ec::Float> signalWindow(sizeSpectrum);
  std::vector<ec::Float> outputSpectrum(sizeSpectrum);

  // Init StreamHw
  ec::StreamHw& streamHw = *ec::StreamHw::getSingletonStreamHw();
  streamHw.resetStreamHw();
  streamHw.copyToHw(inputSignal, 0, 768, 1024);             // Load first signal components
  streamHw.copyToHw(CC_Coeffs, 0, 509, 2563);               // Load Complex  Exponential Coefficients
  streamHw.copyToHw(blackmanCoeffs, 0, WINDOW_SIZE, 3072);  // Load Window Coefficients

  streamHw.createFifos(212);

  // PIPELINE:

  // X[I4] 
  // X[I3] * NEG_SQRT1_2
  // X[I3] * CC1 
  // T5
  // T7
  streamHw.addOpMulToPipeline(0, 1, 1); 
  // X[I2] 
  // X[I5] * NEG_SQRT1_2
  // X[I7] * SS1
  // X[I6]
  // X[I2]
  streamHw.addOpMulToPipeline(2, 3, 3); 
  // T1 = X[I4] + X[I2]
  // T1 = X[I3] * NEG_SQRT1_2 + X[I5] * NEG_SQRT1_2
  // T1 = X[I3] * CC1 + X[I7] * SS1 
  // X[I8] = T5 + X[I6]
  // X[I4] = T7 + X[I2]
  streamHw.addOpAddToPipeline(1, 3, 3); 
  // NULL 
  // NULL
  // X[I4] * CC3 
  // NULL
  // NULL
  streamHw.addOpMulToPipeline(4, 5, 5); 
  // NULL 
  // NULL
  // X[I8] * SS3
  // NULL
  // NULL
  streamHw.addOpMulToPipeline(6, 7, 7); 
  // X[I] 
  // X[I1]
  // T3 = X[I4] * CC3 + X[I8] * SS3 
  // NULL
  // NULL
  streamHw.addOpAddToPipeline(5, 7, 7); 
  // X[I] = X[I] + T1 
  // X[I5] = T1 + X[I1]
  // T6 = T3 + T1
  streamHw.addOpAddToPipeline(3, 7, 7); 
  // X[I4] 
  // X[I3] * SQRT1_2
  // X[I7] * CC1 
  // T5
  // T7
  streamHw.addOpMulToPipeline(8, 9, 9); 
  // X[I2] 
  // X[I5] * SQRT1_2
  // X[I3] * SS1 
  // X[I6] 
  // X[I2]
  streamHw.addOpMulToPipeline(10, 11, 11); 
  // * (-1) 
  streamHw.addOpMulToPipeline(11, NEG, 11); 
  // X[I4] = X[I4] - X[I2] 
  // T2 = X[I3] * SQRT1_2 - X[I5] * SQRT1_2
  // T2 = X[I7] * CC1 - X[I3] * SS1 
  // X[I3] = T5 - X[I6] 
  // X[I7] = T7 - X[I2]
  streamHw.addOpAddToPipeline(9, 11, 11); 
  // NULL 
  // NULL
  // X[I8] * CC3 
  // NULL
  // NULL
  streamHw.addOpMulToPipeline(12, 13, 13); 
  // NULL 
  // NULL
  // X[I4] * SS3 
  // NULL
  // NULL
  streamHw.addOpMulToPipeline(14, 15, 15); 
  // * (-1) 
  streamHw.addOpMulToPipeline(15, NEG, 15); 
  // NULL 
  // X[I+N2/8]
  // T4 = X[I8] * CC3 - X[I4] * SS3 
  // NULL
  // NULL
  streamHw.addOpAddToPipeline(13, 15, 13); 
  // NULL 
  // X[I+N2/8] = X[I+N2/8] + T2;
  // T5 = T2 + T4
  // NULL
  // NULL
  streamHw.addOpAddToPipeline(11, 13, 13); 
  // X[I4] 
  // NULL
  // X[I3] * CC1 
  // NULL
  // NULL
  streamHw.addOpMulToPipeline(16, 17, 17); 
  // * (-1) 
  streamHw.addOpMulToPipeline(17, NEG, 17); 
  // X[I2] 
  // X[I1]
  // X[I7] * SS1 
  // NULL
  // NULL
  streamHw.addOpMulToPipeline(18, 19, 19);
  // * (-1)
  streamHw.addOpMulToPipeline(19, NEG, 19); 
  // -T1 = -X[I4] - X[I2] 
  // NULL
  // -T1 =  -X[I3] * CC1 - X[I7] * SS1 
  // NULL
  // NULL
  streamHw.addOpAddToPipeline(17, 19, 19); 
  // NULL 
  // X[I3] * NEG_SQRT1_2 
  // X[I4] * CC3
  // X[I1]
  // X[I5]
  streamHw.addOpMulToPipeline(20, 21, 21); 
  // X[I] 
  // X[I5] * NEG_SQRT1_2 
  // X[I8] * SS3
  // T6
  // T8
  streamHw.addOpMulToPipeline(22, 23, 23); 
  // NULL 
  // T1 = X[I3] * NEG_SQRT1_2 + X[I5] * NEG_SQRT1_2
  // T3 = X[I4] * CC3 + X[I8] * SS3
  // X[I1] = X[I1] + T6 
  // X[I2] = X[I5] + T8
  streamHw.addOpAddToPipeline(21, 23, 23); 
  // X[I2] = X[I] - T1 
  // X[I3] = T1 - X[I1]
  // T7 = T3 - T1
  // NULL
  // NULL
  streamHw.addOpAddToPipeline(23, 19, 19); 
  // NULL 
  // X[I+N2/8]
  // X[I7] * CC1
  // X[I1] 
  // X[I5]
  streamHw.addOpMulToPipeline(24, 25, 25); 
  // NULL 
  // NULL
  // X[I3] * SS1
  // T6
  // T8 
  streamHw.addOpMulToPipeline(26, 27, 27); 
  // * (-1)
  streamHw.addOpMulToPipeline(27, NEG, 27); 
  // NULL 
  // NULL
  // T2 = X[I7] * CC1 - X[I3] * SS1
  // X[I6] = X[I1] - T6 
  // X[I5] = X[I5] - T8
  streamHw.addOpAddToPipeline(25, 27, 25); 
  // NULL 
  // X[I3] * SQRT1_2
  // X[I8] * CC3 
  // NULL
  // NULL
  streamHw.addOpMulToPipeline(28, 29, 29); 
  // * (-1)
  streamHw.addOpMulToPipeline(29, NEG, 29); 
  // NULL 
  // X[I5] * SQRT1_2
  //  X[I4] * SS3 
  // NULL
  // NULL
  streamHw.addOpMulToPipeline(30, 31, 31); 
  // NULL 
  // -T2 = -X[I3] * SQRT1_2 + X[I5] * SQRT1_2
  // -T4 = -X[I8] * CC3 + X[I4] * SS3 
  // NULL
  // NULL
  streamHw.addOpAddToPipeline(29, 31, 31); 
  // NULL 
  // X[I1] = X[I+N2/8] - T2
  // T8 = T2 - T4
  // NULL
  // NULL
  streamHw.addOpAddToPipeline(25, 31, 31);
  // FIFO 32 & 33 are used for position-swap (bit reversal + vector inversion)

  // Here starts the Pipeline for the single assignment in K = 1 - 3
  streamHw.addOpMulToPipeline(34, 35, 35);
  streamHw.addOpMulToPipeline(36, 37, 37);
  streamHw.addOpMulToPipeline(38, 39, 39);
  streamHw.addOpMulToPipeline(40, 41, 41);
  streamHw.addOpMulToPipeline(42, 43, 43);
  streamHw.addOpMulToPipeline(44, 45, 45);
  streamHw.addOpMulToPipeline(46, 47, 47);
  streamHw.addOpMulToPipeline(48, 49, 49);

  streamHw.addOpAddToPipeline(35, 37, 37);
  streamHw.addOpAddToPipeline(39, 41, 41);
  streamHw.addOpAddToPipeline(43, 45, 45);
  streamHw.addOpAddToPipeline(47, 49, 49);
  streamHw.addOpAddToPipeline(37, 41, 41); // X[I4.0]
  streamHw.addOpAddToPipeline(45, 49, 49);
  streamHw.addOpAddToPipeline(41, 49, 49); // X[I8]

  streamHw.addOpMulToPipeline(50, 51, 51);
  streamHw.addOpMulToPipeline(52, 53, 53);
  streamHw.addOpMulToPipeline(54, 55, 55);
  streamHw.addOpMulToPipeline(56, 57, 57);
  streamHw.addOpMulToPipeline(58, 59, 59);
  streamHw.addOpMulToPipeline(60, 61, 61);
  streamHw.addOpMulToPipeline(62, 63, 63);
  streamHw.addOpMulToPipeline(64, 65, 65);

  streamHw.addOpAddToPipeline(51, 53, 53);
  streamHw.addOpAddToPipeline(55, 57, 57);
  streamHw.addOpAddToPipeline(59, 61, 61);
  streamHw.addOpAddToPipeline(63, 65, 65);
  streamHw.addOpAddToPipeline(53, 57, 57); // X[I4.0+4]
  streamHw.addOpAddToPipeline(61, 65, 65);
  streamHw.addOpMulToPipeline(65, NEG, 65);
  streamHw.addOpAddToPipeline(57, 65, 65); // X[I8+4] & X[I4.1] & X[I4.1+4]

  streamHw.addOpMulToPipeline(66, 67, 67);
  streamHw.addOpMulToPipeline(68, 69, 69);
  streamHw.addOpMulToPipeline(70, 71, 71);
  streamHw.addOpMulToPipeline(72, 73, 73);
  streamHw.addOpMulToPipeline(74, 75, 75);
  streamHw.addOpMulToPipeline(76, 77, 77);
  
  streamHw.addOpMulToPipeline(77, NEG, 77);

  streamHw.addOpAddToPipeline(67, 69, 69);
  streamHw.addOpAddToPipeline(71, 73, 73);
  streamHw.addOpMulToPipeline(73, NEG, 73);
  streamHw.addOpAddToPipeline(69, 73, 73);
  streamHw.addOpAddToPipeline(75, 77, 77);
  streamHw.addOpMulToPipeline(73, CC_Coeffs[508], 73);
  streamHw.addOpAddToPipeline(73, 77, 77); // X[I3] & X[I3+4]

  streamHw.addOpMulToPipeline(78, 79, 79);
  streamHw.addOpMulToPipeline(80, 81, 81);
  streamHw.addOpMulToPipeline(82, 83, 83);
  streamHw.addOpMulToPipeline(84, 85, 85);
  streamHw.addOpMulToPipeline(86, 87, 87);
  streamHw.addOpMulToPipeline(88, 89, 89);
  
  streamHw.addOpMulToPipeline(89, NEG, 89);

  streamHw.addOpAddToPipeline(79, 81, 81);
  streamHw.addOpAddToPipeline(83, 85, 85);
  streamHw.addOpMulToPipeline(85, NEG, 85);
  streamHw.addOpAddToPipeline(81, 85, 85);
  streamHw.addOpAddToPipeline(87, 89, 89);
  streamHw.addOpMulToPipeline(85, CC_Coeffs[508], 85);
  streamHw.addOpAddToPipeline(85, 89, 89); // X[I3+2] & X[I3+6]

  streamHw.addOpMulToPipeline(90, 91, 91);
  streamHw.addOpMulToPipeline(92, 93, 93);
  streamHw.addOpMulToPipeline(93, NEG, 93);
  streamHw.addOpAddToPipeline(91, 93, 93); // X[I2B+2]

  streamHw.addOpMulToPipeline(94, 95, 95);
  streamHw.addOpMulToPipeline(96, 97, 97);
  streamHw.addOpMulToPipeline(98, 99, 99);
  streamHw.addOpMulToPipeline(100, 101, 101);
  streamHw.addOpAddToPipeline(95, 97, 97);
  streamHw.addOpAddToPipeline(99, 101, 101);
  streamHw.addOpMulToPipeline(101, NEG, 101);
  streamHw.addOpAddToPipeline(97, 101, 101); // X[I4A]

  streamHw.addOpMulToPipeline(102, 103, 103);
  streamHw.addOpMulToPipeline(104, 105, 105);
  streamHw.addOpMulToPipeline(106, 107, 107);
  streamHw.addOpMulToPipeline(108, 109, 109);
  streamHw.addOpAddToPipeline(103, 105, 105);
  streamHw.addOpAddToPipeline(107, 109, 109);
  streamHw.addOpMulToPipeline(109, NEG, 109);
  streamHw.addOpAddToPipeline(105, 109, 109); // X[I4B]

  // Here starts the Pipeline for K = 5
  streamHw.addOpMulToPipeline(110, CC_Coeffs[158], 110);
  streamHw.addOpMulToPipeline(111, CC_Coeffs[412], 111);
  streamHw.addOpAddToPipeline(110, 111, 111);
  streamHw.addOpMulToPipeline(112, CC_Coeffs[317], 112);
  streamHw.addOpMulToPipeline(113, CC_Coeffs[63],  113);
  streamHw.addOpAddToPipeline(112, 113, 113);
  streamHw.addOpMulToPipeline(114, CC_Coeffs[190], 114);
  streamHw.addOpMulToPipeline(115, CC_Coeffs[444], 115);
  streamHw.addOpAddToPipeline(114, 115, 115);
  // Mislook, had to state this twice to save a stream multiplication
  streamHw.addOpMulToPipeline(116, CC_Coeffs[158], 116);
  streamHw.addOpMulToPipeline(117, CC_Coeffs[412], 117);
  streamHw.addOpMulToPipeline(117, NEG, 117);
  streamHw.addOpAddToPipeline(116, 117, 117);
  streamHw.addOpMulToPipeline(118, CC_Coeffs[63], 118);
  streamHw.addOpMulToPipeline(119, CC_Coeffs[317],  119);
  streamHw.addOpMulToPipeline(119, NEG, 119);
  streamHw.addOpAddToPipeline(118, 119, 119);
  streamHw.addOpMulToPipeline(120, CC_Coeffs[190], 120);
  streamHw.addOpMulToPipeline(121, CC_Coeffs[444], 121);
  streamHw.addOpMulToPipeline(121, NEG, 121);
  streamHw.addOpAddToPipeline(120, 121, 121);
  streamHw.addOpAddToPipeline(122, 123, 123);
  streamHw.addOpMulToPipeline(123, CC_Coeffs[508], 123);
  streamHw.addOpAddToPipeline(186, 187, 187);
  streamHw.addOpMulToPipeline(187, CC_Coeffs[508], 187);
  streamHw.addOpAddToPipeline(188, 189, 189);
  streamHw.addOpMulToPipeline(189, CC_Coeffs[508], 189);
  streamHw.addOpAddToPipeline(190, 191, 191);
  streamHw.addOpMulToPipeline(191, CC_Coeffs[508], 191);
  streamHw.addOpAddToPipeline(192, 193, 193);
  streamHw.addOpMulToPipeline(193, CC_Coeffs[508], 193);
  streamHw.addOpAddToPipeline(194, 195, 195);
  streamHw.addOpMulToPipeline(195, CC_Coeffs[508], 195);
  streamHw.addOpAddToPipeline(196, 197, 197);
  streamHw.addOpMulToPipeline(197, CC_Coeffs[508], 197);
  streamHw.addOpAddToPipeline(198, 199, 199);
  streamHw.addOpMulToPipeline(199, CC_Coeffs[508], 199);

  streamHw.addOpMulToPipeline(201, NEG, 201);
  streamHw.addOpAddToPipeline(200, 201, 201);
  streamHw.addOpMulToPipeline(201, CC_Coeffs[508], 201);
  streamHw.addOpMulToPipeline(203, NEG, 203);
  streamHw.addOpAddToPipeline(202, 203, 203);
  streamHw.addOpMulToPipeline(203, CC_Coeffs[508], 203);
  streamHw.addOpMulToPipeline(205, NEG, 205);
  streamHw.addOpAddToPipeline(204, 205, 205);
  streamHw.addOpMulToPipeline(205, CC_Coeffs[508], 205);
  streamHw.addOpMulToPipeline(207, NEG, 207);
  streamHw.addOpAddToPipeline(206, 207, 207);
  streamHw.addOpMulToPipeline(207, CC_Coeffs[508], 207);
  streamHw.addOpMulToPipeline(209, NEG, 209);
  streamHw.addOpAddToPipeline(208, 209, 209);
  streamHw.addOpMulToPipeline(209, CC_Coeffs[508], 209);
  streamHw.addOpMulToPipeline(211, NEG, 211);
  streamHw.addOpAddToPipeline(210, 211, 211);
  streamHw.addOpMulToPipeline(211, CC_Coeffs[508], 211);

  streamHw.addOpAddToPipeline(124, 125, 125);
  streamHw.addOpMulToPipeline(126, NEG, 126);
  streamHw.addOpAddToPipeline(126, 127, 127);
  streamHw.addOpMulToPipeline(128, NEG, 128);
  streamHw.addOpAddToPipeline(128, 129, 129);

  // Pipeline for the magnitude calculation w/ Gains
  streamHw.addOpMulToPipeline(130, 130, 130);
  streamHw.addOpMulToPipeline(131, 131, 131);
  streamHw.addOpAddToPipeline(130, 131, 131);
  // streamHw.addOpMulToPipeline(131, main_Fact, 131);
  streamHw.addOpMulToPipeline(132, 132, 132);
  streamHw.addOpMulToPipeline(133, 133, 133);
  streamHw.addOpAddToPipeline(132, 133, 133);
  // streamHw.addOpMulToPipeline(133, main_Fact, 133);
  streamHw.addOpMulToPipeline(134, 134, 134);
  streamHw.addOpMulToPipeline(135, 135, 135);
  streamHw.addOpAddToPipeline(134, 135, 135);
  // streamHw.addOpMulToPipeline(135, main_Fact, 135);
  streamHw.addOpMulToPipeline(136, 136, 136);
  streamHw.addOpMulToPipeline(137, 137, 137);
  streamHw.addOpAddToPipeline(136, 137, 137);
  // streamHw.addOpMulToPipeline(137, main_Fact, 137);
  streamHw.addOpMulToPipeline(138, 138, 138);
  streamHw.addOpMulToPipeline(139, 139, 139);
  streamHw.addOpAddToPipeline(138, 139, 139);
  // streamHw.addOpMulToPipeline(139, main_Fact, 139);
  streamHw.addOpMulToPipeline(140, 140, 140);
  streamHw.addOpMulToPipeline(141, 141, 141);
  streamHw.addOpAddToPipeline(140, 141, 141);
  // streamHw.addOpMulToPipeline(141, main_Fact, 141);
  streamHw.addOpMulToPipeline(142, 142, 142);
  streamHw.addOpMulToPipeline(143, 143, 143);
  streamHw.addOpAddToPipeline(142, 143, 143);
  // streamHw.addOpMulToPipeline(143, main_Fact, 143);
  streamHw.addOpMulToPipeline(144, 144, 144);
  streamHw.addOpMulToPipeline(145, 145, 145);
  streamHw.addOpAddToPipeline(144, 145, 145);
  // streamHw.addOpMulToPipeline(145, main_Fact, 145);
  streamHw.addOpMulToPipeline(146, 146, 146);
  streamHw.addOpMulToPipeline(147, 147, 147);
  streamHw.addOpAddToPipeline(146, 147, 147);
  // streamHw.addOpMulToPipeline(147, main_Fact, 147);
  streamHw.addOpMulToPipeline(148, 148, 148);
  streamHw.addOpMulToPipeline(149, 149, 149);
  streamHw.addOpAddToPipeline(148, 149, 149);
  // streamHw.addOpMulToPipeline(149, main_Fact, 149);
  streamHw.addOpMulToPipeline(150, 150, 150);
  streamHw.addOpMulToPipeline(151, 151, 151);
  streamHw.addOpAddToPipeline(150, 151, 151);
  // streamHw.addOpMulToPipeline(151, main_Fact, 151);
  streamHw.addOpMulToPipeline(152, 152, 152);
  streamHw.addOpMulToPipeline(153, 153, 153);
  streamHw.addOpAddToPipeline(152, 153, 153);
  // streamHw.addOpMulToPipeline(153, main_Fact, 153);
  streamHw.addOpMulToPipeline(154, 154, 154);
  streamHw.addOpMulToPipeline(155, 155, 155);
  streamHw.addOpAddToPipeline(154, 155, 155);
  // streamHw.addOpMulToPipeline(155, main_Fact, 155);
  streamHw.addOpMulToPipeline(156, 156, 156);
  streamHw.addOpMulToPipeline(157, 157, 157);
  streamHw.addOpAddToPipeline(156, 157, 157);
  // streamHw.addOpMulToPipeline(157, main_Fact, 157);
  streamHw.addOpMulToPipeline(158, 158, 158);
  streamHw.addOpMulToPipeline(159, 159, 159);
  streamHw.addOpAddToPipeline(158, 159, 159);
  // streamHw.addOpMulToPipeline(159, main_Fact, 159);
  streamHw.addOpMulToPipeline(160, 160, 160);
  streamHw.addOpMulToPipeline(161, 161, 161);
  streamHw.addOpAddToPipeline(160, 161, 161);
  // streamHw.addOpMulToPipeline(161, main_Fact, 161);

  streamHw.addOpMulToPipeline(162, 162, 162);
  // streamHw.addOpMulToPipeline(162, side_Fact, 162);
  streamHw.addOpMulToPipeline(163, 163, 163);
  // streamHw.addOpMulToPipeline(163, side_Fact, 163);
  // Additions needed for K=1
  streamHw.addOpAddToPipeline(166, 167, 167);
  streamHw.addOpAddToPipeline(168, 169, 169);
  streamHw.addOpAddToPipeline(170, 171, 171);
  streamHw.addOpAddToPipeline(172, 173, 173);
  
  streamHw.addOpMulToPipeline(174, NEG, 174);
  streamHw.addOpAddToPipeline(174, 175, 175);
  streamHw.addOpMulToPipeline(176, NEG, 176);
  streamHw.addOpAddToPipeline(176, 177, 177);
  streamHw.addOpMulToPipeline(178, NEG, 178);
  streamHw.addOpAddToPipeline(178, 179, 179);
  streamHw.addOpMulToPipeline(180, NEG, 180);
  streamHw.addOpAddToPipeline(180, 181, 181);
  streamHw.addOpMulToPipeline(182, NEG, 182);
  streamHw.addOpAddToPipeline(182, 183, 183);
  streamHw.addOpMulToPipeline(184, NEG, 184);
  streamHw.addOpAddToPipeline(184, 185, 185);

  // Processing starts
  size_t idxStartWin = 0;
  for (size_t J = 0; J < numWins; J++)
  {
    // Dynamic loading
    streamHw.copyToHw(inputSignal, idxStartWin + 768, 256, 768 + 1024);

    // Send signal to Workspace
    streamHw.startStreamDataMemToFifo(1024, 32, 1024);
    streamHw.startStreamDataFifoToMem(32, 0, 1024);
    streamHw.runPipeline();

    // Multiply Input Signal by Window coefficients
    blackman_Mult(streamHw);

    // In-Place RSRFFT calculation on StreamHw
    rfft(streamHw);

    // Calculate the magnitude and some gain offset, maximize parallelism
    mag_out_Streamed(streamHw);

    streamHw.copyFromHw(signalWindow, 0, 513, 0); // Only load relevant values

    // TODO: Save the Output in the Stream and just make the Max-Hold there, this saves us
    // 10 copys and some assignments, max potential savings: 513*10 + 513*10 + 100*10 + 513*2*10 = 21,520
    // for (size_t I = 0; I < sizeSpectrum; I++)
    // {
    //     outputSpectrum[I] = 0.5*(signalWindow[I] + outputSpectrum[I] + ec_abs(signalWindow[I] - outputSpectrum[I]));
    // }

    // Output: Magnitude Max-Hold
    for (size_t I = 0; I < sizeSpectrum; I++) // 513*10 = 5130
    {
      if (signalWindow[I] > outputSpectrum[I])
      {
        outputSpectrum[I] = signalWindow[I];
      }
    }

    streamHw.startStreamDataMemToFifo(1024 + 256, 32, 768);
    streamHw.startStreamDataFifoToMem(32, 1024, 768);
    streamHw.runPipeline();

    idxStartWin += stepBetweenWins;
  }

  // TODO: Calculate the log as an approximation via mults & adds. Potential saves: 15,903
  // Output in dBs
  // for (size_t I = 0; I < sizeSpectrum; I++) // 513 - Cost: 15,903
  // {
  //   outputSpectrum[I] = 4.34294f * ec_log(outputSpectrum[I]); // = 10.0f * ec_log(ec::Float(10.0f));
  // }

  for (size_t I = 0; I < sizeSpectrum; I++) // 513 - Cost: 17,442
  {
    outputSpectrum[I] = 4.34294f * ec_log(outputSpectrum[I]) + gainOffset; // = 10.0f * ec_log(ec::Float(10.0f));
  }
  
  outputSpectrum[0] -= innerLobesGain;
  outputSpectrum[sizeSpectrum - 1] -= innerLobesGain;

  return outputSpectrum;
}

/*
 * This is a real in-place split-radix FFT implemented
 * according to Sorensen: "Real-valued fast Fourier transform algorithms".
 * It is a direct translation of his fortran implementation.
 *
 * Output is arranged as:
 * [Re(0), Re(1),..., Re(N/2), Im(N/2-1),..., Im(1)]
 *
 * Im(0) and Im(N/2) are zero due to the input being real
 *
 * N is the length of X, M is log2(N)
 */
void rfft(ec::StreamHw& streamHw)
{
  int I_CC1, I_CC3, I_SS1, I_SS3;
  int I, I0, I1, I2, I3, I4, I5, I6, I7, I8, IS, ID;
  int J, K, N2;
  
  int I_NEG_SQRT1_2 = 3071;

  int N = 1024;
  int M = 10;

  // Bit reversal
  bitReversal_Streamed(streamHw, 0);

  fft_1_Streamed(streamHw); // Length 2 butterflies
  fft_2_Streamed(streamHw);
  fft_3_Streamed(streamHw);
  fft_4_Streamed(streamHw);
  fft_5_Streamed(streamHw);

  // L-Shaped Butterflies
  N2 = 32;
  for (K = 6; K < M-3; K++) {
    N2 *= 2;   // Depth indicator 4 - 1024

    IS = 0;
    ID = N2 * 2;
    // Seems to be Radix-8
    while (IS < N) {
      for (I = IS; I < N; I += ID) {
        
        I1 = I + 3*N2/8;
        I2 = I + 4*N2/8;
        I3 = I + 5*N2/8;
        I4 = I + 6*N2/8;
        I5 = I + 7*N2/8;

        // ASIGN
        streamHw.startStreamDataMemToFifo(I4, 1, 1); // X[I4]
        streamHw.startStreamDataMemToFifo(I2, 3, 1); // X[I2] 
        streamHw.startStreamDataMemToFifo(I, 7, 1); // X[I]

        streamHw.startStreamDataMemToFifo(I4, 9, 1); // X[I4]
        streamHw.startStreamDataMemToFifo(I2, 11, 1); // X[I2]

        streamHw.startStreamDataMemToFifo(I4, 17, 1); // X[I4]
        streamHw.startStreamDataMemToFifo(I2, 19, 1); // X[I2] 
        streamHw.startStreamDataMemToFifo(I, 23, 1); // X[I]
        

        streamHw.startStreamDataFifoToMem(7, I, 1); // X[I]
        streamHw.startStreamDataFifoToMem(11, I4, 1); // X[I4]
        streamHw.startStreamDataFifoToMem(19, I2, 1); // X[I2]
        
        streamHw.runPipeline();
        

        // ASIGN
        streamHw.startStreamDataMemToFifo(I3, 0, 1); // X[I3]
        streamHw.startStreamDataMemToFifo(I_NEG_SQRT1_2, 1, 1); // NEG_SQRT1_2 
        streamHw.startStreamDataMemToFifo(I5, 2, 1); // X[I5]
        streamHw.startStreamDataMemToFifo(I_NEG_SQRT1_2, 3, 1); // NEG_SQRT1_2 
        streamHw.startStreamDataMemToFifo(I1, 7, 1); // X[I1]

        streamHw.startStreamDataMemToFifo(I5, 8, 1); // X[I3]
        streamHw.startStreamDataMemToFifo(I_NEG_SQRT1_2, 9, 1); // SQRT1_2
        streamHw.startStreamDataMemToFifo(I3, 10, 1); // X[I5]
        streamHw.startStreamDataMemToFifo(I_NEG_SQRT1_2, 11, 1); // SQRT1_2
        streamHw.startStreamDataMemToFifo(I+N2/8, 13, 1); // X[I+N2/8]

        streamHw.startStreamDataMemToFifo(I1, 19, 1); // X[I1]
        streamHw.startStreamDataMemToFifo(I3, 20, 1); // X[I3]
        streamHw.startStreamDataMemToFifo(I_NEG_SQRT1_2, 21, 1); // NEG_SQRT1_2 
        streamHw.startStreamDataMemToFifo(I5, 22, 1); // X[I5]
        streamHw.startStreamDataMemToFifo(I_NEG_SQRT1_2, 23, 1); // NEG_SQRT1_2 

        streamHw.startStreamDataMemToFifo(I+N2/8, 25, 1); // X[I+N2/8]  
        streamHw.startStreamDataMemToFifo(I5, 28, 1); // X[I3]
        streamHw.startStreamDataMemToFifo(I_NEG_SQRT1_2, 29, 1); // SQRT1_2
        streamHw.startStreamDataMemToFifo(I3, 30, 1); // X[I5]
        streamHw.startStreamDataMemToFifo(I_NEG_SQRT1_2, 31, 1); // SQRT1_2
        

        streamHw.startStreamDataFifoToMem(7, I5, 1); // X[I5]
        streamHw.startStreamDataFifoToMem(13, I+N2/8, 1); // X[I+N2/8]
        streamHw.startStreamDataFifoToMem(19, I3, 1); // x[I3]
        streamHw.startStreamDataFifoToMem(31, I1, 1); // X[I1]
        streamHw.runPipeline();
      }
      IS = 2*ID - N2;
      ID = 4*ID;
    }

    for (J = 1; J <= N2/8 - 1; J++) {

      I_CC1 = J*(WINDOW_SIZE>>K) - 1 + 2563;
      I_CC3 = I_CC1 + 127;
      I_SS1 = I_CC3 + 127;
      I_SS3 = I_SS1 + 127;

      IS = 0;
      ID = 2 * N2;
      while (IS < N) {
        for (I = IS; I < N; I += ID) {
          I1 = I  + J;
          I2 = I1 + 1*N2/4;
          I3 = I1 + 2*N2/4;
          I4 = I1 + 3*N2/4;
          
          I5 = I  - J + N2/4;
          I6 = I5 + 1*N2/4;
          I7 = I5 + 2*N2/4;
          I8 = I5 + 3*N2/4;

          // ASIGN
          streamHw.startStreamDataMemToFifo(I3, 0, 1); // X[I3]
          streamHw.startStreamDataMemToFifo(I_CC1, 1, 1); // CC1 
          streamHw.startStreamDataMemToFifo(I7, 2, 1); // X[I7]
          streamHw.startStreamDataMemToFifo(I_SS1, 3, 1); // SS1 
          streamHw.startStreamDataMemToFifo(I4, 4, 1); // X[I4]
          streamHw.startStreamDataMemToFifo(I_CC3, 5, 1); // CC3 
          streamHw.startStreamDataMemToFifo(I8, 6, 1); // X[I8]
          streamHw.startStreamDataMemToFifo(I_SS3, 7, 1); // SS3
          streamHw.startStreamDataMemToFifo(I7, 8, 1); // X[I7]
          streamHw.startStreamDataMemToFifo(I_CC1, 9, 1); // CC1
          streamHw.startStreamDataMemToFifo(I3, 10, 1); // X[I3]
          streamHw.startStreamDataMemToFifo(I_SS1, 11, 1); // SS1
          streamHw.startStreamDataMemToFifo(I8, 12, 1); // X[I8]
          streamHw.startStreamDataMemToFifo(I_CC3, 13, 1); // CC3
          streamHw.startStreamDataMemToFifo(I4, 14, 1); // X[I4]
          streamHw.startStreamDataMemToFifo(I_SS3, 15, 1); // SS3

          streamHw.startStreamDataMemToFifo(I3, 16, 1); // X[I3]
          streamHw.startStreamDataMemToFifo(I_CC1, 17, 1); // CC1
          streamHw.startStreamDataMemToFifo(I7, 18, 1); // X[I7]
          streamHw.startStreamDataMemToFifo(I_SS1, 19, 1); // SS1
          streamHw.startStreamDataMemToFifo(I4, 20, 1); // X[I4]
          streamHw.startStreamDataMemToFifo(I_CC3, 21, 1); // CC3
          streamHw.startStreamDataMemToFifo(I8, 22, 1); // X[I8]
          streamHw.startStreamDataMemToFifo(I_SS3, 23, 1); // SS3
          streamHw.startStreamDataMemToFifo(I7, 24, 1); // X[I7]
          streamHw.startStreamDataMemToFifo(I_CC1, 25, 1); // CC1
          streamHw.startStreamDataMemToFifo(I3, 26, 1); // X[I3]
          streamHw.startStreamDataMemToFifo(I_SS1, 27, 1); // SS1
          streamHw.startStreamDataMemToFifo(I8, 28, 1); // X[I8]
          streamHw.startStreamDataMemToFifo(I_CC3, 29, 1); // CC3
          streamHw.startStreamDataMemToFifo(I4, 30, 1); // X[I4]
          streamHw.startStreamDataMemToFifo(I_SS3, 31, 1); // SS3

          streamHw.startStreamDataFifoToMem(13, 1028, 1); // T5
          streamHw.startStreamDataFifoToMem(7, 1029, 1); // T6
          streamHw.startStreamDataFifoToMem(19, 1030, 1); // T7
          streamHw.startStreamDataFifoToMem(31, 1031, 1); // T8
          
          streamHw.runPipeline();

          // ASIGN
          streamHw.startStreamDataMemToFifo(1028, 1, 1); // T5
          streamHw.startStreamDataMemToFifo(I6, 3, 1); // X[I6]
          streamHw.startStreamDataMemToFifo(1028, 9, 1); // T5
          streamHw.startStreamDataMemToFifo(I6, 11, 1); // X[I6]
          streamHw.startStreamDataMemToFifo(I1, 21, 1); // X[I1]
          streamHw.startStreamDataMemToFifo(1029, 23, 1); // T6
          streamHw.startStreamDataMemToFifo(I1, 25, 1); // X[I1]
          streamHw.startStreamDataMemToFifo(1029, 27, 1); // T6

          streamHw.startStreamDataFifoToMem(3, I8, 1); // X[I8]
          streamHw.startStreamDataFifoToMem(11, I3, 1); // X[I3]
          streamHw.startStreamDataFifoToMem(23, I1, 1); // X[I1]
          streamHw.startStreamDataFifoToMem(25, I6, 1); // X[I6]

          streamHw.runPipeline();

          // ASIGN
          streamHw.startStreamDataMemToFifo(1030, 1, 1); // T7
          streamHw.startStreamDataMemToFifo(I2, 3, 1); // X[I2]
          streamHw.startStreamDataMemToFifo(1030, 9, 1); // T7
          streamHw.startStreamDataMemToFifo(I2, 11, 1); // X[I2]
          streamHw.startStreamDataMemToFifo(I5, 21, 1); // X[I5]
          streamHw.startStreamDataMemToFifo(1031, 23, 1); // T8
          streamHw.startStreamDataMemToFifo(I5, 25, 1); // X[I5]  
          streamHw.startStreamDataMemToFifo(1031, 27, 1); // T8
          
          streamHw.startStreamDataFifoToMem(3, I4, 1); // X[I4]
          streamHw.startStreamDataFifoToMem(11, I7, 1); // X[I7]
          streamHw.startStreamDataFifoToMem(23, I2, 1); // X[I2]
          streamHw.startStreamDataFifoToMem(25, I5, 1); // X[I5]

          streamHw.runPipeline();
        }
        IS = 2*ID - N2;
        ID = 4*ID;
      }
    }
  }

  fft_7_Streamed(streamHw);
  fft_8_Streamed(streamHw);
  fft_9_Streamed(streamHw);
  fft_10_Streamed(streamHw);
}

void bitReversal_Streamed(ec::StreamHw& streamHw,
                          int offset)
{
  for (size_t I = 0; I < shiftRev_I.size(); I++)
  {
    size_t I_pos = shiftRev_I[I] + offset;
    size_t J_pos = shiftRev_J[I] + offset;

    streamHw.startStreamDataMemToFifo(I_pos, 32, 1);
    streamHw.startStreamDataMemToFifo(J_pos, 33, 1);
    
    streamHw.startStreamDataFifoToMem(32, J_pos, 1);
    streamHw.startStreamDataFifoToMem(33, I_pos, 1);

    streamHw.runPipeline();
  }
}

void blackman_Mult(ec::StreamHw& streamHw)
{
  int IB = 3072;

  streamHw.startStreamDataMemToFifo(0,       0, 64);
  streamHw.startStreamDataMemToFifo(IB,      1, 64);
  streamHw.startStreamDataMemToFifo(64,      4, 64);
  streamHw.startStreamDataMemToFifo(IB+64,   5, 64);
  streamHw.startStreamDataMemToFifo(128,     8, 64);
  streamHw.startStreamDataMemToFifo(IB+128,  9, 64);
  streamHw.startStreamDataMemToFifo(192,    12, 64);
  streamHw.startStreamDataMemToFifo(IB+192, 13, 64);
  streamHw.startStreamDataMemToFifo(256,    20, 64);
  streamHw.startStreamDataMemToFifo(IB+256, 21, 64);
  streamHw.startStreamDataMemToFifo(320,    24, 64);
  streamHw.startStreamDataMemToFifo(IB+320, 25, 64);
  streamHw.startStreamDataMemToFifo(384,    34, 64);
  streamHw.startStreamDataMemToFifo(IB+384, 35, 64);
  streamHw.startStreamDataMemToFifo(448,    38, 64);
  streamHw.startStreamDataMemToFifo(IB+448, 39, 64);
  streamHw.startStreamDataMemToFifo(512,    42, 64);
  streamHw.startStreamDataMemToFifo(IB+512, 43, 64);
  streamHw.startStreamDataMemToFifo(576,    46, 64);
  streamHw.startStreamDataMemToFifo(IB+576, 47, 64);
  streamHw.startStreamDataMemToFifo(640,    50, 64);
  streamHw.startStreamDataMemToFifo(IB+640, 51, 64);
  streamHw.startStreamDataMemToFifo(704,    54, 64);
  streamHw.startStreamDataMemToFifo(IB+704, 55, 64);
  streamHw.startStreamDataMemToFifo(768,    58, 64);
  streamHw.startStreamDataMemToFifo(IB+768, 59, 64);
  streamHw.startStreamDataMemToFifo(832,    62, 64);
  streamHw.startStreamDataMemToFifo(IB+832, 63, 64);
  streamHw.startStreamDataMemToFifo(896,    66, 64);
  streamHw.startStreamDataMemToFifo(IB+896, 67, 64);
  streamHw.startStreamDataMemToFifo(960,    70, 64);
  streamHw.startStreamDataMemToFifo(IB+960, 71, 64);

  streamHw.startStreamDataFifoToMem(1,    0, 64);
  streamHw.startStreamDataFifoToMem(5,   64, 64);
  streamHw.startStreamDataFifoToMem(9,  128, 64);
  streamHw.startStreamDataFifoToMem(13, 192, 64);
  streamHw.startStreamDataFifoToMem(21, 256, 64);
  streamHw.startStreamDataFifoToMem(25, 320, 64);
  streamHw.startStreamDataFifoToMem(35, 384, 64);
  streamHw.startStreamDataFifoToMem(39, 448, 64);
  streamHw.startStreamDataFifoToMem(43, 512, 64);
  streamHw.startStreamDataFifoToMem(47, 576, 64);
  streamHw.startStreamDataFifoToMem(51, 640, 64);
  streamHw.startStreamDataFifoToMem(55, 704, 64);
  streamHw.startStreamDataFifoToMem(59, 768, 64);
  streamHw.startStreamDataFifoToMem(63, 832, 64);
  streamHw.startStreamDataFifoToMem(67, 896, 64);
  streamHw.startStreamDataFifoToMem(71, 960, 64);
  streamHw.runPipeline();
}

void fft_1_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int ID;

  for (size_t ID = 0; ID < WINDOW_SIZE; ID+=64)
  {
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+1, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+4, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+5, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+6, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+4, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+7, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+5, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+8, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+6, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+9, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+7, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+12, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+8, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+13, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+9, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+16, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+10, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+17, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+11, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+20, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+12, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+21, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+13, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+22, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+14, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+23, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+15, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+24, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+16, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+25, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+17, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+28, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+18, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+29, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+19, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+30, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+20, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+31, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+21, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+32, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+22, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+33, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+23, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+36, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+24, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+37, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+25, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+38, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+26, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+39, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+27, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+40, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+28, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+41, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+29, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+44, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+30, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+45, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+31, 1);
    streamHw.runPipeline();

    // First pipeline: Only Adds
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IS+1,    3, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   21, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   23, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   25, 1);
    streamHw.startStreamDataMemToFifo(IS+5,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+6,   35, 1);
    streamHw.startStreamDataMemToFifo(IS+7,   37, 1);
    streamHw.startStreamDataMemToFifo(IS+8,   43, 1);
    streamHw.startStreamDataMemToFifo(IS+9,   45, 1);
    streamHw.startStreamDataMemToFifo(IS+10,  51, 1);
    streamHw.startStreamDataMemToFifo(IS+11,  53, 1);
    streamHw.startStreamDataMemToFifo(IS+12,  59, 1);
    streamHw.startStreamDataMemToFifo(IS+13,  61, 1);
    streamHw.startStreamDataMemToFifo(IS+14,  67, 1);
    streamHw.startStreamDataMemToFifo(IS+15,  69, 1);
    streamHw.startStreamDataMemToFifo(IS+16,  79, 1);
    streamHw.startStreamDataMemToFifo(IS+17,  81, 1);
    streamHw.startStreamDataMemToFifo(IS+18,  95, 1);
    streamHw.startStreamDataMemToFifo(IS+19,  97, 1);
    streamHw.startStreamDataMemToFifo(IS+20, 103, 1);
    streamHw.startStreamDataMemToFifo(IS+21, 105, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 124, 1);
    streamHw.startStreamDataMemToFifo(IS+23, 125, 1);
    streamHw.startStreamDataMemToFifo(IS+24, 166, 1);
    streamHw.startStreamDataMemToFifo(IS+25, 167, 1);
    streamHw.startStreamDataMemToFifo(IS+26, 168, 1);
    streamHw.startStreamDataMemToFifo(IS+27, 169, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 170, 1);
    streamHw.startStreamDataMemToFifo(IS+29, 171, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 172, 1);
    streamHw.startStreamDataMemToFifo(IS+31, 173, 1);

    streamHw.startStreamDataFifoToMem(3,      ID, 1);
    streamHw.startStreamDataFifoToMem(23,   ID+4, 1);
    streamHw.startStreamDataFifoToMem(31,   ID+6, 1);
    streamHw.startStreamDataFifoToMem(37,   ID+8, 1);
    streamHw.startStreamDataFifoToMem(45,  ID+12, 1);
    streamHw.startStreamDataFifoToMem(53,  ID+16, 1);
    streamHw.startStreamDataFifoToMem(61,  ID+20, 1);
    streamHw.startStreamDataFifoToMem(69,  ID+22, 1);
    streamHw.startStreamDataFifoToMem(81,  ID+24, 1);
    streamHw.startStreamDataFifoToMem(97,  ID+28, 1);
    streamHw.startStreamDataFifoToMem(105, ID+30, 1);
    streamHw.startStreamDataFifoToMem(125, ID+32, 1);
    streamHw.startStreamDataFifoToMem(167, ID+36, 1);
    streamHw.startStreamDataFifoToMem(169, ID+38, 1);
    streamHw.startStreamDataFifoToMem(171, ID+40, 1);
    streamHw.startStreamDataFifoToMem(173, ID+44, 1);
    streamHw.runPipeline();
    
    // Second pipeline: Only Subs
    streamHw.startStreamDataMemToFifo(IS,      9, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   11, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   29, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  185, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  184, 1);
    streamHw.startStreamDataMemToFifo(IS+6,   57, 1);
    streamHw.startStreamDataMemToFifo(IS+7,   65, 1);
    streamHw.startStreamDataMemToFifo(IS+8,   75, 1);
    streamHw.startStreamDataMemToFifo(IS+9,   77, 1);
    streamHw.startStreamDataMemToFifo(IS+10,  87, 1);
    streamHw.startStreamDataMemToFifo(IS+11,  89, 1);
    streamHw.startStreamDataMemToFifo(IS+12,  91, 1);
    streamHw.startStreamDataMemToFifo(IS+13,  93, 1);
    streamHw.startStreamDataMemToFifo(IS+14,  97, 1);
    streamHw.startStreamDataMemToFifo(IS+15, 101, 1);
    streamHw.startStreamDataMemToFifo(IS+16, 105, 1);
    streamHw.startStreamDataMemToFifo(IS+17, 109, 1);
    streamHw.startStreamDataMemToFifo(IS+18, 127, 1);
    streamHw.startStreamDataMemToFifo(IS+19, 126, 1);
    streamHw.startStreamDataMemToFifo(IS+20, 129, 1);
    streamHw.startStreamDataMemToFifo(IS+21, 128, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 175, 1);
    streamHw.startStreamDataMemToFifo(IS+23, 174, 1);
    streamHw.startStreamDataMemToFifo(IS+24, 177, 1);
    streamHw.startStreamDataMemToFifo(IS+25, 176, 1);
    streamHw.startStreamDataMemToFifo(IS+26, 179, 1);
    streamHw.startStreamDataMemToFifo(IS+27, 178, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 181, 1);
    streamHw.startStreamDataMemToFifo(IS+29, 180, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 183, 1);
    streamHw.startStreamDataMemToFifo(IS+31, 182, 1);

    streamHw.startStreamDataFifoToMem(11,   ID+1, 1);
    streamHw.startStreamDataFifoToMem(31,   ID+5, 1);
    streamHw.startStreamDataFifoToMem(185,  ID+7, 1);
    streamHw.startStreamDataFifoToMem(65,   ID+9, 1);
    streamHw.startStreamDataFifoToMem(77,  ID+13, 1);
    streamHw.startStreamDataFifoToMem(89,  ID+17, 1);
    streamHw.startStreamDataFifoToMem(93,  ID+21, 1);
    streamHw.startStreamDataFifoToMem(101, ID+23, 1);
    streamHw.startStreamDataFifoToMem(109, ID+25, 1);
    streamHw.startStreamDataFifoToMem(127, ID+29, 1);
    streamHw.startStreamDataFifoToMem(129, ID+31, 1);
    streamHw.startStreamDataFifoToMem(175, ID+33, 1);
    streamHw.startStreamDataFifoToMem(177, ID+37, 1);
    streamHw.startStreamDataFifoToMem(179, ID+39, 1);
    streamHw.startStreamDataFifoToMem(181, ID+41, 1);
    streamHw.startStreamDataFifoToMem(183, ID+45, 1);
    streamHw.runPipeline();
  }

  for (size_t ID = 48; ID < WINDOW_SIZE; ID+=256)
  {
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+1, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+4, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+5, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+6, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+4, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+7, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+5, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+8, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+6, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+9, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+7, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+12, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+8, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+13, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+9, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+64, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+10, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+65, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+11, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+68, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+12, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+69, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+13, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+70, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+14, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+71, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+15, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+72, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+16, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+73, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+17, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+76, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+18, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+77, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+19, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+128, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+20, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+129, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+21, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+132, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+22, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+133, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+23, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+134, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+24, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+135, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+25, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+136, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+26, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+137, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+27, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+140, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+28, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+141, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+29, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+192, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+30, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(ID+193, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+31, 1);
    streamHw.runPipeline();

    // First pipeline: Only Adds
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IS+1,    3, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   21, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   23, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   25, 1);
    streamHw.startStreamDataMemToFifo(IS+5,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+6,   35, 1);
    streamHw.startStreamDataMemToFifo(IS+7,   37, 1);
    streamHw.startStreamDataMemToFifo(IS+8,   43, 1);
    streamHw.startStreamDataMemToFifo(IS+9,   45, 1);
    streamHw.startStreamDataMemToFifo(IS+10,  51, 1);
    streamHw.startStreamDataMemToFifo(IS+11,  53, 1);
    streamHw.startStreamDataMemToFifo(IS+12,  59, 1);
    streamHw.startStreamDataMemToFifo(IS+13,  61, 1);
    streamHw.startStreamDataMemToFifo(IS+14,  67, 1);
    streamHw.startStreamDataMemToFifo(IS+15,  69, 1);
    streamHw.startStreamDataMemToFifo(IS+16,  79, 1);
    streamHw.startStreamDataMemToFifo(IS+17,  81, 1);
    streamHw.startStreamDataMemToFifo(IS+18,  95, 1);
    streamHw.startStreamDataMemToFifo(IS+19,  97, 1);
    streamHw.startStreamDataMemToFifo(IS+20, 103, 1);
    streamHw.startStreamDataMemToFifo(IS+21, 105, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 124, 1);
    streamHw.startStreamDataMemToFifo(IS+23, 125, 1);
    streamHw.startStreamDataMemToFifo(IS+24, 166, 1);
    streamHw.startStreamDataMemToFifo(IS+25, 167, 1);
    streamHw.startStreamDataMemToFifo(IS+26, 168, 1);
    streamHw.startStreamDataMemToFifo(IS+27, 169, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 170, 1);
    streamHw.startStreamDataMemToFifo(IS+29, 171, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 172, 1);
    streamHw.startStreamDataMemToFifo(IS+31, 173, 1);

    streamHw.startStreamDataFifoToMem(3,       ID, 1);
    streamHw.startStreamDataFifoToMem(23,    ID+4, 1);
    streamHw.startStreamDataFifoToMem(31,    ID+6, 1);
    streamHw.startStreamDataFifoToMem(37,    ID+8, 1);
    streamHw.startStreamDataFifoToMem(45,   ID+12, 1);
    streamHw.startStreamDataFifoToMem(53,   ID+64, 1);
    streamHw.startStreamDataFifoToMem(61,   ID+68, 1);
    streamHw.startStreamDataFifoToMem(69,   ID+70, 1);
    streamHw.startStreamDataFifoToMem(81,   ID+72, 1);
    streamHw.startStreamDataFifoToMem(97,   ID+76, 1);
    streamHw.startStreamDataFifoToMem(105, ID+128, 1);
    streamHw.startStreamDataFifoToMem(125, ID+132, 1);
    streamHw.startStreamDataFifoToMem(167, ID+134, 1);
    streamHw.startStreamDataFifoToMem(169, ID+136, 1);
    streamHw.startStreamDataFifoToMem(171, ID+140, 1);
    streamHw.startStreamDataFifoToMem(173, ID+192, 1);
    streamHw.runPipeline();
    
    // Second pipeline: Only Subs
    streamHw.startStreamDataMemToFifo(IS,      9, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   11, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   29, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  185, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  184, 1);
    streamHw.startStreamDataMemToFifo(IS+6,   57, 1);
    streamHw.startStreamDataMemToFifo(IS+7,   65, 1);
    streamHw.startStreamDataMemToFifo(IS+8,   75, 1);
    streamHw.startStreamDataMemToFifo(IS+9,   77, 1);
    streamHw.startStreamDataMemToFifo(IS+10,  87, 1);
    streamHw.startStreamDataMemToFifo(IS+11,  89, 1);
    streamHw.startStreamDataMemToFifo(IS+12,  91, 1);
    streamHw.startStreamDataMemToFifo(IS+13,  93, 1);
    streamHw.startStreamDataMemToFifo(IS+14,  97, 1);
    streamHw.startStreamDataMemToFifo(IS+15, 101, 1);
    streamHw.startStreamDataMemToFifo(IS+16, 105, 1);
    streamHw.startStreamDataMemToFifo(IS+17, 109, 1);
    streamHw.startStreamDataMemToFifo(IS+18, 127, 1);
    streamHw.startStreamDataMemToFifo(IS+19, 126, 1);
    streamHw.startStreamDataMemToFifo(IS+20, 129, 1);
    streamHw.startStreamDataMemToFifo(IS+21, 128, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 175, 1);
    streamHw.startStreamDataMemToFifo(IS+23, 174, 1);
    streamHw.startStreamDataMemToFifo(IS+24, 177, 1);
    streamHw.startStreamDataMemToFifo(IS+25, 176, 1);
    streamHw.startStreamDataMemToFifo(IS+26, 179, 1);
    streamHw.startStreamDataMemToFifo(IS+27, 178, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 181, 1);
    streamHw.startStreamDataMemToFifo(IS+29, 180, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 183, 1);
    streamHw.startStreamDataMemToFifo(IS+31, 182, 1);

    streamHw.startStreamDataFifoToMem(11,    ID+1, 1);
    streamHw.startStreamDataFifoToMem(31,    ID+5, 1);
    streamHw.startStreamDataFifoToMem(185,   ID+7, 1);
    streamHw.startStreamDataFifoToMem(65,    ID+9, 1);
    streamHw.startStreamDataFifoToMem(77,   ID+13, 1);
    streamHw.startStreamDataFifoToMem(89,   ID+65, 1);
    streamHw.startStreamDataFifoToMem(93,   ID+69, 1);
    streamHw.startStreamDataFifoToMem(101,  ID+71, 1);
    streamHw.startStreamDataFifoToMem(109,  ID+73, 1);
    streamHw.startStreamDataFifoToMem(127,  ID+77, 1);
    streamHw.startStreamDataFifoToMem(129, ID+129, 1);
    streamHw.startStreamDataFifoToMem(175, ID+133, 1);
    streamHw.startStreamDataFifoToMem(177, ID+135, 1);
    streamHw.startStreamDataFifoToMem(179, ID+137, 1);
    streamHw.startStreamDataFifoToMem(181, ID+141, 1);
    streamHw.startStreamDataFifoToMem(183, ID+193, 1);
    streamHw.runPipeline();
  }
  
  // Save values in the available memory space
  streamHw.startStreamDataMemToFifo(126, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(127, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+1, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(244, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+2, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(245, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+3, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(246, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+4, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(247, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+5, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(248, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+6, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(249, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+7, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(252, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+8, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(253, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+9, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(382, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+10, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(383, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+11, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(500, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+12, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(501, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+13, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(502, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+14, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(503, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+15, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(504, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+16, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(505, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+17, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(508, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+18, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(509, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+19, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(510, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+20, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(511, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+21, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(638, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+22, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(639, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+23, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(756, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+24, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(757, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+25, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(758, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+26, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(759, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+27, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(760, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+28, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(761, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+29, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(764, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+30, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(765, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+31, 1);
  streamHw.runPipeline();

  // First pipeline: Only Adds
  streamHw.startStreamDataMemToFifo(IS,      1, 1);
  streamHw.startStreamDataMemToFifo(IS+1,    3, 1);
  streamHw.startStreamDataMemToFifo(IS+2,   21, 1);
  streamHw.startStreamDataMemToFifo(IS+3,   23, 1);
  streamHw.startStreamDataMemToFifo(IS+4,   25, 1);
  streamHw.startStreamDataMemToFifo(IS+5,   31, 1);
  streamHw.startStreamDataMemToFifo(IS+6,   35, 1);
  streamHw.startStreamDataMemToFifo(IS+7,   37, 1);
  streamHw.startStreamDataMemToFifo(IS+8,   43, 1);
  streamHw.startStreamDataMemToFifo(IS+9,   45, 1);
  streamHw.startStreamDataMemToFifo(IS+10,  51, 1);
  streamHw.startStreamDataMemToFifo(IS+11,  53, 1);
  streamHw.startStreamDataMemToFifo(IS+12,  59, 1);
  streamHw.startStreamDataMemToFifo(IS+13,  61, 1);
  streamHw.startStreamDataMemToFifo(IS+14,  67, 1);
  streamHw.startStreamDataMemToFifo(IS+15,  69, 1);
  streamHw.startStreamDataMemToFifo(IS+16,  79, 1);
  streamHw.startStreamDataMemToFifo(IS+17,  81, 1);
  streamHw.startStreamDataMemToFifo(IS+18,  95, 1);
  streamHw.startStreamDataMemToFifo(IS+19,  97, 1);
  streamHw.startStreamDataMemToFifo(IS+20, 103, 1);
  streamHw.startStreamDataMemToFifo(IS+21, 105, 1);
  streamHw.startStreamDataMemToFifo(IS+22, 124, 1);
  streamHw.startStreamDataMemToFifo(IS+23, 125, 1);
  streamHw.startStreamDataMemToFifo(IS+24, 166, 1);
  streamHw.startStreamDataMemToFifo(IS+25, 167, 1);
  streamHw.startStreamDataMemToFifo(IS+26, 168, 1);
  streamHw.startStreamDataMemToFifo(IS+27, 169, 1);
  streamHw.startStreamDataMemToFifo(IS+28, 170, 1);
  streamHw.startStreamDataMemToFifo(IS+29, 171, 1);
  streamHw.startStreamDataMemToFifo(IS+30, 172, 1);
  streamHw.startStreamDataMemToFifo(IS+31, 173, 1);

  streamHw.startStreamDataFifoToMem(3,   126, 1);
  streamHw.startStreamDataFifoToMem(23,  244, 1);
  streamHw.startStreamDataFifoToMem(31,  246, 1);
  streamHw.startStreamDataFifoToMem(37,  248, 1);
  streamHw.startStreamDataFifoToMem(45,  252, 1);
  streamHw.startStreamDataFifoToMem(53,  382, 1);
  streamHw.startStreamDataFifoToMem(61,  500, 1);
  streamHw.startStreamDataFifoToMem(69,  502, 1);
  streamHw.startStreamDataFifoToMem(81,  504, 1);
  streamHw.startStreamDataFifoToMem(97,  508, 1);
  streamHw.startStreamDataFifoToMem(105, 510, 1);
  streamHw.startStreamDataFifoToMem(125, 638, 1);
  streamHw.startStreamDataFifoToMem(167, 756, 1);
  streamHw.startStreamDataFifoToMem(169, 758, 1);
  streamHw.startStreamDataFifoToMem(171, 760, 1);
  streamHw.startStreamDataFifoToMem(173, 764, 1);
  streamHw.runPipeline();
  
  // Second pipeline: Only Subs
  streamHw.startStreamDataMemToFifo(IS,      9, 1);
  streamHw.startStreamDataMemToFifo(IS+1,   11, 1);
  streamHw.startStreamDataMemToFifo(IS+2,   31, 1);
  streamHw.startStreamDataMemToFifo(IS+3,   29, 1);
  streamHw.startStreamDataMemToFifo(IS+4,  185, 1);
  streamHw.startStreamDataMemToFifo(IS+5,  184, 1);
  streamHw.startStreamDataMemToFifo(IS+6,   57, 1);
  streamHw.startStreamDataMemToFifo(IS+7,   65, 1);
  streamHw.startStreamDataMemToFifo(IS+8,   75, 1);
  streamHw.startStreamDataMemToFifo(IS+9,   77, 1);
  streamHw.startStreamDataMemToFifo(IS+10,  87, 1);
  streamHw.startStreamDataMemToFifo(IS+11,  89, 1);
  streamHw.startStreamDataMemToFifo(IS+12,  91, 1);
  streamHw.startStreamDataMemToFifo(IS+13,  93, 1);
  streamHw.startStreamDataMemToFifo(IS+14,  97, 1);
  streamHw.startStreamDataMemToFifo(IS+15, 101, 1);
  streamHw.startStreamDataMemToFifo(IS+16, 105, 1);
  streamHw.startStreamDataMemToFifo(IS+17, 109, 1);
  streamHw.startStreamDataMemToFifo(IS+18, 127, 1);
  streamHw.startStreamDataMemToFifo(IS+19, 126, 1);
  streamHw.startStreamDataMemToFifo(IS+20, 129, 1);
  streamHw.startStreamDataMemToFifo(IS+21, 128, 1);
  streamHw.startStreamDataMemToFifo(IS+22, 175, 1);
  streamHw.startStreamDataMemToFifo(IS+23, 174, 1);
  streamHw.startStreamDataMemToFifo(IS+24, 177, 1);
  streamHw.startStreamDataMemToFifo(IS+25, 176, 1);
  streamHw.startStreamDataMemToFifo(IS+26, 179, 1);
  streamHw.startStreamDataMemToFifo(IS+27, 178, 1);
  streamHw.startStreamDataMemToFifo(IS+28, 181, 1);
  streamHw.startStreamDataMemToFifo(IS+29, 180, 1);
  streamHw.startStreamDataMemToFifo(IS+30, 183, 1);
  streamHw.startStreamDataMemToFifo(IS+31, 182, 1);

  streamHw.startStreamDataFifoToMem(11,  127, 1);
  streamHw.startStreamDataFifoToMem(31,  245, 1);
  streamHw.startStreamDataFifoToMem(185, 247, 1);
  streamHw.startStreamDataFifoToMem(65,  249, 1);
  streamHw.startStreamDataFifoToMem(77,  253, 1);
  streamHw.startStreamDataFifoToMem(89,  383, 1);
  streamHw.startStreamDataFifoToMem(93,  501, 1);
  streamHw.startStreamDataFifoToMem(101, 503, 1);
  streamHw.startStreamDataFifoToMem(109, 505, 1);
  streamHw.startStreamDataFifoToMem(127, 509, 1);
  streamHw.startStreamDataFifoToMem(129, 511, 1);
  streamHw.startStreamDataFifoToMem(175, 639, 1);
  streamHw.startStreamDataFifoToMem(177, 757, 1);
  streamHw.startStreamDataFifoToMem(179, 759, 1);
  streamHw.startStreamDataFifoToMem(181, 761, 1);
  streamHw.startStreamDataFifoToMem(183, 765, 1);
  streamHw.runPipeline();
  
  // Remaining vlues can't be split into Adds-Subs
  // Save values in the available memory space
  streamHw.startStreamDataMemToFifo(894, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(895, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+1, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1012, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+2, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1013, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+3, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1014, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+4, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1015, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+5, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1016, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+6, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1017, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+7, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1020, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+8, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1021, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+9, 1);
  streamHw.runPipeline();

  // Add-Sub remaining values
  streamHw.startStreamDataMemToFifo(IS,    166, 1);
  streamHw.startStreamDataMemToFifo(IS+1,  167, 1);
  streamHw.startStreamDataMemToFifo(IS,    175, 1);
  streamHw.startStreamDataMemToFifo(IS+1,  174, 1);
  streamHw.startStreamDataMemToFifo(IS+2,  168, 1);
  streamHw.startStreamDataMemToFifo(IS+3,  169, 1);
  streamHw.startStreamDataMemToFifo(IS+2,  177, 1);
  streamHw.startStreamDataMemToFifo(IS+3,  176, 1);
  streamHw.startStreamDataMemToFifo(IS+4,  170, 1);
  streamHw.startStreamDataMemToFifo(IS+5,  171, 1);
  streamHw.startStreamDataMemToFifo(IS+4,  179, 1);
  streamHw.startStreamDataMemToFifo(IS+5,  178, 1);
  streamHw.startStreamDataMemToFifo(IS+6,  172, 1);
  streamHw.startStreamDataMemToFifo(IS+7,  173, 1);
  streamHw.startStreamDataMemToFifo(IS+6,  181, 1);
  streamHw.startStreamDataMemToFifo(IS+7,  180, 1);
  streamHw.startStreamDataMemToFifo(IS+8,   35, 1);
  streamHw.startStreamDataMemToFifo(IS+9,   37, 1);
  streamHw.startStreamDataMemToFifo(IS+8,  183, 1);
  streamHw.startStreamDataMemToFifo(IS+9,  182, 1);

  streamHw.startStreamDataFifoToMem(167,  894, 1);
  streamHw.startStreamDataFifoToMem(175,  895, 1);
  streamHw.startStreamDataFifoToMem(169, 1012, 1);
  streamHw.startStreamDataFifoToMem(177, 1013, 1);
  streamHw.startStreamDataFifoToMem(171, 1014, 1);
  streamHw.startStreamDataFifoToMem(179, 1015, 1);
  streamHw.startStreamDataFifoToMem(173, 1016, 1);
  streamHw.startStreamDataFifoToMem(181, 1017, 1);
  streamHw.startStreamDataFifoToMem(37,  1020, 1);
  streamHw.startStreamDataFifoToMem(183, 1021, 1);
  streamHw.runPipeline();
}

void fft_2_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int IE = 1152;
  for (size_t I = 0; I < WINDOW_SIZE; I+=128)
  {
    // First pipeline Adds - TX
    streamHw.startStreamDataMemToFifo(I+2,    1, 1);
    streamHw.startStreamDataMemToFifo(I+3,    3, 1);
    streamHw.startStreamDataMemToFifo(I+10,  21, 1);
    streamHw.startStreamDataMemToFifo(I+11,  23, 1);
    streamHw.startStreamDataMemToFifo(I+14,  25, 1);
    streamHw.startStreamDataMemToFifo(I+15,  31, 1);
    streamHw.startStreamDataMemToFifo(I+18,  35, 1);
    streamHw.startStreamDataMemToFifo(I+19,  37, 1);
    streamHw.startStreamDataMemToFifo(I+26,  43, 1);
    streamHw.startStreamDataMemToFifo(I+27,  45, 1);
    streamHw.startStreamDataMemToFifo(I+34,  51, 1);
    streamHw.startStreamDataMemToFifo(I+35,  53, 1);
    streamHw.startStreamDataMemToFifo(I+42,  59, 1);
    streamHw.startStreamDataMemToFifo(I+43,  61, 1);
    streamHw.startStreamDataMemToFifo(I+46,  67, 1);
    streamHw.startStreamDataMemToFifo(I+47,  69, 1);
    streamHw.startStreamDataMemToFifo(I+50,  79, 1);
    streamHw.startStreamDataMemToFifo(I+51,  81, 1);
    streamHw.startStreamDataMemToFifo(I+58,  95, 1);
    streamHw.startStreamDataMemToFifo(I+59,  97, 1);
    streamHw.startStreamDataMemToFifo(I+62, 103, 1);
    streamHw.startStreamDataMemToFifo(I+63, 105, 1);
    streamHw.startStreamDataMemToFifo(I+66, 124, 1);
    streamHw.startStreamDataMemToFifo(I+67, 125, 1);
    streamHw.startStreamDataMemToFifo(I+74, 166, 1);
    streamHw.startStreamDataMemToFifo(I+75, 167, 1);
    streamHw.startStreamDataMemToFifo(I+78, 168, 1);
    streamHw.startStreamDataMemToFifo(I+79, 169, 1);
    streamHw.startStreamDataMemToFifo(I+82, 170, 1);
    streamHw.startStreamDataMemToFifo(I+83, 171, 1);
    streamHw.startStreamDataMemToFifo(I+90, 172, 1);
    streamHw.startStreamDataMemToFifo(I+91, 173, 1);

    streamHw.startStreamDataFifoToMem(3,      IE, 1);
    streamHw.startStreamDataFifoToMem(23,   IE+1, 1);
    streamHw.startStreamDataFifoToMem(31,   IE+2, 1);
    streamHw.startStreamDataFifoToMem(37,   IE+3, 1);
    streamHw.startStreamDataFifoToMem(45,   IE+4, 1);
    streamHw.startStreamDataFifoToMem(53,   IE+5, 1);
    streamHw.startStreamDataFifoToMem(61,   IE+6, 1);
    streamHw.startStreamDataFifoToMem(69,   IE+7, 1);
    streamHw.startStreamDataFifoToMem(81,   IE+8, 1);
    streamHw.startStreamDataFifoToMem(97,   IE+9, 1);
    streamHw.startStreamDataFifoToMem(105, IE+10, 1);
    streamHw.startStreamDataFifoToMem(125, IE+11, 1);
    streamHw.startStreamDataFifoToMem(167, IE+12, 1);
    streamHw.startStreamDataFifoToMem(169, IE+13, 1);
    streamHw.startStreamDataFifoToMem(171, IE+14, 1);
    streamHw.startStreamDataFifoToMem(173, IE+15, 1);
    streamHw.runPipeline();
    
    // Second pipeline Subs - X[I]: 2 Terms
    streamHw.startStreamDataMemToFifo(I+3,    9, 1);
    streamHw.startStreamDataMemToFifo(I+2,   11, 1);
    streamHw.startStreamDataMemToFifo(I+11,  31, 1);
    streamHw.startStreamDataMemToFifo(I+10,  29, 1);
    streamHw.startStreamDataMemToFifo(I+15, 185, 1);
    streamHw.startStreamDataMemToFifo(I+14, 184, 1);
    streamHw.startStreamDataMemToFifo(I+19,  57, 1);
    streamHw.startStreamDataMemToFifo(I+18,  65, 1);
    streamHw.startStreamDataMemToFifo(I+27,  75, 1);
    streamHw.startStreamDataMemToFifo(I+26,  77, 1);
    streamHw.startStreamDataMemToFifo(I+35,  87, 1);
    streamHw.startStreamDataMemToFifo(I+34,  89, 1);
    streamHw.startStreamDataMemToFifo(I+43,  91, 1);
    streamHw.startStreamDataMemToFifo(I+42,  93, 1);
    streamHw.startStreamDataMemToFifo(I+47,  97, 1);
    streamHw.startStreamDataMemToFifo(I+46, 101, 1);
    streamHw.startStreamDataMemToFifo(I+51, 105, 1);
    streamHw.startStreamDataMemToFifo(I+50, 109, 1);
    streamHw.startStreamDataMemToFifo(I+59, 127, 1);
    streamHw.startStreamDataMemToFifo(I+58, 126, 1);
    streamHw.startStreamDataMemToFifo(I+63, 129, 1);
    streamHw.startStreamDataMemToFifo(I+62, 128, 1);
    streamHw.startStreamDataMemToFifo(I+67, 175, 1);
    streamHw.startStreamDataMemToFifo(I+66, 174, 1);
    streamHw.startStreamDataMemToFifo(I+75, 177, 1);
    streamHw.startStreamDataMemToFifo(I+74, 176, 1);
    streamHw.startStreamDataMemToFifo(I+79, 179, 1);
    streamHw.startStreamDataMemToFifo(I+78, 178, 1);
    streamHw.startStreamDataMemToFifo(I+83, 181, 1);
    streamHw.startStreamDataMemToFifo(I+82, 180, 1);
    streamHw.startStreamDataMemToFifo(I+91, 183, 1);
    streamHw.startStreamDataMemToFifo(I+90, 182, 1);

    streamHw.startStreamDataFifoToMem(11,   I+3, 1);
    streamHw.startStreamDataFifoToMem(31,  I+11, 1);
    streamHw.startStreamDataFifoToMem(185, I+15, 1);
    streamHw.startStreamDataFifoToMem(65,  I+19, 1);
    streamHw.startStreamDataFifoToMem(77,  I+27, 1);
    streamHw.startStreamDataFifoToMem(89,  I+35, 1);
    streamHw.startStreamDataFifoToMem(93,  I+43, 1);
    streamHw.startStreamDataFifoToMem(101, I+47, 1);
    streamHw.startStreamDataFifoToMem(109, I+51, 1);
    streamHw.startStreamDataFifoToMem(127, I+59, 1);
    streamHw.startStreamDataFifoToMem(129, I+63, 1);
    streamHw.startStreamDataFifoToMem(175, I+67, 1);
    streamHw.startStreamDataFifoToMem(177, I+75, 1);
    streamHw.startStreamDataFifoToMem(179, I+79, 1);
    streamHw.startStreamDataFifoToMem(181, I+83, 1);
    streamHw.startStreamDataFifoToMem(183, I+91, 1);
    streamHw.runPipeline();
    
    // Third pipeline Subs - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(I,       9, 1);
    streamHw.startStreamDataMemToFifo(IE,     11, 1);
    streamHw.startStreamDataMemToFifo(I+8,    31, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
    streamHw.startStreamDataMemToFifo(I+12,  185, 1);
    streamHw.startStreamDataMemToFifo(IE+2,  184, 1);
    streamHw.startStreamDataMemToFifo(I+16,   57, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
    streamHw.startStreamDataMemToFifo(I+24,   75, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   77, 1);
    streamHw.startStreamDataMemToFifo(I+32,   87, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   89, 1);
    streamHw.startStreamDataMemToFifo(I+40,   91, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   93, 1);
    streamHw.startStreamDataMemToFifo(I+44,   97, 1);
    streamHw.startStreamDataMemToFifo(IE+7,  101, 1);
    streamHw.startStreamDataMemToFifo(I+48,  105, 1);
    streamHw.startStreamDataMemToFifo(IE+8,  109, 1);
    streamHw.startStreamDataMemToFifo(I+56,  127, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  126, 1);
    streamHw.startStreamDataMemToFifo(I+60,  129, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 128, 1);
    streamHw.startStreamDataMemToFifo(I+64,  175, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
    streamHw.startStreamDataMemToFifo(I+72,  177, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 176, 1);
    streamHw.startStreamDataMemToFifo(I+76,  179, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
    streamHw.startStreamDataMemToFifo(I+80,  181, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 180, 1);
    streamHw.startStreamDataMemToFifo(I+88,  183, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 182, 1);

    streamHw.startStreamDataFifoToMem(11,   I+2, 1);
    streamHw.startStreamDataFifoToMem(31,  I+10, 1);
    streamHw.startStreamDataFifoToMem(185, I+14, 1);
    streamHw.startStreamDataFifoToMem(65,  I+18, 1);
    streamHw.startStreamDataFifoToMem(77,  I+26, 1);
    streamHw.startStreamDataFifoToMem(89,  I+34, 1);
    streamHw.startStreamDataFifoToMem(93,  I+42, 1);
    streamHw.startStreamDataFifoToMem(101, I+46, 1);
    streamHw.startStreamDataFifoToMem(109, I+50, 1);
    streamHw.startStreamDataFifoToMem(127, I+58, 1);
    streamHw.startStreamDataFifoToMem(129, I+62, 1);
    streamHw.startStreamDataFifoToMem(175, I+66, 1);
    streamHw.startStreamDataFifoToMem(177, I+74, 1);
    streamHw.startStreamDataFifoToMem(179, I+78, 1);
    streamHw.startStreamDataFifoToMem(181, I+82, 1);
    streamHw.startStreamDataFifoToMem(183, I+90, 1);
    streamHw.runPipeline();
    
    // Fourth pipeline Adds - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(I,       1, 1);
    streamHw.startStreamDataMemToFifo(IE,      3, 1);
    streamHw.startStreamDataMemToFifo(I+8,    21, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   23, 1);
    streamHw.startStreamDataMemToFifo(I+12,   25, 1);
    streamHw.startStreamDataMemToFifo(IE+2,   31, 1);
    streamHw.startStreamDataMemToFifo(I+16,   35, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   37, 1);
    streamHw.startStreamDataMemToFifo(I+24,   43, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   45, 1);
    streamHw.startStreamDataMemToFifo(I+32,   51, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   53, 1);
    streamHw.startStreamDataMemToFifo(I+40,   59, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   61, 1);
    streamHw.startStreamDataMemToFifo(I+44,   67, 1);
    streamHw.startStreamDataMemToFifo(IE+7,   69, 1);
    streamHw.startStreamDataMemToFifo(I+48,   79, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   81, 1);
    streamHw.startStreamDataMemToFifo(I+56,   95, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   97, 1);
    streamHw.startStreamDataMemToFifo(I+60,  103, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 105, 1);
    streamHw.startStreamDataMemToFifo(I+64,  124, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 125, 1);
    streamHw.startStreamDataMemToFifo(I+72,  166, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 167, 1);
    streamHw.startStreamDataMemToFifo(I+76,  168, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 169, 1);
    streamHw.startStreamDataMemToFifo(I+80,  170, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 171, 1);
    streamHw.startStreamDataMemToFifo(I+88,  172, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 173, 1);

    streamHw.startStreamDataFifoToMem(3,      I, 1);
    streamHw.startStreamDataFifoToMem(23,   I+8, 1);
    streamHw.startStreamDataFifoToMem(31,  I+12, 1);
    streamHw.startStreamDataFifoToMem(37,  I+16, 1);
    streamHw.startStreamDataFifoToMem(45,  I+24, 1);
    streamHw.startStreamDataFifoToMem(53,  I+32, 1);
    streamHw.startStreamDataFifoToMem(61,  I+40, 1);
    streamHw.startStreamDataFifoToMem(69,  I+44, 1);
    streamHw.startStreamDataFifoToMem(81,  I+48, 1);
    streamHw.startStreamDataFifoToMem(97,  I+56, 1);
    streamHw.startStreamDataFifoToMem(105, I+60, 1);
    streamHw.startStreamDataFifoToMem(125, I+64, 1);
    streamHw.startStreamDataFifoToMem(167, I+72, 1);
    streamHw.startStreamDataFifoToMem(169, I+76, 1);
    streamHw.startStreamDataFifoToMem(171, I+80, 1);
    streamHw.startStreamDataFifoToMem(173, I+88, 1);
    streamHw.runPipeline();
  }

  for (size_t I = 96; I < WINDOW_SIZE; I+=512)
  {
    // First pipeline Adds - TX
    streamHw.startStreamDataMemToFifo(I+2,     1, 1);
    streamHw.startStreamDataMemToFifo(I+3,     3, 1);
    streamHw.startStreamDataMemToFifo(I+10,   21, 1);
    streamHw.startStreamDataMemToFifo(I+11,   23, 1);
    streamHw.startStreamDataMemToFifo(I+14,   25, 1);
    streamHw.startStreamDataMemToFifo(I+15,   31, 1);
    streamHw.startStreamDataMemToFifo(I+18,   35, 1);
    streamHw.startStreamDataMemToFifo(I+19,   37, 1);
    streamHw.startStreamDataMemToFifo(I+26,   43, 1);
    streamHw.startStreamDataMemToFifo(I+27,   45, 1);
    streamHw.startStreamDataMemToFifo(I+130,  51, 1);
    streamHw.startStreamDataMemToFifo(I+131,  53, 1);
    streamHw.startStreamDataMemToFifo(I+138,  59, 1);
    streamHw.startStreamDataMemToFifo(I+139,  61, 1);
    streamHw.startStreamDataMemToFifo(I+142,  67, 1);
    streamHw.startStreamDataMemToFifo(I+143,  69, 1);
    streamHw.startStreamDataMemToFifo(I+146,  79, 1);
    streamHw.startStreamDataMemToFifo(I+147,  81, 1);
    streamHw.startStreamDataMemToFifo(I+154,  95, 1);
    streamHw.startStreamDataMemToFifo(I+155,  97, 1);
    streamHw.startStreamDataMemToFifo(I+258, 103, 1);
    streamHw.startStreamDataMemToFifo(I+259, 105, 1);
    streamHw.startStreamDataMemToFifo(I+266, 124, 1);
    streamHw.startStreamDataMemToFifo(I+267, 125, 1);
    streamHw.startStreamDataMemToFifo(I+270, 166, 1);
    streamHw.startStreamDataMemToFifo(I+271, 167, 1);
    streamHw.startStreamDataMemToFifo(I+274, 168, 1);
    streamHw.startStreamDataMemToFifo(I+275, 169, 1);
    streamHw.startStreamDataMemToFifo(I+282, 170, 1);
    streamHw.startStreamDataMemToFifo(I+283, 171, 1);
    streamHw.startStreamDataMemToFifo(I+386, 172, 1);
    streamHw.startStreamDataMemToFifo(I+387, 173, 1);

    streamHw.startStreamDataFifoToMem(3,      IE, 1);
    streamHw.startStreamDataFifoToMem(23,   IE+1, 1);
    streamHw.startStreamDataFifoToMem(31,   IE+2, 1);
    streamHw.startStreamDataFifoToMem(37,   IE+3, 1);
    streamHw.startStreamDataFifoToMem(45,   IE+4, 1);
    streamHw.startStreamDataFifoToMem(53,   IE+5, 1);
    streamHw.startStreamDataFifoToMem(61,   IE+6, 1);
    streamHw.startStreamDataFifoToMem(69,   IE+7, 1);
    streamHw.startStreamDataFifoToMem(81,   IE+8, 1);
    streamHw.startStreamDataFifoToMem(97,   IE+9, 1);
    streamHw.startStreamDataFifoToMem(105, IE+10, 1);
    streamHw.startStreamDataFifoToMem(125, IE+11, 1);
    streamHw.startStreamDataFifoToMem(167, IE+12, 1);
    streamHw.startStreamDataFifoToMem(169, IE+13, 1);
    streamHw.startStreamDataFifoToMem(171, IE+14, 1);
    streamHw.startStreamDataFifoToMem(173, IE+15, 1);
    streamHw.runPipeline();
    
    // Second pipeline Subs - X[I]: 2 Terms
    streamHw.startStreamDataMemToFifo(I+3,     9, 1);
    streamHw.startStreamDataMemToFifo(I+2,    11, 1);
    streamHw.startStreamDataMemToFifo(I+11,   31, 1);
    streamHw.startStreamDataMemToFifo(I+10,   29, 1);
    streamHw.startStreamDataMemToFifo(I+15,  185, 1);
    streamHw.startStreamDataMemToFifo(I+14,  184, 1);
    streamHw.startStreamDataMemToFifo(I+19,   57, 1);
    streamHw.startStreamDataMemToFifo(I+18,   65, 1);
    streamHw.startStreamDataMemToFifo(I+27,   75, 1);
    streamHw.startStreamDataMemToFifo(I+26,   77, 1);
    streamHw.startStreamDataMemToFifo(I+131,  87, 1);
    streamHw.startStreamDataMemToFifo(I+130,  89, 1);
    streamHw.startStreamDataMemToFifo(I+139,  91, 1);
    streamHw.startStreamDataMemToFifo(I+138,  93, 1);
    streamHw.startStreamDataMemToFifo(I+143,  97, 1);
    streamHw.startStreamDataMemToFifo(I+142, 101, 1);
    streamHw.startStreamDataMemToFifo(I+147, 105, 1);
    streamHw.startStreamDataMemToFifo(I+146, 109, 1);
    streamHw.startStreamDataMemToFifo(I+155, 127, 1);
    streamHw.startStreamDataMemToFifo(I+154, 126, 1);
    streamHw.startStreamDataMemToFifo(I+259, 129, 1);
    streamHw.startStreamDataMemToFifo(I+258, 128, 1);
    streamHw.startStreamDataMemToFifo(I+267, 175, 1);
    streamHw.startStreamDataMemToFifo(I+266, 174, 1);
    streamHw.startStreamDataMemToFifo(I+271, 177, 1);
    streamHw.startStreamDataMemToFifo(I+270, 176, 1);
    streamHw.startStreamDataMemToFifo(I+275, 179, 1);
    streamHw.startStreamDataMemToFifo(I+274, 178, 1);
    streamHw.startStreamDataMemToFifo(I+283, 181, 1);
    streamHw.startStreamDataMemToFifo(I+282, 180, 1);
    streamHw.startStreamDataMemToFifo(I+387, 183, 1);
    streamHw.startStreamDataMemToFifo(I+386, 182, 1);

    streamHw.startStreamDataFifoToMem(11,    I+3, 1);
    streamHw.startStreamDataFifoToMem(31,   I+11, 1);
    streamHw.startStreamDataFifoToMem(185,  I+15, 1);
    streamHw.startStreamDataFifoToMem(65,   I+19, 1);
    streamHw.startStreamDataFifoToMem(77,   I+27, 1);
    streamHw.startStreamDataFifoToMem(89,  I+131, 1);
    streamHw.startStreamDataFifoToMem(93,  I+139, 1);
    streamHw.startStreamDataFifoToMem(101, I+143, 1);
    streamHw.startStreamDataFifoToMem(109, I+147, 1);
    streamHw.startStreamDataFifoToMem(127, I+155, 1);
    streamHw.startStreamDataFifoToMem(129, I+259, 1);
    streamHw.startStreamDataFifoToMem(175, I+267, 1);
    streamHw.startStreamDataFifoToMem(177, I+271, 1);
    streamHw.startStreamDataFifoToMem(179, I+275, 1);
    streamHw.startStreamDataFifoToMem(181, I+283, 1);
    streamHw.startStreamDataFifoToMem(183, I+387, 1);
    streamHw.runPipeline();
    
    // Third pipeline Subs - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(I,       9, 1);
    streamHw.startStreamDataMemToFifo(IE,     11, 1);
    streamHw.startStreamDataMemToFifo(I+8,    31, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
    streamHw.startStreamDataMemToFifo(I+12,  185, 1);
    streamHw.startStreamDataMemToFifo(IE+2,  184, 1);
    streamHw.startStreamDataMemToFifo(I+16,   57, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
    streamHw.startStreamDataMemToFifo(I+24,   75, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   77, 1);
    streamHw.startStreamDataMemToFifo(I+128,  87, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   89, 1);
    streamHw.startStreamDataMemToFifo(I+136,  91, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   93, 1);
    streamHw.startStreamDataMemToFifo(I+140,  97, 1);
    streamHw.startStreamDataMemToFifo(IE+7,  101, 1);
    streamHw.startStreamDataMemToFifo(I+144, 105, 1);
    streamHw.startStreamDataMemToFifo(IE+8,  109, 1);
    streamHw.startStreamDataMemToFifo(I+152, 127, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  126, 1);
    streamHw.startStreamDataMemToFifo(I+256, 129, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 128, 1);
    streamHw.startStreamDataMemToFifo(I+264, 175, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
    streamHw.startStreamDataMemToFifo(I+268, 177, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 176, 1);
    streamHw.startStreamDataMemToFifo(I+272, 179, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
    streamHw.startStreamDataMemToFifo(I+280, 181, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 180, 1);
    streamHw.startStreamDataMemToFifo(I+384, 183, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 182, 1);

    streamHw.startStreamDataFifoToMem(11,    I+2, 1);
    streamHw.startStreamDataFifoToMem(31,   I+10, 1);
    streamHw.startStreamDataFifoToMem(185,  I+14, 1);
    streamHw.startStreamDataFifoToMem(65,   I+18, 1);
    streamHw.startStreamDataFifoToMem(77,   I+26, 1);
    streamHw.startStreamDataFifoToMem(89,  I+130, 1);
    streamHw.startStreamDataFifoToMem(93,  I+138, 1);
    streamHw.startStreamDataFifoToMem(101, I+142, 1);
    streamHw.startStreamDataFifoToMem(109, I+146, 1);
    streamHw.startStreamDataFifoToMem(127, I+154, 1);
    streamHw.startStreamDataFifoToMem(129, I+258, 1);
    streamHw.startStreamDataFifoToMem(175, I+266, 1);
    streamHw.startStreamDataFifoToMem(177, I+270, 1);
    streamHw.startStreamDataFifoToMem(179, I+274, 1);
    streamHw.startStreamDataFifoToMem(181, I+282, 1);
    streamHw.startStreamDataFifoToMem(183, I+386, 1);
    streamHw.runPipeline();
    
    // Fourth pipeline Adds - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(I,       1, 1);
    streamHw.startStreamDataMemToFifo(IE,      3, 1);
    streamHw.startStreamDataMemToFifo(I+8,    21, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   23, 1);
    streamHw.startStreamDataMemToFifo(I+12,   25, 1);
    streamHw.startStreamDataMemToFifo(IE+2,   31, 1);
    streamHw.startStreamDataMemToFifo(I+16,   35, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   37, 1);
    streamHw.startStreamDataMemToFifo(I+24,   43, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   45, 1);
    streamHw.startStreamDataMemToFifo(I+128,  51, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   53, 1);
    streamHw.startStreamDataMemToFifo(I+136,  59, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   61, 1);
    streamHw.startStreamDataMemToFifo(I+140,  67, 1);
    streamHw.startStreamDataMemToFifo(IE+7,   69, 1);
    streamHw.startStreamDataMemToFifo(I+144,  79, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   81, 1);
    streamHw.startStreamDataMemToFifo(I+152,  95, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   97, 1);
    streamHw.startStreamDataMemToFifo(I+256, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 105, 1);
    streamHw.startStreamDataMemToFifo(I+264, 124, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 125, 1);
    streamHw.startStreamDataMemToFifo(I+268, 166, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 167, 1);
    streamHw.startStreamDataMemToFifo(I+272, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 169, 1);
    streamHw.startStreamDataMemToFifo(I+280, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 171, 1);
    streamHw.startStreamDataMemToFifo(I+384, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 173, 1);

    streamHw.startStreamDataFifoToMem(3,       I, 1);
    streamHw.startStreamDataFifoToMem(23,    I+8, 1);
    streamHw.startStreamDataFifoToMem(31,   I+12, 1);
    streamHw.startStreamDataFifoToMem(37,   I+16, 1);
    streamHw.startStreamDataFifoToMem(45,   I+24, 1);
    streamHw.startStreamDataFifoToMem(53,  I+128, 1);
    streamHw.startStreamDataFifoToMem(61,  I+136, 1);
    streamHw.startStreamDataFifoToMem(69,  I+140, 1);
    streamHw.startStreamDataFifoToMem(81,  I+144, 1);
    streamHw.startStreamDataFifoToMem(97,  I+152, 1);
    streamHw.startStreamDataFifoToMem(105, I+256, 1);
    streamHw.startStreamDataFifoToMem(125, I+264, 1);
    streamHw.startStreamDataFifoToMem(167, I+268, 1);
    streamHw.startStreamDataFifoToMem(169, I+272, 1);
    streamHw.startStreamDataFifoToMem(171, I+280, 1);
    streamHw.startStreamDataFifoToMem(173, I+384, 1);
    streamHw.runPipeline();
  }

  // First pipeline Adds - TX
  streamHw.startStreamDataMemToFifo(254,    1, 1);
  streamHw.startStreamDataMemToFifo(255,    3, 1);
  streamHw.startStreamDataMemToFifo(490,   21, 1);
  streamHw.startStreamDataMemToFifo(491,   23, 1);
  streamHw.startStreamDataMemToFifo(494,   25, 1);
  streamHw.startStreamDataMemToFifo(495,   31, 1);
  streamHw.startStreamDataMemToFifo(498,   35, 1);
  streamHw.startStreamDataMemToFifo(499,   37, 1);
  streamHw.startStreamDataMemToFifo(506,   43, 1);
  streamHw.startStreamDataMemToFifo(507,   45, 1);
  streamHw.startStreamDataMemToFifo(766,   51, 1);
  streamHw.startStreamDataMemToFifo(767,   53, 1);
  streamHw.startStreamDataMemToFifo(1002,  59, 1);
  streamHw.startStreamDataMemToFifo(1003,  61, 1);
  streamHw.startStreamDataMemToFifo(1006,  67, 1);
  streamHw.startStreamDataMemToFifo(1007,  69, 1);
  streamHw.startStreamDataMemToFifo(1010,  79, 1);
  streamHw.startStreamDataMemToFifo(1011,  81, 1);
  streamHw.startStreamDataMemToFifo(1018,  95, 1);
  streamHw.startStreamDataMemToFifo(1019,  97, 1);
  streamHw.startStreamDataMemToFifo(1022, 103, 1);
  streamHw.startStreamDataMemToFifo(1023, 105, 1);

  streamHw.startStreamDataFifoToMem(3,      IE, 1);
  streamHw.startStreamDataFifoToMem(23,   IE+1, 1);
  streamHw.startStreamDataFifoToMem(31,   IE+2, 1);
  streamHw.startStreamDataFifoToMem(37,   IE+3, 1);
  streamHw.startStreamDataFifoToMem(45,   IE+4, 1);
  streamHw.startStreamDataFifoToMem(53,   IE+5, 1);
  streamHw.startStreamDataFifoToMem(61,   IE+6, 1);
  streamHw.startStreamDataFifoToMem(69,   IE+7, 1);
  streamHw.startStreamDataFifoToMem(81,   IE+8, 1);
  streamHw.startStreamDataFifoToMem(97,   IE+9, 1);
  streamHw.startStreamDataFifoToMem(105, IE+10, 1);
  streamHw.runPipeline();
    
  // Second pipeline Subs - X[I]: 2 Terms
  streamHw.startStreamDataMemToFifo(255,    9, 1);
  streamHw.startStreamDataMemToFifo(254,   11, 1);
  streamHw.startStreamDataMemToFifo(491,   31, 1);
  streamHw.startStreamDataMemToFifo(490,   29, 1);
  streamHw.startStreamDataMemToFifo(495,  185, 1);
  streamHw.startStreamDataMemToFifo(494,  184, 1);
  streamHw.startStreamDataMemToFifo(499,   57, 1);
  streamHw.startStreamDataMemToFifo(498,   65, 1);
  streamHw.startStreamDataMemToFifo(507,   75, 1);
  streamHw.startStreamDataMemToFifo(506,   77, 1);
  streamHw.startStreamDataMemToFifo(767,   87, 1);
  streamHw.startStreamDataMemToFifo(766,   89, 1);
  streamHw.startStreamDataMemToFifo(1003,  91, 1);
  streamHw.startStreamDataMemToFifo(1002,  93, 1);
  streamHw.startStreamDataMemToFifo(1007,  97, 1);
  streamHw.startStreamDataMemToFifo(1006, 101, 1);
  streamHw.startStreamDataMemToFifo(1011, 105, 1);
  streamHw.startStreamDataMemToFifo(1010, 109, 1);
  streamHw.startStreamDataMemToFifo(1019, 127, 1);
  streamHw.startStreamDataMemToFifo(1018, 126, 1);
  streamHw.startStreamDataMemToFifo(1023, 129, 1);
  streamHw.startStreamDataMemToFifo(1022, 128, 1);

  streamHw.startStreamDataFifoToMem(11,   255, 1);
  streamHw.startStreamDataFifoToMem(31,   491, 1);
  streamHw.startStreamDataFifoToMem(185,  495, 1);
  streamHw.startStreamDataFifoToMem(65,   499, 1);
  streamHw.startStreamDataFifoToMem(77,   507, 1);
  streamHw.startStreamDataFifoToMem(89,   767, 1);
  streamHw.startStreamDataFifoToMem(93,  1003, 1);
  streamHw.startStreamDataFifoToMem(101, 1007, 1);
  streamHw.startStreamDataFifoToMem(109, 1011, 1);
  streamHw.startStreamDataFifoToMem(127, 1019, 1);
  streamHw.startStreamDataFifoToMem(129, 1023, 1);
  streamHw.runPipeline();
    
  // Third pipeline Subs - X[I]: 3 Terms
  streamHw.startStreamDataMemToFifo(252,     9, 1);
  streamHw.startStreamDataMemToFifo(IE,     11, 1);
  streamHw.startStreamDataMemToFifo(488,    31, 1);
  streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
  streamHw.startStreamDataMemToFifo(492,   185, 1);
  streamHw.startStreamDataMemToFifo(IE+2,  184, 1);
  streamHw.startStreamDataMemToFifo(496,    57, 1);
  streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
  streamHw.startStreamDataMemToFifo(504,    75, 1);
  streamHw.startStreamDataMemToFifo(IE+4,   77, 1);
  streamHw.startStreamDataMemToFifo(764,    87, 1);
  streamHw.startStreamDataMemToFifo(IE+5,   89, 1);
  streamHw.startStreamDataMemToFifo(1000,   91, 1);
  streamHw.startStreamDataMemToFifo(IE+6,   93, 1);
  streamHw.startStreamDataMemToFifo(1004,   97, 1);
  streamHw.startStreamDataMemToFifo(IE+7,  101, 1);
  streamHw.startStreamDataMemToFifo(1008,  105, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  109, 1);
  streamHw.startStreamDataMemToFifo(1016,  127, 1);
  streamHw.startStreamDataMemToFifo(IE+9,  126, 1);
  streamHw.startStreamDataMemToFifo(1020,  129, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 128, 1);

  streamHw.startStreamDataFifoToMem(11,   254, 1);
  streamHw.startStreamDataFifoToMem(31,   490, 1);
  streamHw.startStreamDataFifoToMem(185,  494, 1);
  streamHw.startStreamDataFifoToMem(65,   498, 1);
  streamHw.startStreamDataFifoToMem(77,   506, 1);
  streamHw.startStreamDataFifoToMem(89,   766, 1);
  streamHw.startStreamDataFifoToMem(93,  1002, 1);
  streamHw.startStreamDataFifoToMem(101, 1006, 1);
  streamHw.startStreamDataFifoToMem(109, 1010, 1);
  streamHw.startStreamDataFifoToMem(127, 1018, 1);
  streamHw.startStreamDataFifoToMem(129, 1022, 1);
  streamHw.runPipeline();
    
  // Fourth pipeline Adds - X[I]: 3 Terms
  streamHw.startStreamDataMemToFifo(252,     1, 1);
  streamHw.startStreamDataMemToFifo(IE,      3, 1);
  streamHw.startStreamDataMemToFifo(488,    21, 1);
  streamHw.startStreamDataMemToFifo(IE+1,   23, 1);
  streamHw.startStreamDataMemToFifo(492,    25, 1);
  streamHw.startStreamDataMemToFifo(IE+2,   31, 1);
  streamHw.startStreamDataMemToFifo(496,    35, 1);
  streamHw.startStreamDataMemToFifo(IE+3,   37, 1);
  streamHw.startStreamDataMemToFifo(504,    43, 1);
  streamHw.startStreamDataMemToFifo(IE+4,   45, 1);
  streamHw.startStreamDataMemToFifo(764,    51, 1);
  streamHw.startStreamDataMemToFifo(IE+5,   53, 1);
  streamHw.startStreamDataMemToFifo(1000,   59, 1);
  streamHw.startStreamDataMemToFifo(IE+6,   61, 1);
  streamHw.startStreamDataMemToFifo(1004,   67, 1);
  streamHw.startStreamDataMemToFifo(IE+7,   69, 1);
  streamHw.startStreamDataMemToFifo(1008,   79, 1);
  streamHw.startStreamDataMemToFifo(IE+8,   81, 1);
  streamHw.startStreamDataMemToFifo(1016,   95, 1);
  streamHw.startStreamDataMemToFifo(IE+9,   97, 1);
  streamHw.startStreamDataMemToFifo(1020,  103, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 105, 1);

  streamHw.startStreamDataFifoToMem(3,    252, 1);
  streamHw.startStreamDataFifoToMem(23,   488, 1);
  streamHw.startStreamDataFifoToMem(31,   492, 1);
  streamHw.startStreamDataFifoToMem(37,   496, 1);
  streamHw.startStreamDataFifoToMem(45,   504, 1);
  streamHw.startStreamDataFifoToMem(53,   764, 1);
  streamHw.startStreamDataFifoToMem(61,  1000, 1);
  streamHw.startStreamDataFifoToMem(69,  1004, 1);
  streamHw.startStreamDataFifoToMem(81,  1008, 1);
  streamHw.startStreamDataFifoToMem(97,  1016, 1);
  streamHw.startStreamDataFifoToMem(105, 1020, 1);
  streamHw.runPipeline();
}

void fft_3_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int IE = 1152;
  for (size_t I = 0; I < WINDOW_SIZE; I+=256)
  {
    // First pipeline Adds - TX
    streamHw.startStreamDataMemToFifo(I+4,     1, 1);
    streamHw.startStreamDataMemToFifo(I+6,     3, 1);
    streamHw.startStreamDataMemToFifo(I+20,   21, 1);
    streamHw.startStreamDataMemToFifo(I+22,   23, 1);
    streamHw.startStreamDataMemToFifo(I+28,   25, 1);
    streamHw.startStreamDataMemToFifo(I+30,   31, 1);
    streamHw.startStreamDataMemToFifo(I+36,   35, 1);
    streamHw.startStreamDataMemToFifo(I+38,   37, 1);
    streamHw.startStreamDataMemToFifo(I+52,   43, 1);
    streamHw.startStreamDataMemToFifo(I+54,   45, 1);
    streamHw.startStreamDataMemToFifo(I+68,   51, 1);
    streamHw.startStreamDataMemToFifo(I+70,   53, 1);
    streamHw.startStreamDataMemToFifo(I+84,   59, 1);
    streamHw.startStreamDataMemToFifo(I+86,   61, 1);
    streamHw.startStreamDataMemToFifo(I+92,   67, 1);
    streamHw.startStreamDataMemToFifo(I+94,   69, 1);
    streamHw.startStreamDataMemToFifo(I+100,  79, 1);
    streamHw.startStreamDataMemToFifo(I+102,  81, 1);
    streamHw.startStreamDataMemToFifo(I+116,  95, 1);
    streamHw.startStreamDataMemToFifo(I+118,  97, 1);
    streamHw.startStreamDataMemToFifo(I+124, 103, 1);
    streamHw.startStreamDataMemToFifo(I+126, 105, 1);
    streamHw.startStreamDataMemToFifo(I+132, 124, 1);
    streamHw.startStreamDataMemToFifo(I+134, 125, 1);
    streamHw.startStreamDataMemToFifo(I+148, 166, 1);
    streamHw.startStreamDataMemToFifo(I+150, 167, 1);
    streamHw.startStreamDataMemToFifo(I+156, 168, 1);
    streamHw.startStreamDataMemToFifo(I+158, 169, 1);
    streamHw.startStreamDataMemToFifo(I+164, 170, 1);
    streamHw.startStreamDataMemToFifo(I+166, 171, 1);
    streamHw.startStreamDataMemToFifo(I+180, 172, 1);
    streamHw.startStreamDataMemToFifo(I+182, 173, 1);

    streamHw.startStreamDataFifoToMem(3,      IE, 1);
    streamHw.startStreamDataFifoToMem(23,   IE+1, 1);
    streamHw.startStreamDataFifoToMem(31,   IE+2, 1);
    streamHw.startStreamDataFifoToMem(37,   IE+3, 1);
    streamHw.startStreamDataFifoToMem(45,   IE+4, 1);
    streamHw.startStreamDataFifoToMem(53,   IE+5, 1);
    streamHw.startStreamDataFifoToMem(61,   IE+6, 1);
    streamHw.startStreamDataFifoToMem(69,   IE+7, 1);
    streamHw.startStreamDataFifoToMem(81,   IE+8, 1);
    streamHw.startStreamDataFifoToMem(97,   IE+9, 1);
    streamHw.startStreamDataFifoToMem(105, IE+10, 1);
    streamHw.startStreamDataFifoToMem(125, IE+11, 1);
    streamHw.startStreamDataFifoToMem(167, IE+12, 1);
    streamHw.startStreamDataFifoToMem(169, IE+13, 1);
    streamHw.startStreamDataFifoToMem(171, IE+14, 1);
    streamHw.startStreamDataFifoToMem(173, IE+15, 1);
    streamHw.runPipeline();
    
    // Second pipeline Subs - X[I]: 2 Terms
    streamHw.startStreamDataMemToFifo(I+6,     9, 1);
    streamHw.startStreamDataMemToFifo(I+4,    11, 1);
    streamHw.startStreamDataMemToFifo(I+22,   31, 1);
    streamHw.startStreamDataMemToFifo(I+20,   29, 1);
    streamHw.startStreamDataMemToFifo(I+30,  185, 1);
    streamHw.startStreamDataMemToFifo(I+28,  184, 1);
    streamHw.startStreamDataMemToFifo(I+38,   57, 1);
    streamHw.startStreamDataMemToFifo(I+36,   65, 1);
    streamHw.startStreamDataMemToFifo(I+54,   75, 1);
    streamHw.startStreamDataMemToFifo(I+52,   77, 1);
    streamHw.startStreamDataMemToFifo(I+70,   87, 1);
    streamHw.startStreamDataMemToFifo(I+68,   89, 1);
    streamHw.startStreamDataMemToFifo(I+86,   91, 1);
    streamHw.startStreamDataMemToFifo(I+84,   93, 1);
    streamHw.startStreamDataMemToFifo(I+94,   97, 1);
    streamHw.startStreamDataMemToFifo(I+92,  101, 1);
    streamHw.startStreamDataMemToFifo(I+102, 105, 1);
    streamHw.startStreamDataMemToFifo(I+100, 109, 1);
    streamHw.startStreamDataMemToFifo(I+118, 127, 1);
    streamHw.startStreamDataMemToFifo(I+116, 126, 1);
    streamHw.startStreamDataMemToFifo(I+126, 129, 1);
    streamHw.startStreamDataMemToFifo(I+124, 128, 1);
    streamHw.startStreamDataMemToFifo(I+134, 175, 1);
    streamHw.startStreamDataMemToFifo(I+132, 174, 1);
    streamHw.startStreamDataMemToFifo(I+150, 177, 1);
    streamHw.startStreamDataMemToFifo(I+148, 176, 1);
    streamHw.startStreamDataMemToFifo(I+158, 179, 1);
    streamHw.startStreamDataMemToFifo(I+156, 178, 1);
    streamHw.startStreamDataMemToFifo(I+166, 181, 1);
    streamHw.startStreamDataMemToFifo(I+164, 180, 1);
    streamHw.startStreamDataMemToFifo(I+182, 183, 1);
    streamHw.startStreamDataMemToFifo(I+180, 182, 1);

    streamHw.startStreamDataFifoToMem(11,    I+6, 1);
    streamHw.startStreamDataFifoToMem(31,   I+22, 1);
    streamHw.startStreamDataFifoToMem(185,  I+30, 1);
    streamHw.startStreamDataFifoToMem(65,   I+38, 1);
    streamHw.startStreamDataFifoToMem(77,   I+54, 1);
    streamHw.startStreamDataFifoToMem(89,   I+70, 1);
    streamHw.startStreamDataFifoToMem(93,   I+86, 1);
    streamHw.startStreamDataFifoToMem(101,  I+94, 1);
    streamHw.startStreamDataFifoToMem(109, I+102, 1);
    streamHw.startStreamDataFifoToMem(127, I+118, 1);
    streamHw.startStreamDataFifoToMem(129, I+126, 1);
    streamHw.startStreamDataFifoToMem(175, I+134, 1);
    streamHw.startStreamDataFifoToMem(177, I+150, 1);
    streamHw.startStreamDataFifoToMem(179, I+158, 1);
    streamHw.startStreamDataFifoToMem(181, I+166, 1);
    streamHw.startStreamDataFifoToMem(183, I+182, 1);
    streamHw.runPipeline();
    
    // Third pipeline Subs - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(I,       9, 1);
    streamHw.startStreamDataMemToFifo(IE,     11, 1);
    streamHw.startStreamDataMemToFifo(I+16,    31, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
    streamHw.startStreamDataMemToFifo(I+24,  185, 1);
    streamHw.startStreamDataMemToFifo(IE+2,  184, 1);
    streamHw.startStreamDataMemToFifo(I+32,   57, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
    streamHw.startStreamDataMemToFifo(I+48,   75, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   77, 1);
    streamHw.startStreamDataMemToFifo(I+64,   87, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   89, 1);
    streamHw.startStreamDataMemToFifo(I+80,   91, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   93, 1);
    streamHw.startStreamDataMemToFifo(I+88,   97, 1);
    streamHw.startStreamDataMemToFifo(IE+7,  101, 1);
    streamHw.startStreamDataMemToFifo(I+96,  105, 1);
    streamHw.startStreamDataMemToFifo(IE+8,  109, 1);
    streamHw.startStreamDataMemToFifo(I+112,  127, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  126, 1);
    streamHw.startStreamDataMemToFifo(I+120,  129, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 128, 1);
    streamHw.startStreamDataMemToFifo(I+128,  175, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
    streamHw.startStreamDataMemToFifo(I+144,  177, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 176, 1);
    streamHw.startStreamDataMemToFifo(I+152,  179, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
    streamHw.startStreamDataMemToFifo(I+160,  181, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 180, 1);
    streamHw.startStreamDataMemToFifo(I+176,  183, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 182, 1);

    streamHw.startStreamDataFifoToMem(11,    I+4, 1);
    streamHw.startStreamDataFifoToMem(31,   I+20, 1);
    streamHw.startStreamDataFifoToMem(185,  I+28, 1);
    streamHw.startStreamDataFifoToMem(65,   I+36, 1);
    streamHw.startStreamDataFifoToMem(77,   I+52, 1);
    streamHw.startStreamDataFifoToMem(89,   I+68, 1);
    streamHw.startStreamDataFifoToMem(93,   I+84, 1);
    streamHw.startStreamDataFifoToMem(101,  I+92, 1);
    streamHw.startStreamDataFifoToMem(109, I+100, 1);
    streamHw.startStreamDataFifoToMem(127, I+116, 1);
    streamHw.startStreamDataFifoToMem(129, I+124, 1);
    streamHw.startStreamDataFifoToMem(175, I+132, 1);
    streamHw.startStreamDataFifoToMem(177, I+148, 1);
    streamHw.startStreamDataFifoToMem(179, I+156, 1);
    streamHw.startStreamDataFifoToMem(181, I+164, 1);
    streamHw.startStreamDataFifoToMem(183, I+180, 1);
    streamHw.runPipeline();
    
    // Fourth pipeline Adds - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(I,       1, 1);
    streamHw.startStreamDataMemToFifo(IE,      3, 1);
    streamHw.startStreamDataMemToFifo(I+16,   21, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   23, 1);
    streamHw.startStreamDataMemToFifo(I+24,   25, 1);
    streamHw.startStreamDataMemToFifo(IE+2,   31, 1);
    streamHw.startStreamDataMemToFifo(I+32,   35, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   37, 1);
    streamHw.startStreamDataMemToFifo(I+48,   43, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   45, 1);
    streamHw.startStreamDataMemToFifo(I+64,   51, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   53, 1);
    streamHw.startStreamDataMemToFifo(I+80,   59, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   61, 1);
    streamHw.startStreamDataMemToFifo(I+88,   67, 1);
    streamHw.startStreamDataMemToFifo(IE+7,   69, 1);
    streamHw.startStreamDataMemToFifo(I+96,   79, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   81, 1);
    streamHw.startStreamDataMemToFifo(I+112,  95, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   97, 1);
    streamHw.startStreamDataMemToFifo(I+120, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 105, 1);
    streamHw.startStreamDataMemToFifo(I+128, 124, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 125, 1);
    streamHw.startStreamDataMemToFifo(I+144, 166, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 167, 1);
    streamHw.startStreamDataMemToFifo(I+152, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 169, 1);
    streamHw.startStreamDataMemToFifo(I+160, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 171, 1);
    streamHw.startStreamDataMemToFifo(I+176, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 173, 1);

    streamHw.startStreamDataFifoToMem(3,       I, 1);
    streamHw.startStreamDataFifoToMem(23,   I+16, 1);
    streamHw.startStreamDataFifoToMem(31,   I+24, 1);
    streamHw.startStreamDataFifoToMem(37,   I+32, 1);
    streamHw.startStreamDataFifoToMem(45,   I+48, 1);
    streamHw.startStreamDataFifoToMem(53,   I+64, 1);
    streamHw.startStreamDataFifoToMem(61,   I+80, 1);
    streamHw.startStreamDataFifoToMem(69,   I+88, 1);
    streamHw.startStreamDataFifoToMem(81,   I+96, 1);
    streamHw.startStreamDataFifoToMem(97,  I+112, 1);
    streamHw.startStreamDataFifoToMem(105, I+120, 1);
    streamHw.startStreamDataFifoToMem(125, I+128, 1);
    streamHw.startStreamDataFifoToMem(167, I+144, 1);
    streamHw.startStreamDataFifoToMem(169, I+152, 1);
    streamHw.startStreamDataFifoToMem(171, I+160, 1);
    streamHw.startStreamDataFifoToMem(173, I+176, 1);
    streamHw.runPipeline();
  }
  
  // First pipeline Adds - TX
  streamHw.startStreamDataMemToFifo(196,   1, 1);
  streamHw.startStreamDataMemToFifo(198,   3, 1);
  streamHw.startStreamDataMemToFifo(212,  21, 1);
  streamHw.startStreamDataMemToFifo(214,  23, 1);
  streamHw.startStreamDataMemToFifo(220,  25, 1);
  streamHw.startStreamDataMemToFifo(222,  31, 1);
  streamHw.startStreamDataMemToFifo(228,  35, 1);
  streamHw.startStreamDataMemToFifo(230,  37, 1);
  streamHw.startStreamDataMemToFifo(244,  43, 1);
  streamHw.startStreamDataMemToFifo(246,  45, 1);
  streamHw.startStreamDataMemToFifo(452,  51, 1);
  streamHw.startStreamDataMemToFifo(454,  53, 1);
  streamHw.startStreamDataMemToFifo(468,  59, 1);
  streamHw.startStreamDataMemToFifo(470,  61, 1);
  streamHw.startStreamDataMemToFifo(476,  67, 1);
  streamHw.startStreamDataMemToFifo(478,  69, 1);
  streamHw.startStreamDataMemToFifo(484,  79, 1);
  streamHw.startStreamDataMemToFifo(486,  81, 1);
  streamHw.startStreamDataMemToFifo(500,  95, 1);
  streamHw.startStreamDataMemToFifo(502,  97, 1);
  streamHw.startStreamDataMemToFifo(708, 103, 1);
  streamHw.startStreamDataMemToFifo(710, 105, 1);
  streamHw.startStreamDataMemToFifo(724, 124, 1);
  streamHw.startStreamDataMemToFifo(726, 125, 1);
  streamHw.startStreamDataMemToFifo(732, 166, 1);
  streamHw.startStreamDataMemToFifo(734, 167, 1);
  streamHw.startStreamDataMemToFifo(740, 168, 1);
  streamHw.startStreamDataMemToFifo(742, 169, 1);
  streamHw.startStreamDataMemToFifo(756, 170, 1);
  streamHw.startStreamDataMemToFifo(758, 171, 1);
  streamHw.startStreamDataMemToFifo(964, 172, 1);
  streamHw.startStreamDataMemToFifo(966, 173, 1);

  streamHw.startStreamDataFifoToMem(3,      IE, 1);
  streamHw.startStreamDataFifoToMem(23,   IE+1, 1);
  streamHw.startStreamDataFifoToMem(31,   IE+2, 1);
  streamHw.startStreamDataFifoToMem(37,   IE+3, 1);
  streamHw.startStreamDataFifoToMem(45,   IE+4, 1);
  streamHw.startStreamDataFifoToMem(53,   IE+5, 1);
  streamHw.startStreamDataFifoToMem(61,   IE+6, 1);
  streamHw.startStreamDataFifoToMem(69,   IE+7, 1);
  streamHw.startStreamDataFifoToMem(81,   IE+8, 1);
  streamHw.startStreamDataFifoToMem(97,   IE+9, 1);
  streamHw.startStreamDataFifoToMem(105, IE+10, 1);
  streamHw.startStreamDataFifoToMem(125, IE+11, 1);
  streamHw.startStreamDataFifoToMem(167, IE+12, 1);
  streamHw.startStreamDataFifoToMem(169, IE+13, 1);
  streamHw.startStreamDataFifoToMem(171, IE+14, 1);
  streamHw.startStreamDataFifoToMem(173, IE+15, 1);
  streamHw.runPipeline();
  
  // Second pipeline Subs - X[I]: 2 Terms
  streamHw.startStreamDataMemToFifo(198,   9, 1);
  streamHw.startStreamDataMemToFifo(196,  11, 1);
  streamHw.startStreamDataMemToFifo(214,  31, 1);
  streamHw.startStreamDataMemToFifo(212,  29, 1);
  streamHw.startStreamDataMemToFifo(222, 185, 1);
  streamHw.startStreamDataMemToFifo(220, 184, 1);
  streamHw.startStreamDataMemToFifo(230,  57, 1);
  streamHw.startStreamDataMemToFifo(228,  65, 1);
  streamHw.startStreamDataMemToFifo(246,  75, 1);
  streamHw.startStreamDataMemToFifo(244,  77, 1);
  streamHw.startStreamDataMemToFifo(454,  87, 1);
  streamHw.startStreamDataMemToFifo(452,  89, 1);
  streamHw.startStreamDataMemToFifo(470,  91, 1);
  streamHw.startStreamDataMemToFifo(468,  93, 1);
  streamHw.startStreamDataMemToFifo(478,  97, 1);
  streamHw.startStreamDataMemToFifo(476, 101, 1);
  streamHw.startStreamDataMemToFifo(486, 105, 1);
  streamHw.startStreamDataMemToFifo(484, 109, 1);
  streamHw.startStreamDataMemToFifo(502, 127, 1);
  streamHw.startStreamDataMemToFifo(500, 126, 1);
  streamHw.startStreamDataMemToFifo(710, 129, 1);
  streamHw.startStreamDataMemToFifo(708, 128, 1);
  streamHw.startStreamDataMemToFifo(726, 175, 1);
  streamHw.startStreamDataMemToFifo(724, 174, 1);
  streamHw.startStreamDataMemToFifo(734, 177, 1);
  streamHw.startStreamDataMemToFifo(732, 176, 1);
  streamHw.startStreamDataMemToFifo(742, 179, 1);
  streamHw.startStreamDataMemToFifo(740, 178, 1);
  streamHw.startStreamDataMemToFifo(758, 181, 1);
  streamHw.startStreamDataMemToFifo(756, 180, 1);
  streamHw.startStreamDataMemToFifo(966, 183, 1);
  streamHw.startStreamDataMemToFifo(964, 182, 1);

  streamHw.startStreamDataFifoToMem(11,  198, 1);
  streamHw.startStreamDataFifoToMem(31,  214, 1);
  streamHw.startStreamDataFifoToMem(185, 222, 1);
  streamHw.startStreamDataFifoToMem(65,  230, 1);
  streamHw.startStreamDataFifoToMem(77,  246, 1);
  streamHw.startStreamDataFifoToMem(89,  454, 1);
  streamHw.startStreamDataFifoToMem(93,  470, 1);
  streamHw.startStreamDataFifoToMem(101, 478, 1);
  streamHw.startStreamDataFifoToMem(109, 486, 1);
  streamHw.startStreamDataFifoToMem(127, 502, 1);
  streamHw.startStreamDataFifoToMem(129, 710, 1);
  streamHw.startStreamDataFifoToMem(175, 726, 1);
  streamHw.startStreamDataFifoToMem(177, 734, 1);
  streamHw.startStreamDataFifoToMem(179, 742, 1);
  streamHw.startStreamDataFifoToMem(181, 758, 1);
  streamHw.startStreamDataFifoToMem(183, 966, 1);
  streamHw.runPipeline();
  
  // Third pipeline Subs - X[I]: 3 Terms
  streamHw.startStreamDataMemToFifo(192,     9, 1);
  streamHw.startStreamDataMemToFifo(IE,     11, 1);
  streamHw.startStreamDataMemToFifo(208,    31, 1);
  streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
  streamHw.startStreamDataMemToFifo(216,   185, 1);
  streamHw.startStreamDataMemToFifo(IE+2,  184, 1);
  streamHw.startStreamDataMemToFifo(224,    57, 1);
  streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
  streamHw.startStreamDataMemToFifo(240,    75, 1);
  streamHw.startStreamDataMemToFifo(IE+4,   77, 1);
  streamHw.startStreamDataMemToFifo(448,    87, 1);
  streamHw.startStreamDataMemToFifo(IE+5,   89, 1);
  streamHw.startStreamDataMemToFifo(464,    91, 1);
  streamHw.startStreamDataMemToFifo(IE+6,   93, 1);
  streamHw.startStreamDataMemToFifo(472,    97, 1);
  streamHw.startStreamDataMemToFifo(IE+7,  101, 1);
  streamHw.startStreamDataMemToFifo(480,   105, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  109, 1);
  streamHw.startStreamDataMemToFifo(496,   127, 1);
  streamHw.startStreamDataMemToFifo(IE+9,  126, 1);
  streamHw.startStreamDataMemToFifo(704,   129, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 128, 1);
  streamHw.startStreamDataMemToFifo(720,   175, 1);
  streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
  streamHw.startStreamDataMemToFifo(728,   177, 1);
  streamHw.startStreamDataMemToFifo(IE+12, 176, 1);
  streamHw.startStreamDataMemToFifo(736,   179, 1);
  streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
  streamHw.startStreamDataMemToFifo(752,   181, 1);
  streamHw.startStreamDataMemToFifo(IE+14, 180, 1);
  streamHw.startStreamDataMemToFifo(960,   183, 1);
  streamHw.startStreamDataMemToFifo(IE+15, 182, 1);

  streamHw.startStreamDataFifoToMem(11,  196, 1);
  streamHw.startStreamDataFifoToMem(31,  212, 1);
  streamHw.startStreamDataFifoToMem(185, 220, 1);
  streamHw.startStreamDataFifoToMem(65,  228, 1);
  streamHw.startStreamDataFifoToMem(77,  244, 1);
  streamHw.startStreamDataFifoToMem(89,  452, 1);
  streamHw.startStreamDataFifoToMem(93,  468, 1);
  streamHw.startStreamDataFifoToMem(101, 476, 1);
  streamHw.startStreamDataFifoToMem(109, 484, 1);
  streamHw.startStreamDataFifoToMem(127, 500, 1);
  streamHw.startStreamDataFifoToMem(129, 708, 1);
  streamHw.startStreamDataFifoToMem(175, 724, 1);
  streamHw.startStreamDataFifoToMem(177, 732, 1);
  streamHw.startStreamDataFifoToMem(179, 740, 1);
  streamHw.startStreamDataFifoToMem(181, 756, 1);
  streamHw.startStreamDataFifoToMem(183, 964, 1);
  streamHw.runPipeline();
  
  // Fourth pipeline Adds - X[I]: 3 Terms
  streamHw.startStreamDataMemToFifo(192,     1, 1);
  streamHw.startStreamDataMemToFifo(IE,      3, 1);
  streamHw.startStreamDataMemToFifo(208,    21, 1);
  streamHw.startStreamDataMemToFifo(IE+1,   23, 1);
  streamHw.startStreamDataMemToFifo(216,    25, 1);
  streamHw.startStreamDataMemToFifo(IE+2,   31, 1);
  streamHw.startStreamDataMemToFifo(224,    35, 1);
  streamHw.startStreamDataMemToFifo(IE+3,   37, 1);
  streamHw.startStreamDataMemToFifo(240,    43, 1);
  streamHw.startStreamDataMemToFifo(IE+4,   45, 1);
  streamHw.startStreamDataMemToFifo(448,    51, 1);
  streamHw.startStreamDataMemToFifo(IE+5,   53, 1);
  streamHw.startStreamDataMemToFifo(464,    59, 1);
  streamHw.startStreamDataMemToFifo(IE+6,   61, 1);
  streamHw.startStreamDataMemToFifo(472,    67, 1);
  streamHw.startStreamDataMemToFifo(IE+7,   69, 1);
  streamHw.startStreamDataMemToFifo(480,    79, 1);
  streamHw.startStreamDataMemToFifo(IE+8,   81, 1);
  streamHw.startStreamDataMemToFifo(496,    95, 1);
  streamHw.startStreamDataMemToFifo(IE+9,   97, 1);
  streamHw.startStreamDataMemToFifo(704,   103, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 105, 1);
  streamHw.startStreamDataMemToFifo(720,   124, 1);
  streamHw.startStreamDataMemToFifo(IE+11, 125, 1);
  streamHw.startStreamDataMemToFifo(728,   166, 1);
  streamHw.startStreamDataMemToFifo(IE+12, 167, 1);
  streamHw.startStreamDataMemToFifo(736,   168, 1);
  streamHw.startStreamDataMemToFifo(IE+13, 169, 1);
  streamHw.startStreamDataMemToFifo(752,   170, 1);
  streamHw.startStreamDataMemToFifo(IE+14, 171, 1);
  streamHw.startStreamDataMemToFifo(960,   172, 1);
  streamHw.startStreamDataMemToFifo(IE+15, 173, 1);

  streamHw.startStreamDataFifoToMem(3,   192, 1);
  streamHw.startStreamDataFifoToMem(23,  208, 1);
  streamHw.startStreamDataFifoToMem(31,  216, 1);
  streamHw.startStreamDataFifoToMem(37,  224, 1);
  streamHw.startStreamDataFifoToMem(45,  240, 1);
  streamHw.startStreamDataFifoToMem(53,  448, 1);
  streamHw.startStreamDataFifoToMem(61,  464, 1);
  streamHw.startStreamDataFifoToMem(69,  472, 1);
  streamHw.startStreamDataFifoToMem(81,  480, 1);
  streamHw.startStreamDataFifoToMem(97,  496, 1);
  streamHw.startStreamDataFifoToMem(105, 704, 1);
  streamHw.startStreamDataFifoToMem(125, 720, 1);
  streamHw.startStreamDataFifoToMem(167, 728, 1);
  streamHw.startStreamDataFifoToMem(169, 736, 1);
  streamHw.startStreamDataFifoToMem(171, 752, 1);
  streamHw.startStreamDataFifoToMem(173, 960, 1);
  streamHw.runPipeline();
  
  for (size_t I = 1; I < WINDOW_SIZE; I+=256)
  {
    // Save values in the available space
    streamHw.startStreamDataMemToFifo(I, 32, 128);
    streamHw.startStreamDataFifoToMem(32, IS, 128);
    streamHw.runPipeline();
    
    // First pipeline Adds/Mults - TX
    streamHw.startStreamDataMemToFifo(IS+6,  122, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  123, 1);
    streamHw.startStreamDataMemToFifo(IS+6,   81, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   85, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 186, 1);
    streamHw.startStreamDataMemToFifo(IS+20, 187, 1);
    streamHw.startStreamDataMemToFifo(IS+22,  69, 1);
    streamHw.startStreamDataMemToFifo(IS+20,  73, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 188, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 189, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 200, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 201, 1);
    streamHw.startStreamDataMemToFifo(IS+38, 190, 1);
    streamHw.startStreamDataMemToFifo(IS+36, 191, 1);
    streamHw.startStreamDataMemToFifo(IS+38, 202, 1);
    streamHw.startStreamDataMemToFifo(IS+36, 203, 1);
    streamHw.startStreamDataMemToFifo(IS+54, 192, 1);
    streamHw.startStreamDataMemToFifo(IS+52, 193, 1);
    streamHw.startStreamDataMemToFifo(IS+54, 204, 1);
    streamHw.startStreamDataMemToFifo(IS+52, 205, 1);
    streamHw.startStreamDataMemToFifo(IS+70, 194, 1);
    streamHw.startStreamDataMemToFifo(IS+68, 195, 1);
    streamHw.startStreamDataMemToFifo(IS+70, 206, 1);
    streamHw.startStreamDataMemToFifo(IS+68, 207, 1);
    streamHw.startStreamDataMemToFifo(IS+86, 196, 1);
    streamHw.startStreamDataMemToFifo(IS+84, 197, 1);
    streamHw.startStreamDataMemToFifo(IS+86, 208, 1);
    streamHw.startStreamDataMemToFifo(IS+84, 209, 1);
    streamHw.startStreamDataMemToFifo(IS+94, 198, 1);
    streamHw.startStreamDataMemToFifo(IS+92, 199, 1);
    streamHw.startStreamDataMemToFifo(IS+94, 210, 1);
    streamHw.startStreamDataMemToFifo(IS+92, 211, 1);

    streamHw.startStreamDataFifoToMem(123,    IE, 1);
    streamHw.startStreamDataFifoToMem(85,   IE+1, 1);
    streamHw.startStreamDataFifoToMem(187,  IE+2, 1);
    streamHw.startStreamDataFifoToMem(73,   IE+3, 1);
    streamHw.startStreamDataFifoToMem(189,  IE+4, 1);
    streamHw.startStreamDataFifoToMem(201,  IE+5, 1);
    streamHw.startStreamDataFifoToMem(191,  IE+6, 1);
    streamHw.startStreamDataFifoToMem(203,  IE+7, 1);
    streamHw.startStreamDataFifoToMem(193,  IE+8, 1);
    streamHw.startStreamDataFifoToMem(205,  IE+9, 1);
    streamHw.startStreamDataFifoToMem(195, IE+10, 1);
    streamHw.startStreamDataFifoToMem(207, IE+11, 1);
    streamHw.startStreamDataFifoToMem(197, IE+12, 1);
    streamHw.startStreamDataFifoToMem(209, IE+13, 1);
    streamHw.startStreamDataFifoToMem(199, IE+14, 1);
    streamHw.startStreamDataFifoToMem(211, IE+15, 1);
    streamHw.runPipeline();

    // Second pipeline Adds - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IE+1,    3, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   21, 1);
    streamHw.startStreamDataMemToFifo(IE,     23, 1);
    streamHw.startStreamDataMemToFifo(IS+16,  25, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+18,  35, 1);
    streamHw.startStreamDataMemToFifo(IE+2,   37, 1);
    streamHw.startStreamDataMemToFifo(IS+24,  43, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   45, 1);
    streamHw.startStreamDataMemToFifo(IS+26,  51, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   53, 1);
    streamHw.startStreamDataMemToFifo(IS+32,  59, 1);
    streamHw.startStreamDataMemToFifo(IE+7,   61, 1);
    streamHw.startStreamDataMemToFifo(IS+34,  67, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   69, 1);
    streamHw.startStreamDataMemToFifo(IS+48,  79, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   81, 1);
    streamHw.startStreamDataMemToFifo(IS+50,  95, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   97, 1);
    streamHw.startStreamDataMemToFifo(IS+64, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 105, 1);
    streamHw.startStreamDataMemToFifo(IS+66, 124, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 125, 1);
    streamHw.startStreamDataMemToFifo(IS+80, 166, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 167, 1);
    streamHw.startStreamDataMemToFifo(IS+82, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 169, 1);
    streamHw.startStreamDataMemToFifo(IS+88, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 171, 1);
    streamHw.startStreamDataMemToFifo(IS+90, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 173, 1);

    streamHw.startStreamDataFifoToMem(3,      I, 1);
    streamHw.startStreamDataFifoToMem(23,   I+6, 1);
    streamHw.startStreamDataFifoToMem(31,  I+16, 1);
    streamHw.startStreamDataFifoToMem(37,  I+22, 1);
    streamHw.startStreamDataFifoToMem(45,  I+24, 1);
    streamHw.startStreamDataFifoToMem(53,  I+30, 1);
    streamHw.startStreamDataFifoToMem(61,  I+32, 1);
    streamHw.startStreamDataFifoToMem(69,  I+38, 1);
    streamHw.startStreamDataFifoToMem(81,  I+48, 1);
    streamHw.startStreamDataFifoToMem(97,  I+54, 1);
    streamHw.startStreamDataFifoToMem(105, I+64, 1);
    streamHw.startStreamDataFifoToMem(125, I+70, 1);
    streamHw.startStreamDataFifoToMem(167, I+80, 1);
    streamHw.startStreamDataFifoToMem(169, I+86, 1);
    streamHw.startStreamDataFifoToMem(171, I+88, 1);
    streamHw.startStreamDataFifoToMem(173, I+94, 1);
    streamHw.runPipeline();
    
    // Third pipeline Subs - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(IE,      9, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   11, 1);
    streamHw.startStreamDataMemToFifo(IS,     31, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
    streamHw.startStreamDataMemToFifo(IE+2,  185, 1);
    streamHw.startStreamDataMemToFifo(IS+18, 184, 1);
    streamHw.startStreamDataMemToFifo(IS+16,  57, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   75, 1);
    streamHw.startStreamDataMemToFifo(IS+26,  77, 1);
    streamHw.startStreamDataMemToFifo(IS+24,  87, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   89, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   91, 1);
    streamHw.startStreamDataMemToFifo(IS+34,  93, 1);
    streamHw.startStreamDataMemToFifo(IS+32,  97, 1);
    streamHw.startStreamDataMemToFifo(IE+7,  101, 1);
    streamHw.startStreamDataMemToFifo(IE+8,  105, 1);
    streamHw.startStreamDataMemToFifo(IS+50, 109, 1);
    streamHw.startStreamDataMemToFifo(IS+48, 127, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  126, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 129, 1);
    streamHw.startStreamDataMemToFifo(IS+66, 128, 1);
    streamHw.startStreamDataMemToFifo(IS+64, 175, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 177, 1);
    streamHw.startStreamDataMemToFifo(IS+82, 176, 1);
    streamHw.startStreamDataMemToFifo(IS+80, 179, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 181, 1);
    streamHw.startStreamDataMemToFifo(IS+90, 180, 1);
    streamHw.startStreamDataMemToFifo(IS+88, 183, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 182, 1);

    streamHw.startStreamDataFifoToMem(11,   I+4, 1);
    streamHw.startStreamDataFifoToMem(31,   I+2, 1);
    streamHw.startStreamDataFifoToMem(185, I+20, 1);
    streamHw.startStreamDataFifoToMem(65,  I+18, 1);
    streamHw.startStreamDataFifoToMem(77,  I+28, 1);
    streamHw.startStreamDataFifoToMem(89,  I+26, 1);
    streamHw.startStreamDataFifoToMem(93,  I+36, 1);
    streamHw.startStreamDataFifoToMem(101, I+34, 1);
    streamHw.startStreamDataFifoToMem(109, I+52, 1);
    streamHw.startStreamDataFifoToMem(127, I+50, 1);
    streamHw.startStreamDataFifoToMem(129, I+68, 1);
    streamHw.startStreamDataFifoToMem(175, I+66, 1);
    streamHw.startStreamDataFifoToMem(177, I+84, 1);
    streamHw.startStreamDataFifoToMem(179, I+82, 1);
    streamHw.startStreamDataFifoToMem(181, I+92, 1);
    streamHw.startStreamDataFifoToMem(183, I+90, 1);
    streamHw.runPipeline();
  }

  for (size_t I = 97; I < WINDOW_SIZE; I+=256)
  {
    // Save values in the available space
    streamHw.startStreamDataMemToFifo(I, 32, 128);
    streamHw.startStreamDataFifoToMem(32, IS, 128);
    streamHw.runPipeline();
    
    // First pipeline Adds/Mults - TX
    streamHw.startStreamDataMemToFifo(IS+6,  122, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  123, 1);
    streamHw.startStreamDataMemToFifo(IS+6,   81, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   85, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 186, 1);
    streamHw.startStreamDataMemToFifo(IS+20, 187, 1);
    streamHw.startStreamDataMemToFifo(IS+22,  69, 1);
    streamHw.startStreamDataMemToFifo(IS+20,  73, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 188, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 189, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 200, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 201, 1);
    streamHw.startStreamDataMemToFifo(IS+38, 190, 1);
    streamHw.startStreamDataMemToFifo(IS+36, 191, 1);
    streamHw.startStreamDataMemToFifo(IS+38, 202, 1);
    streamHw.startStreamDataMemToFifo(IS+36, 203, 1);
    streamHw.startStreamDataMemToFifo(IS+54, 192, 1);
    streamHw.startStreamDataMemToFifo(IS+52, 193, 1);
    streamHw.startStreamDataMemToFifo(IS+54, 204, 1);
    streamHw.startStreamDataMemToFifo(IS+52, 205, 1);
    streamHw.startStreamDataMemToFifo(IS+62, 194, 1);
    streamHw.startStreamDataMemToFifo(IS+60, 195, 1);
    streamHw.startStreamDataMemToFifo(IS+62, 206, 1);
    streamHw.startStreamDataMemToFifo(IS+60, 207, 1);
    streamHw.startStreamDataMemToFifo(IS+70, 196, 1);
    streamHw.startStreamDataMemToFifo(IS+68, 197, 1);
    streamHw.startStreamDataMemToFifo(IS+70, 208, 1);
    streamHw.startStreamDataMemToFifo(IS+68, 209, 1);
    streamHw.startStreamDataMemToFifo(IS+86, 198, 1);
    streamHw.startStreamDataMemToFifo(IS+84, 199, 1);
    streamHw.startStreamDataMemToFifo(IS+86, 210, 1);
    streamHw.startStreamDataMemToFifo(IS+84, 211, 1);

    streamHw.startStreamDataFifoToMem(123,    IE, 32);
    streamHw.startStreamDataFifoToMem(85,   IE+1, 32);
    streamHw.startStreamDataFifoToMem(187,  IE+2, 32);
    streamHw.startStreamDataFifoToMem(73,   IE+3, 32);
    streamHw.startStreamDataFifoToMem(189,  IE+4, 32);
    streamHw.startStreamDataFifoToMem(201,  IE+5, 32);
    streamHw.startStreamDataFifoToMem(191,  IE+6, 32);
    streamHw.startStreamDataFifoToMem(203,  IE+7, 32);
    streamHw.startStreamDataFifoToMem(193,  IE+8, 32);
    streamHw.startStreamDataFifoToMem(205,  IE+9, 32);
    streamHw.startStreamDataFifoToMem(195, IE+10, 32);
    streamHw.startStreamDataFifoToMem(207, IE+11, 32);
    streamHw.startStreamDataFifoToMem(197, IE+12, 32);
    streamHw.startStreamDataFifoToMem(209, IE+13, 32);
    streamHw.startStreamDataFifoToMem(199, IE+14, 32);
    streamHw.startStreamDataFifoToMem(211, IE+15, 32);
    streamHw.runPipeline();

    // Second pipeline Adds - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IE+1,    3, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   21, 1);
    streamHw.startStreamDataMemToFifo(IE,     23, 1);
    streamHw.startStreamDataMemToFifo(IS+16,  25, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+18,  35, 1);
    streamHw.startStreamDataMemToFifo(IE+2,   37, 1);
    streamHw.startStreamDataMemToFifo(IS+24,  43, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   45, 1);
    streamHw.startStreamDataMemToFifo(IS+26,  51, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   53, 1);
    streamHw.startStreamDataMemToFifo(IS+32,  59, 1);
    streamHw.startStreamDataMemToFifo(IE+7,   61, 1);
    streamHw.startStreamDataMemToFifo(IS+34,  67, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   69, 1);
    streamHw.startStreamDataMemToFifo(IS+48,  79, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   81, 1);
    streamHw.startStreamDataMemToFifo(IS+50,  95, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   97, 1);
    streamHw.startStreamDataMemToFifo(IS+56, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 105, 1);
    streamHw.startStreamDataMemToFifo(IS+58, 124, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 125, 1);
    streamHw.startStreamDataMemToFifo(IS+64, 166, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 167, 1);
    streamHw.startStreamDataMemToFifo(IS+66, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 169, 1);
    streamHw.startStreamDataMemToFifo(IS+80, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 171, 1);
    streamHw.startStreamDataMemToFifo(IS+82, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 173, 1);

    streamHw.startStreamDataFifoToMem(3,      I, 1);
    streamHw.startStreamDataFifoToMem(23,   I+6, 1);
    streamHw.startStreamDataFifoToMem(31,  I+16, 1);
    streamHw.startStreamDataFifoToMem(37,  I+22, 1);
    streamHw.startStreamDataFifoToMem(45,  I+24, 1);
    streamHw.startStreamDataFifoToMem(53,  I+30, 1);
    streamHw.startStreamDataFifoToMem(61,  I+32, 1);
    streamHw.startStreamDataFifoToMem(69,  I+38, 1);
    streamHw.startStreamDataFifoToMem(81,  I+48, 1);
    streamHw.startStreamDataFifoToMem(97,  I+54, 1);
    streamHw.startStreamDataFifoToMem(105, I+56, 1);
    streamHw.startStreamDataFifoToMem(125, I+62, 1);
    streamHw.startStreamDataFifoToMem(167, I+64, 1);
    streamHw.startStreamDataFifoToMem(169, I+70, 1);
    streamHw.startStreamDataFifoToMem(171, I+80, 1);
    streamHw.startStreamDataFifoToMem(173, I+86, 1);
    streamHw.runPipeline();
    
    // Third pipeline Subs - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(IE,      9, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   11, 1);
    streamHw.startStreamDataMemToFifo(IS,     31, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
    streamHw.startStreamDataMemToFifo(IE+2,  185, 1);
    streamHw.startStreamDataMemToFifo(IS+18, 184, 1);
    streamHw.startStreamDataMemToFifo(IS+16,  57, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   75, 1);
    streamHw.startStreamDataMemToFifo(IS+26,  77, 1);
    streamHw.startStreamDataMemToFifo(IS+24,  87, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   89, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   91, 1);
    streamHw.startStreamDataMemToFifo(IS+34,  93, 1);
    streamHw.startStreamDataMemToFifo(IS+32,  97, 1);
    streamHw.startStreamDataMemToFifo(IE+7,  101, 1);
    streamHw.startStreamDataMemToFifo(IE+8,  105, 1);
    streamHw.startStreamDataMemToFifo(IS+50, 109, 1);
    streamHw.startStreamDataMemToFifo(IS+48, 127, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  126, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 129, 1);
    streamHw.startStreamDataMemToFifo(IS+58, 128, 1);
    streamHw.startStreamDataMemToFifo(IS+56, 175, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 177, 1);
    streamHw.startStreamDataMemToFifo(IS+66, 176, 1);
    streamHw.startStreamDataMemToFifo(IS+64, 179, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 181, 1);
    streamHw.startStreamDataMemToFifo(IS+82, 180, 1);
    streamHw.startStreamDataMemToFifo(IS+80, 183, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 182, 1);

    streamHw.startStreamDataFifoToMem(11,   I+4, 1);
    streamHw.startStreamDataFifoToMem(31,   I+2, 1);
    streamHw.startStreamDataFifoToMem(185, I+20, 1);
    streamHw.startStreamDataFifoToMem(65,  I+18, 1);
    streamHw.startStreamDataFifoToMem(77,  I+28, 1);
    streamHw.startStreamDataFifoToMem(89,  I+26, 1);
    streamHw.startStreamDataFifoToMem(93,  I+36, 1);
    streamHw.startStreamDataFifoToMem(101, I+34, 1);
    streamHw.startStreamDataFifoToMem(109, I+52, 1);
    streamHw.startStreamDataFifoToMem(127, I+50, 1);
    streamHw.startStreamDataFifoToMem(129, I+60, 1);
    streamHw.startStreamDataFifoToMem(175, I+58, 1);
    streamHw.startStreamDataFifoToMem(177, I+68, 1);
    streamHw.startStreamDataFifoToMem(179, I+66, 1);
    streamHw.startStreamDataFifoToMem(181, I+84, 1);
    streamHw.startStreamDataFifoToMem(183, I+82, 1);
    streamHw.runPipeline();
  }

  for (size_t I = 193; I < WINDOW_SIZE; I+=512)
  {
    // Save values in the available space
    streamHw.startStreamDataMemToFifo(I, 32, 64);
    streamHw.startStreamDataFifoToMem(32, IS, 64);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(I+256, 32, 64);
    streamHw.startStreamDataFifoToMem(32, IS+56, 64);
    streamHw.runPipeline();
    
    // First pipeline Adds/Mults - TX
    streamHw.startStreamDataMemToFifo(IS+6, 122, 1);
    streamHw.startStreamDataMemToFifo(IS+4, 123, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  81, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  85, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 186, 1);
    streamHw.startStreamDataMemToFifo(IS+20, 187, 1);
    streamHw.startStreamDataMemToFifo(IS+22,  69, 1);
    streamHw.startStreamDataMemToFifo(IS+20,  73, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 188, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 189, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 200, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 201, 1);
    streamHw.startStreamDataMemToFifo(IS+38, 190, 1);
    streamHw.startStreamDataMemToFifo(IS+36, 191, 1);
    streamHw.startStreamDataMemToFifo(IS+38, 202, 1);
    streamHw.startStreamDataMemToFifo(IS+36, 203, 1);
    streamHw.startStreamDataMemToFifo(IS+54, 192, 1);
    streamHw.startStreamDataMemToFifo(IS+52, 193, 1);
    streamHw.startStreamDataMemToFifo(IS+54, 204, 1);
    streamHw.startStreamDataMemToFifo(IS+52, 205, 1);
    streamHw.startStreamDataMemToFifo(IS+62, 194, 1);
    streamHw.startStreamDataMemToFifo(IS+60, 195, 1);
    streamHw.startStreamDataMemToFifo(IS+62, 206, 1);
    streamHw.startStreamDataMemToFifo(IS+60, 207, 1);
    streamHw.startStreamDataMemToFifo(IS+78, 196, 1);
    streamHw.startStreamDataMemToFifo(IS+76, 197, 1);
    streamHw.startStreamDataMemToFifo(IS+78, 208, 1);
    streamHw.startStreamDataMemToFifo(IS+76, 209, 1);
    streamHw.startStreamDataMemToFifo(IS+86, 198, 1);
    streamHw.startStreamDataMemToFifo(IS+84, 199, 1);
    streamHw.startStreamDataMemToFifo(IS+86, 210, 1);
    streamHw.startStreamDataMemToFifo(IS+84, 211, 1);

    streamHw.startStreamDataFifoToMem(123,    IE, 32);
    streamHw.startStreamDataFifoToMem(85,   IE+1, 32);
    streamHw.startStreamDataFifoToMem(187,  IE+2, 32);
    streamHw.startStreamDataFifoToMem(73,   IE+3, 32);
    streamHw.startStreamDataFifoToMem(189,  IE+4, 32);
    streamHw.startStreamDataFifoToMem(201,  IE+5, 32);
    streamHw.startStreamDataFifoToMem(191,  IE+6, 32);
    streamHw.startStreamDataFifoToMem(203,  IE+7, 32);
    streamHw.startStreamDataFifoToMem(193,  IE+8, 32);
    streamHw.startStreamDataFifoToMem(205,  IE+9, 32);
    streamHw.startStreamDataFifoToMem(195, IE+10, 32);
    streamHw.startStreamDataFifoToMem(207, IE+11, 32);
    streamHw.startStreamDataFifoToMem(197, IE+12, 32);
    streamHw.startStreamDataFifoToMem(209, IE+13, 32);
    streamHw.startStreamDataFifoToMem(199, IE+14, 32);
    streamHw.startStreamDataFifoToMem(211, IE+15, 32);
    streamHw.runPipeline();

    // Second pipeline Adds - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IE+1,    3, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   21, 1);
    streamHw.startStreamDataMemToFifo(IE,     23, 1);
    streamHw.startStreamDataMemToFifo(IS+16,  25, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+18,  35, 1);
    streamHw.startStreamDataMemToFifo(IE+2,   37, 1);
    streamHw.startStreamDataMemToFifo(IS+24,  43, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   45, 1);
    streamHw.startStreamDataMemToFifo(IS+26,  51, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   53, 1);
    streamHw.startStreamDataMemToFifo(IS+32,  59, 1);
    streamHw.startStreamDataMemToFifo(IE+7,   61, 1);
    streamHw.startStreamDataMemToFifo(IS+34,  67, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   69, 1);
    streamHw.startStreamDataMemToFifo(IS+48,  79, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   81, 1);
    streamHw.startStreamDataMemToFifo(IS+50,  95, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   97, 1);
    streamHw.startStreamDataMemToFifo(IS+56, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 105, 1);
    streamHw.startStreamDataMemToFifo(IS+58, 124, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 125, 1);
    streamHw.startStreamDataMemToFifo(IS+72, 166, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 167, 1);
    streamHw.startStreamDataMemToFifo(IS+74, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 169, 1);
    streamHw.startStreamDataMemToFifo(IS+80, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 171, 1);
    streamHw.startStreamDataMemToFifo(IS+82, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 173, 1);

    streamHw.startStreamDataFifoToMem(3,       I, 1);
    streamHw.startStreamDataFifoToMem(23,    I+6, 1);
    streamHw.startStreamDataFifoToMem(31,   I+16, 1);
    streamHw.startStreamDataFifoToMem(37,   I+22, 1);
    streamHw.startStreamDataFifoToMem(45,   I+24, 1);
    streamHw.startStreamDataFifoToMem(53,   I+30, 1);
    streamHw.startStreamDataFifoToMem(61,   I+32, 1);
    streamHw.startStreamDataFifoToMem(69,   I+38, 1);
    streamHw.startStreamDataFifoToMem(81,   I+48, 1);
    streamHw.startStreamDataFifoToMem(97,   I+54, 1);
    streamHw.startStreamDataFifoToMem(105, I+256, 1);
    streamHw.startStreamDataFifoToMem(125, I+262, 1);
    streamHw.startStreamDataFifoToMem(167, I+272, 1);
    streamHw.startStreamDataFifoToMem(169, I+278, 1);
    streamHw.startStreamDataFifoToMem(171, I+280, 1);
    streamHw.startStreamDataFifoToMem(173, I+286, 1);
    streamHw.runPipeline();
    
    // Third pipeline Subs - X[I]: 3 Terms
    streamHw.startStreamDataMemToFifo(IE,      9, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   11, 1);
    streamHw.startStreamDataMemToFifo(IS,     31, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
    streamHw.startStreamDataMemToFifo(IE+2,  185, 1);
    streamHw.startStreamDataMemToFifo(IS+18, 184, 1);
    streamHw.startStreamDataMemToFifo(IS+16,  57, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   75, 1);
    streamHw.startStreamDataMemToFifo(IS+26,  77, 1);
    streamHw.startStreamDataMemToFifo(IS+24,  87, 1);
    streamHw.startStreamDataMemToFifo(IE+5,   89, 1);
    streamHw.startStreamDataMemToFifo(IE+6,   91, 1);
    streamHw.startStreamDataMemToFifo(IS+34,  93, 1);
    streamHw.startStreamDataMemToFifo(IS+32,  97, 1);
    streamHw.startStreamDataMemToFifo(IE+7,  101, 1);
    streamHw.startStreamDataMemToFifo(IE+8,  105, 1);
    streamHw.startStreamDataMemToFifo(IS+50, 109, 1);
    streamHw.startStreamDataMemToFifo(IS+48, 127, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  126, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 129, 1);
    streamHw.startStreamDataMemToFifo(IS+58, 128, 1);
    streamHw.startStreamDataMemToFifo(IS+56, 175, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 177, 1);
    streamHw.startStreamDataMemToFifo(IS+74, 176, 1);
    streamHw.startStreamDataMemToFifo(IS+72, 179, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 181, 1);
    streamHw.startStreamDataMemToFifo(IS+82, 180, 1);
    streamHw.startStreamDataMemToFifo(IS+80, 183, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 182, 1);

    streamHw.startStreamDataFifoToMem(11,   I+4, 1);
    streamHw.startStreamDataFifoToMem(31,   I+2, 1);
    streamHw.startStreamDataFifoToMem(185, I+20, 1);
    streamHw.startStreamDataFifoToMem(65,  I+18, 1);
    streamHw.startStreamDataFifoToMem(77,  I+28, 1);
    streamHw.startStreamDataFifoToMem(89,  I+26, 1);
    streamHw.startStreamDataFifoToMem(93,  I+36, 1);
    streamHw.startStreamDataFifoToMem(101, I+34, 1);
    streamHw.startStreamDataFifoToMem(109, I+52, 1);
    streamHw.startStreamDataFifoToMem(127, I+50, 1);
    streamHw.startStreamDataFifoToMem(129, I+260, 1);
    streamHw.startStreamDataFifoToMem(175, I+258, 1);
    streamHw.startStreamDataFifoToMem(177, I+276, 1);
    streamHw.startStreamDataFifoToMem(179, I+274, 1);
    streamHw.startStreamDataFifoToMem(181, I+284, 1);
    streamHw.startStreamDataFifoToMem(183, I+282, 1);
    streamHw.runPipeline();
  }

  // Save values in the available memory space
  streamHw.startStreamDataMemToFifo(487, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(485, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+1, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(503, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+2, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(501, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+3, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(511, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+4, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(509, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+5, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(999, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+6, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(997, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+7, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1015, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+8, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1013, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+9, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(510, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+10, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(980, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+11, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(982, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+12, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(988, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+13, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(990, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+14, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1012, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+15, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(508, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+16, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(996, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+17, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(998, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+18, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1014, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+19, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(481, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+20, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(483, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+21, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(497, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+22, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(499, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+23, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(504, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+24, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(505, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+25, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(507, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+26, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(976, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+27, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(984, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+28, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(992, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+29, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(993, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+30, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(995, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+31, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1008, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+32, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1009, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+33, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(1011, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+34, 1);
  streamHw.runPipeline();
    
  // First pipeline
  streamHw.startStreamDataMemToFifo(IS,   122, 1);
  streamHw.startStreamDataMemToFifo(IS+1, 123, 1);
  streamHw.startStreamDataMemToFifo(IS,    81, 1);
  streamHw.startStreamDataMemToFifo(IS+1,  85, 1);
  streamHw.startStreamDataMemToFifo(IS+2, 186, 1);
  streamHw.startStreamDataMemToFifo(IS+3, 187, 1);
  streamHw.startStreamDataMemToFifo(IS+2,  69, 1);
  streamHw.startStreamDataMemToFifo(IS+3,  73, 1);
  streamHw.startStreamDataMemToFifo(IS+4, 188, 1);
  streamHw.startStreamDataMemToFifo(IS+5, 189, 1);
  streamHw.startStreamDataMemToFifo(IS+4, 200, 1);
  streamHw.startStreamDataMemToFifo(IS+5, 201, 1);
  streamHw.startStreamDataMemToFifo(IS+6, 190, 1);
  streamHw.startStreamDataMemToFifo(IS+7, 191, 1);
  streamHw.startStreamDataMemToFifo(IS+6, 202, 1);
  streamHw.startStreamDataMemToFifo(IS+7, 203, 1);
  streamHw.startStreamDataMemToFifo(IS+8, 192, 1);
  streamHw.startStreamDataMemToFifo(IS+9, 193, 1);
  streamHw.startStreamDataMemToFifo(IS+8, 204, 1);
  streamHw.startStreamDataMemToFifo(IS+9, 205, 1);
  streamHw.startStreamDataMemToFifo(IS+16, 166, 1);
  streamHw.startStreamDataMemToFifo(IS+10, 167, 1);
  streamHw.startStreamDataMemToFifo(IS+11, 168, 1);
  streamHw.startStreamDataMemToFifo(IS+12, 169, 1);
  streamHw.startStreamDataMemToFifo(IS+13, 170, 1);
  streamHw.startStreamDataMemToFifo(IS+14, 171, 1);
  streamHw.startStreamDataMemToFifo(IS+17, 172, 1);
  streamHw.startStreamDataMemToFifo(IS+18, 173, 1);
  streamHw.startStreamDataMemToFifo(IS+15,   1, 1);
  streamHw.startStreamDataMemToFifo(IS+19,   3, 1);

  streamHw.startStreamDataFifoToMem(123,    IE, 32);
  streamHw.startStreamDataFifoToMem(85,   IE+1, 32);
  streamHw.startStreamDataFifoToMem(187,  IE+2, 32);
  streamHw.startStreamDataFifoToMem(73,   IE+3, 32);
  streamHw.startStreamDataFifoToMem(189,  IE+4, 32);
  streamHw.startStreamDataFifoToMem(201,  IE+5, 32);
  streamHw.startStreamDataFifoToMem(191,  IE+6, 32);
  streamHw.startStreamDataFifoToMem(203,  IE+7, 32);
  streamHw.startStreamDataFifoToMem(193,  IE+8, 32);
  streamHw.startStreamDataFifoToMem(205,  IE+9, 32);
  streamHw.startStreamDataFifoToMem(167, IE+10, 32);
  streamHw.startStreamDataFifoToMem(169, IE+11, 32);
  streamHw.startStreamDataFifoToMem(171, IE+12, 32);
  streamHw.startStreamDataFifoToMem(173, IE+13, 32);
  streamHw.startStreamDataFifoToMem(3,   IE+14, 32);
  streamHw.runPipeline();

  // Second pipeline Adds
  streamHw.startStreamDataMemToFifo(IS+20,   1, 1);
  streamHw.startStreamDataMemToFifo(IE+1,    3, 1);
  streamHw.startStreamDataMemToFifo(IS+21,  21, 1);
  streamHw.startStreamDataMemToFifo(IE,     23, 1);
  streamHw.startStreamDataMemToFifo(IS+22,  25, 1);
  streamHw.startStreamDataMemToFifo(IE+3,   31, 1);
  streamHw.startStreamDataMemToFifo(IS+23,  35, 1);
  streamHw.startStreamDataMemToFifo(IE+2,   37, 1);
  streamHw.startStreamDataMemToFifo(IS+24,  43, 1);
  streamHw.startStreamDataMemToFifo(IE+10,  45, 1);
  streamHw.startStreamDataMemToFifo(IS+25,  51, 1);
  streamHw.startStreamDataMemToFifo(IE+5,   53, 1);
  streamHw.startStreamDataMemToFifo(IS+26,  59, 1);
  streamHw.startStreamDataMemToFifo(IE+4,   61, 1);
  streamHw.startStreamDataMemToFifo(IS+27,  67, 1);
  streamHw.startStreamDataMemToFifo(IE+11,  69, 1);
  streamHw.startStreamDataMemToFifo(IS+28,  79, 1);
  streamHw.startStreamDataMemToFifo(IE+12,  81, 1);
  streamHw.startStreamDataMemToFifo(IS+29,  95, 1);
  streamHw.startStreamDataMemToFifo(IE+13,  97, 1);
  streamHw.startStreamDataMemToFifo(IS+30, 103, 1);
  streamHw.startStreamDataMemToFifo(IE+7,  105, 1);
  streamHw.startStreamDataMemToFifo(IS+31, 124, 1);
  streamHw.startStreamDataMemToFifo(IE+6,  125, 1);
  streamHw.startStreamDataMemToFifo(IS+32, 166, 1);
  streamHw.startStreamDataMemToFifo(IE+14, 167, 1);
  streamHw.startStreamDataMemToFifo(IS+33, 168, 1);
  streamHw.startStreamDataMemToFifo(IE+9,  169, 1);
  streamHw.startStreamDataMemToFifo(IS+34, 170, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  171, 1);

  streamHw.startStreamDataFifoToMem(3,    481, 1);
  streamHw.startStreamDataFifoToMem(23,   487, 1);
  streamHw.startStreamDataFifoToMem(31,   497, 1);
  streamHw.startStreamDataFifoToMem(37,   503, 1);
  streamHw.startStreamDataFifoToMem(45,   504, 1);
  streamHw.startStreamDataFifoToMem(53,   505, 1);
  streamHw.startStreamDataFifoToMem(61,   511, 1);
  streamHw.startStreamDataFifoToMem(69,   976, 1);
  streamHw.startStreamDataFifoToMem(81,   984, 1);
  streamHw.startStreamDataFifoToMem(97,   992, 1);
  streamHw.startStreamDataFifoToMem(105,  993, 1);
  streamHw.startStreamDataFifoToMem(125,  999, 1);
  streamHw.startStreamDataFifoToMem(167, 1008, 1);
  streamHw.startStreamDataFifoToMem(169, 1009, 1);
  streamHw.startStreamDataFifoToMem(171, 1015, 1);
  streamHw.runPipeline();
  
  // Second pipeline Subs
  streamHw.startStreamDataMemToFifo(IE,   9, 1);
  streamHw.startStreamDataMemToFifo(IS+21,  11, 1);
  streamHw.startStreamDataMemToFifo(IS+20,  31, 1);
  streamHw.startStreamDataMemToFifo(IE+1,  29, 1);
  streamHw.startStreamDataMemToFifo(IE+2, 185, 1);
  streamHw.startStreamDataMemToFifo(IS+23, 184, 1);
  streamHw.startStreamDataMemToFifo(IS+22,  57, 1);
  streamHw.startStreamDataMemToFifo(IE+3,  65, 1);
  streamHw.startStreamDataMemToFifo(IE+4,  75, 1);
  streamHw.startStreamDataMemToFifo(IS+26,  77, 1);
  streamHw.startStreamDataMemToFifo(IS+25,  87, 1);
  streamHw.startStreamDataMemToFifo(IE+5,  89, 1);
  streamHw.startStreamDataMemToFifo(IE+6,  91, 1);
  streamHw.startStreamDataMemToFifo(IS+31,  93, 1);
  streamHw.startStreamDataMemToFifo(IS+30,  97, 1);
  streamHw.startStreamDataMemToFifo(IE+7, 101, 1);
  streamHw.startStreamDataMemToFifo(IE+8, 105, 1);
  streamHw.startStreamDataMemToFifo(IS+34, 109, 1);
  streamHw.startStreamDataMemToFifo(IS+33, 127, 1);
  streamHw.startStreamDataMemToFifo(IE+9, 126, 1);
  streamHw.startStreamDataMemToFifo(IS+24, 129, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 128, 1);
  streamHw.startStreamDataMemToFifo(IS+27, 175, 1);
  streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
  streamHw.startStreamDataMemToFifo(IS+28, 177, 1);
  streamHw.startStreamDataMemToFifo(IE+12, 176, 1);
  streamHw.startStreamDataMemToFifo(IS+29, 179, 1);
  streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
  streamHw.startStreamDataMemToFifo(IS+32, 181, 1);
  streamHw.startStreamDataMemToFifo(IE+14, 180, 1);

  streamHw.startStreamDataFifoToMem(11,   485, 1);
  streamHw.startStreamDataFifoToMem(31,   483, 1);
  streamHw.startStreamDataFifoToMem(185,  501, 1);
  streamHw.startStreamDataFifoToMem(65,   499, 1);
  streamHw.startStreamDataFifoToMem(77,   509, 1);
  streamHw.startStreamDataFifoToMem(89,   507, 1);
  streamHw.startStreamDataFifoToMem(93,   997, 1);
  streamHw.startStreamDataFifoToMem(101,  995, 1);
  streamHw.startStreamDataFifoToMem(109, 1013, 1);
  streamHw.startStreamDataFifoToMem(127, 1011, 1);
  streamHw.startStreamDataFifoToMem(129,  508, 1);
  streamHw.startStreamDataFifoToMem(175,  980, 1);
  streamHw.startStreamDataFifoToMem(177,  988, 1);
  streamHw.startStreamDataFifoToMem(179,  996, 1);
  streamHw.startStreamDataFifoToMem(181, 1012, 1);
  streamHw.runPipeline();
  
  // Third pipeline Subs
  streamHw.startStreamDataMemToFifo(IS+10,   9, 1);
  streamHw.startStreamDataMemToFifo(IS+16,  11, 1);
  streamHw.startStreamDataMemToFifo(IS+12,  31, 1);
  streamHw.startStreamDataMemToFifo(IS+11,  29, 1);
  streamHw.startStreamDataMemToFifo(IS+14, 185, 1);
  streamHw.startStreamDataMemToFifo(IS+13, 184, 1);
  streamHw.startStreamDataMemToFifo(IS+18,  57, 1);
  streamHw.startStreamDataMemToFifo(IS+17,  65, 1);
  streamHw.startStreamDataMemToFifo(IS+19,  75, 1);
  streamHw.startStreamDataMemToFifo(IS+15,  77, 1);

  streamHw.startStreamDataFifoToMem(11,  510, 1);
  streamHw.startStreamDataFifoToMem(31,  982, 1);
  streamHw.startStreamDataFifoToMem(185, 990, 1);
  streamHw.startStreamDataFifoToMem(65,  998, 1);
  streamHw.startStreamDataFifoToMem(77, 1014, 1);
  streamHw.runPipeline();
}

static const std::vector<int> idx_k4 =
{
    0,  32,  48,  64,  96, 128, 160, 176, 192, 224, 240, 256,
  288, 304, 320, 352, 384, 416, 432, 448, 480, 512, 544, 560,
  576, 608, 640, 672, 688, 704, 736, 752, 768, 800, 816, 832,
  864, 896, 928, 944, 960, 992, 1008
};

void fft_4_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int IE = 1056;
  int IC = 2563;
  int ID;

  for (size_t I = 0; I < idx_k4.size(); I++)
  {
    ID = idx_k4[I];

    // Save values in the available space
    streamHw.startStreamDataMemToFifo(ID, 32, 16);
    streamHw.startStreamDataFifoToMem(32, IS, 16);
    streamHw.runPipeline();

    // First Pipeline -> TX
    streamHw.startStreamDataMemToFifo(IS+12, 35, 1);
    streamHw.startStreamDataMemToFifo(IS+8, 37, 1);

    streamHw.startStreamDataMemToFifo(IS+14, 81, 1);
    streamHw.startStreamDataMemToFifo(IS+10, 85, 1);

    streamHw.startStreamDataMemToFifo(IS+14, 122, 1);
    streamHw.startStreamDataMemToFifo(IS+10, 123, 1);

    streamHw.startStreamDataMemToFifo(IS+13, 114, 1);
    streamHw.startStreamDataMemToFifo(IS+15, 115, 1);

    streamHw.startStreamDataMemToFifo(IS+11, 112, 1);
    streamHw.startStreamDataMemToFifo(IS+9, 113, 1);

    streamHw.startStreamDataMemToFifo(IS+15, 0, 1);
    streamHw.startStreamDataMemToFifo(IC+190, 1, 1);
    streamHw.startStreamDataMemToFifo(IS+9, 2, 1);
    streamHw.startStreamDataMemToFifo(IC+317, 3, 1);

    streamHw.startStreamDataMemToFifo(IS+11, 118, 1);
    streamHw.startStreamDataMemToFifo(IS+9, 119, 1);

    streamHw.startStreamDataMemToFifo(IS+13, 20, 1);
    streamHw.startStreamDataMemToFifo(IC+444, 21, 1);
    streamHw.startStreamDataMemToFifo(IS+11, 22, 1);
    streamHw.startStreamDataMemToFifo(IC+63, 23, 1);

    streamHw.startStreamDataMemToFifo(IS+15, 120, 1);
    streamHw.startStreamDataMemToFifo(IS+13, 121, 1);

    streamHw.startStreamDataMemToFifo(IS+12, 175, 1);
    streamHw.startStreamDataMemToFifo(IS+8, 174, 1);

    streamHw.startStreamDataFifoToMem(37, IE, 1);  // T0
    streamHw.startStreamDataFifoToMem(85, IE+1, 1); // T1
    streamHw.startStreamDataFifoToMem(123, IE+2, 1); // T2
    streamHw.startStreamDataFifoToMem(115, IE+3, 1); // T3
    streamHw.startStreamDataFifoToMem(113, IE+4, 1); // T4
    streamHw.startStreamDataFifoToMem(3, IE+5, 1); // T5
    streamHw.startStreamDataFifoToMem(119, IE+6, 1); // T6
    streamHw.startStreamDataFifoToMem(23, IE+7, 1);  // T7
    streamHw.startStreamDataFifoToMem(121, IE+8, 1); // T8
    streamHw.startStreamDataFifoToMem(175, ID+12, 1); // X12
    streamHw.runPipeline();

    // Second Pipeline -> TX
    streamHw.startStreamDataMemToFifo(IS, 9, 1);
    streamHw.startStreamDataMemToFifo(IE, 11, 1);

    streamHw.startStreamDataMemToFifo(IS+2, 25, 1);
    streamHw.startStreamDataMemToFifo(IE+1, 27, 1);

    streamHw.startStreamDataMemToFifo(IE+2, 57, 1);
    streamHw.startStreamDataMemToFifo(IS+6, 65, 1); 

    streamHw.startStreamDataMemToFifo(IS, 1, 1);
    streamHw.startStreamDataMemToFifo(IE, 3, 1);

    streamHw.startStreamDataMemToFifo(IE+1, 35, 1);
    streamHw.startStreamDataMemToFifo(IS+2, 37, 1);

    streamHw.startStreamDataMemToFifo(IE+2, 43, 1);
    streamHw.startStreamDataMemToFifo(IS+6, 45, 1);

    streamHw.startStreamDataMemToFifo(IE+3, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 105, 1); 

    streamHw.startStreamDataMemToFifo(IE+5, 75, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 77, 1);

    streamHw.startStreamDataMemToFifo(IE+7, 87, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 89, 1);

    streamHw.startStreamDataMemToFifo(IE+6, 124, 1);
    streamHw.startStreamDataMemToFifo(IE+8, 125, 1);

    streamHw.startStreamDataMemToFifo(IE+3, 97, 1); 
    streamHw.startStreamDataMemToFifo(IE+4, 101, 1); 

    streamHw.startStreamDataFifoToMem(11, ID+8, 1);  // X8
    streamHw.startStreamDataFifoToMem(25, ID+6, 1);  // X6
    streamHw.startStreamDataFifoToMem(65, ID+10, 1);  // X10
    streamHw.startStreamDataFifoToMem(3, ID, 1);  // X0
    streamHw.startStreamDataFifoToMem(37,  ID+2, 1);  // X2
    streamHw.startStreamDataFifoToMem(45,  ID+14, 1);  // X14
    streamHw.startStreamDataFifoToMem(105,  IE+9, 1);  // T9 
    streamHw.startStreamDataFifoToMem(77,  IE+10, 1);  // T10
    streamHw.startStreamDataFifoToMem(89,  IE+11, 1); // T11
    streamHw.startStreamDataFifoToMem(125,  IE+12, 1); // T12
    streamHw.startStreamDataFifoToMem(101,  IE+13, 1); // T13 
    streamHw.runPipeline();

    // Third Pipeline -> TX
    streamHw.startStreamDataMemToFifo(IS+1, 9, 1);
    streamHw.startStreamDataMemToFifo(IE+9, 11, 1);

    streamHw.startStreamDataMemToFifo(IE+12, 25, 1);
    streamHw.startStreamDataMemToFifo(IS+7, 27, 1);

    streamHw.startStreamDataMemToFifo(IE+13, 57, 1);
    streamHw.startStreamDataMemToFifo(IS+5, 65, 1);

    streamHw.startStreamDataMemToFifo(IE+9, 1, 1);
    streamHw.startStreamDataMemToFifo(IS+1, 3, 1);

    streamHw.startStreamDataMemToFifo(IE+10, 35, 1);
    streamHw.startStreamDataMemToFifo(IS+3, 37, 1);

    streamHw.startStreamDataMemToFifo(IS+3, 43, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 45, 1);

    streamHw.startStreamDataMemToFifo(IE+13, 103, 1);
    streamHw.startStreamDataMemToFifo(IS+5, 105, 1);

    streamHw.startStreamDataMemToFifo(IE+12, 124, 1);
    streamHw.startStreamDataMemToFifo(IS+7, 125, 1); 

    streamHw.startStreamDataFifoToMem(11, ID+7, 1);  // X7
    streamHw.startStreamDataFifoToMem(25, ID+9, 1);  // X9
    streamHw.startStreamDataFifoToMem(65, ID+11, 1);  // X11
    streamHw.startStreamDataFifoToMem(3, ID+1, 1);  // X1
    streamHw.startStreamDataFifoToMem(37,  ID+3, 1);  // X3
    streamHw.startStreamDataFifoToMem(45,  ID+5, 1);  // X5 
    streamHw.startStreamDataFifoToMem(105,  ID+13, 1);  // X13
    streamHw.startStreamDataFifoToMem(125,  ID+15, 1);  // X15
    streamHw.runPipeline();
  }
}

static const std::vector<int> idx_k5 =
{
    0,  64,  96, 128, 192, 256, 320, 352, 384, 448, 480, 512,
  576, 608, 640, 704, 768, 832, 864, 896, 960
};

void fft_5_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int IE = 1056;
  int IC = 2563;
  int ID;
  for (size_t I = 0; I < idx_k5.size(); I++)
  {
    ID = idx_k5[I];

    // Save values in the available space
    streamHw.startStreamDataMemToFifo(ID, 32, 32);
    streamHw.startStreamDataFifoToMem(32, IS, 32);
    streamHw.runPipeline();

    // First Pipeline -> TX
    streamHw.startStreamDataMemToFifo(IS+25, 110, 1);
    streamHw.startStreamDataMemToFifo(IS+31, 111, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 112, 1);
    streamHw.startStreamDataMemToFifo(IS+18, 113, 1);
    streamHw.startStreamDataMemToFifo(IS+26, 114, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 115, 1);
    streamHw.startStreamDataMemToFifo(IC+285, 0, 1);
    streamHw.startStreamDataMemToFifo(IS+23,  1, 1);
    streamHw.startStreamDataMemToFifo(IC+31,  2, 1);
    streamHw.startStreamDataMemToFifo(IS+17,  3, 1);
    streamHw.startStreamDataMemToFifo(IC+222, 40, 1);
    streamHw.startStreamDataMemToFifo(IS+27,  41, 1);
    streamHw.startStreamDataMemToFifo(IC+476, 48, 1);
    streamHw.startStreamDataMemToFifo(IS+29,  49, 1);
    streamHw.startStreamDataMemToFifo(IC+349, 20, 1);
    streamHw.startStreamDataMemToFifo(IS+21,  21, 1);
    streamHw.startStreamDataMemToFifo(IC+95,  22, 1);
    streamHw.startStreamDataMemToFifo(IS+19,  23, 1);
    streamHw.startStreamDataMemToFifo(IC+222, 56, 1);
    streamHw.startStreamDataMemToFifo(IS+29,  57, 1);
    streamHw.startStreamDataMemToFifo(IC+476, 64, 1);
    streamHw.startStreamDataMemToFifo(IS+27,  65, 1);
    streamHw.startStreamDataMemToFifo(IC+349, 24, 1);
    streamHw.startStreamDataMemToFifo(IS+19,  25, 1);
    streamHw.startStreamDataMemToFifo(IC+95,  26, 1);
    streamHw.startStreamDataMemToFifo(IS+21,  27, 1);
    streamHw.startStreamDataMemToFifo(IC+285,  8, 1);
    streamHw.startStreamDataMemToFifo(IS+17,   9, 1);
    streamHw.startStreamDataMemToFifo(IC+31,  10, 1);
    streamHw.startStreamDataMemToFifo(IS+23,  11, 1); // CC_Coeffs[285]*X17 - CC_Coeffs[31]*X23
    streamHw.startStreamDataMemToFifo(IS+20, 81, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 85, 1);

    streamHw.startStreamDataFifoToMem(111, IE, 1);    // T0
    streamHw.startStreamDataFifoToMem(3,   IE+1, 1);  // T1
    streamHw.startStreamDataFifoToMem(115, IE+2, 1);  // T2
    streamHw.startStreamDataFifoToMem(113, IE+3, 1);  // T3
    streamHw.startStreamDataFifoToMem(49,  IE+4, 1);  // T4
    streamHw.startStreamDataFifoToMem(23,  IE+5, 1);  // T5
    streamHw.startStreamDataFifoToMem(65,  IE+6, 1);  // T6
    streamHw.startStreamDataFifoToMem(25,  IE+7, 1);  // T7
    streamHw.startStreamDataFifoToMem(11,  IE+11, 1); // T11
    streamHw.startStreamDataFifoToMem(85,  IE+24, 1); // T24
    streamHw.runPipeline();

    // Second pipeline -> TX ^ X[ID+4,12,24]
    streamHw.startStreamDataMemToFifo(IS+31, 116, 1);
    streamHw.startStreamDataMemToFifo(IS+25, 117, 1);
    streamHw.startStreamDataMemToFifo(IS+22, 118, 1);
    streamHw.startStreamDataMemToFifo(IS+18, 119, 1);
    streamHw.startStreamDataMemToFifo(IS+30, 120, 1);
    streamHw.startStreamDataMemToFifo(IS+26, 121, 1);
    streamHw.startStreamDataMemToFifo(IE+1,  1, 1);
    streamHw.startStreamDataMemToFifo(IE,    3, 1);
    streamHw.startStreamDataMemToFifo(IE,    9, 1);
    streamHw.startStreamDataMemToFifo(IE+1, 11, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 129, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 128, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 105, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 35, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 37, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 57, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 65, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 75, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 77, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 43, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 45, 1);
    streamHw.startStreamDataMemToFifo(IS+24, 79, 1);
    streamHw.startStreamDataMemToFifo(IS+16, 81, 1);
    streamHw.startStreamDataMemToFifo(IS+20, 122, 1);
    streamHw.startStreamDataMemToFifo(IS+28, 123, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  97, 1);
    streamHw.startStreamDataMemToFifo(IE+24, 101, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  124, 1);
    streamHw.startStreamDataMemToFifo(IE+24, 125, 1);
    streamHw.startStreamDataMemToFifo(IS+24, 91, 1);
    streamHw.startStreamDataMemToFifo(IS+16, 93, 1);

    streamHw.startStreamDataFifoToMem(121, IE+8, 1);  // T8
    streamHw.startStreamDataFifoToMem(119, IE+9, 1);  // T9
    streamHw.startStreamDataFifoToMem(117, IE+10, 1); // T10
    streamHw.startStreamDataFifoToMem(3,   IE+12, 1); // T12
    streamHw.startStreamDataFifoToMem(11,  IE+13, 1); // T13
    streamHw.startStreamDataFifoToMem(129, IE+14, 1); // T14
    streamHw.startStreamDataFifoToMem(105, IE+15, 1); // T15
    streamHw.startStreamDataFifoToMem(37,  IE+16, 1); // T16
    streamHw.startStreamDataFifoToMem(65,  IE+17, 1); // T17
    streamHw.startStreamDataFifoToMem(77,  IE+20, 1); // T20
    streamHw.startStreamDataFifoToMem(45,  IE+21, 1); // T22
    streamHw.startStreamDataFifoToMem(123, IE+25, 1); // T25
    streamHw.startStreamDataFifoToMem(81,  IE+26, 1); // T26
    streamHw.startStreamDataFifoToMem(101, ID+4, 1);  // X[I+4]
    streamHw.startStreamDataFifoToMem(125, ID+12, 1); // X[I+12]
    streamHw.startStreamDataFifoToMem(93,  ID+24, 1); // X[I+24]
    streamHw.runPipeline();

    // Third pipeline -> TX ^ X[ID+0->20]
    streamHw.startStreamDataMemToFifo(IE+8, 9, 1);
    streamHw.startStreamDataMemToFifo(IE+9, 11, 1);
    streamHw.startStreamDataMemToFifo(IE+8, 1, 1);
    streamHw.startStreamDataMemToFifo(IE+9, 3, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 25, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 31, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 129, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 128, 1);
    streamHw.startStreamDataMemToFifo(IS,    35, 1);
    streamHw.startStreamDataMemToFifo(IE+26, 37, 1);
    streamHw.startStreamDataMemToFifo(IS+1,  43, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 45, 1);
    streamHw.startStreamDataMemToFifo(IS+2,  124, 1);
    streamHw.startStreamDataMemToFifo(IE+16, 125, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  79, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 81, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  67, 1);
    streamHw.startStreamDataMemToFifo(IE+21, 69, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  87, 1);
    streamHw.startStreamDataMemToFifo(IE+21, 89, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  127, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 126, 1);
    streamHw.startStreamDataMemToFifo(IS+2,  75, 1);
    streamHw.startStreamDataMemToFifo(IE+16, 77, 1);
    streamHw.startStreamDataMemToFifo(IS+1,  91, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 93, 1);
    streamHw.startStreamDataMemToFifo(IS,    97, 1);
    streamHw.startStreamDataMemToFifo(IE+26, 101, 1);
    streamHw.startStreamDataMemToFifo(IE+20, 105, 1);
    streamHw.startStreamDataMemToFifo(IS+13, 109, 1);
    streamHw.startStreamDataMemToFifo(IE+25, 57, 1);
    streamHw.startStreamDataMemToFifo(IS+12, 65, 1);

    streamHw.startStreamDataFifoToMem(11,  IE+18, 1); // T18
    streamHw.startStreamDataFifoToMem(3,   IE+19, 1); // T19
    streamHw.startStreamDataFifoToMem(31,  IE+22, 1); // T22
    streamHw.startStreamDataFifoToMem(129, IE+23, 1); // T23
    streamHw.startStreamDataFifoToMem(37,  ID, 1);    // X[ID]
    streamHw.startStreamDataFifoToMem(45,  ID+1, 1);  // X[ID+1]
    streamHw.startStreamDataFifoToMem(125, ID+2, 1);  // X[ID+2]
    streamHw.startStreamDataFifoToMem(81,  ID+3, 1);  // X[ID+3]
    streamHw.startStreamDataFifoToMem(69,  ID+5, 1);  // X[ID+5]
    streamHw.startStreamDataFifoToMem(89,  ID+11, 1); // X[ID+11]
    streamHw.startStreamDataFifoToMem(127, ID+13, 1); // X[ID+13]
    streamHw.startStreamDataFifoToMem(77,  ID+14, 1); // X[ID+14]
    streamHw.startStreamDataFifoToMem(93,  ID+15, 1); // X[ID+15]
    streamHw.startStreamDataFifoToMem(101, ID+16, 1); // X[ID+16]
    streamHw.startStreamDataFifoToMem(109, ID+19, 1); // X[ID+19]
    streamHw.startStreamDataFifoToMem(65,  ID+20, 1); // X[ID+20]
    streamHw.runPipeline();

    // Fourth pipeline -> TX ^ X[ID+6->31]
    streamHw.startStreamDataMemToFifo(IS+6,  1, 1);
    streamHw.startStreamDataMemToFifo(IE+18, 3, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  21, 1);
    streamHw.startStreamDataMemToFifo(IE+22, 23, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  9, 1);
    streamHw.startStreamDataMemToFifo(IE+22, 11, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  25, 1);
    streamHw.startStreamDataMemToFifo(IE+18, 27, 1);
    streamHw.startStreamDataMemToFifo(IE+23, 57, 1);
    streamHw.startStreamDataMemToFifo(IS+15, 65, 1);
    streamHw.startStreamDataMemToFifo(IE+19, 75, 1);
    streamHw.startStreamDataMemToFifo(IS+14, 77, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 91, 1);
    streamHw.startStreamDataMemToFifo(IS+11, 93, 1);
    streamHw.startStreamDataMemToFifo(IE+17,127, 1);
    streamHw.startStreamDataMemToFifo(IS+10,126, 1);
    streamHw.startStreamDataMemToFifo(IE+13,129, 1);
    streamHw.startStreamDataMemToFifo(IS+9, 128, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 21, 1);
    streamHw.startStreamDataMemToFifo(IS+9,  23, 1);
    streamHw.startStreamDataMemToFifo(IE+17, 35, 1);
    streamHw.startStreamDataMemToFifo(IS+10, 37, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 43, 1);
    streamHw.startStreamDataMemToFifo(IS+11, 45, 1);
    streamHw.startStreamDataMemToFifo(IE+25,103, 1);
    streamHw.startStreamDataMemToFifo(IS+12,105, 1);
    streamHw.startStreamDataMemToFifo(IE+20,124, 1);
    streamHw.startStreamDataMemToFifo(IS+13,125, 1);
    streamHw.startStreamDataMemToFifo(IE+19, 95, 1);
    streamHw.startStreamDataMemToFifo(IS+14, 97, 1);
    streamHw.startStreamDataMemToFifo(IE+23, 79, 1);
    streamHw.startStreamDataMemToFifo(IS+15, 81, 1);

    streamHw.startStreamDataFifoToMem(3,   ID+6, 1);  // X[ID+6]
    streamHw.startStreamDataFifoToMem(23,  ID+7, 1);  // X[ID+7]
    streamHw.startStreamDataFifoToMem(11,  ID+9, 1);  // X[ID+9]
    streamHw.startStreamDataFifoToMem(25,  ID+10, 1); // X[ID+10]
    streamHw.startStreamDataFifoToMem(65,  ID+17, 1); // X[ID+17]
    streamHw.startStreamDataFifoToMem(77,  ID+18, 1); // X[ID+18]
    streamHw.startStreamDataFifoToMem(93,  ID+21, 1); // X[ID+21]
    streamHw.startStreamDataFifoToMem(127, ID+22, 1); // X[ID+22]
    streamHw.startStreamDataFifoToMem(129, ID+23, 1); // X[ID+23]
    streamHw.startStreamDataFifoToMem(23,  ID+25, 1); // X[ID+25]
    streamHw.startStreamDataFifoToMem(37,  ID+26, 1); // X[ID+26]
    streamHw.startStreamDataFifoToMem(45,  ID+27, 1); // X[ID+27]
    streamHw.startStreamDataFifoToMem(105, ID+28, 1); // X[ID+28]
    streamHw.startStreamDataFifoToMem(125, ID+29, 1); // X[ID+29]
    streamHw.startStreamDataFifoToMem(97,  ID+30, 1); // X[ID+30]
    streamHw.startStreamDataFifoToMem(81,  ID+31, 1); // X[ID+31]
    streamHw.runPipeline();
  }
}

void fft_7_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int IE = 1100;
  int IC = 2563;
  int ID;
  for (size_t I = 1; I < 16; I++)
  {
    ID = 8*I;
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(32-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(32+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(64-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(768+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+4, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(800-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+5, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(800+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+6, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(832-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+7, 1);
    streamHw.runPipeline();

    // First Pipeline -> TX 0 - 7
    streamHw.startStreamDataMemToFifo(IC+253+ID,  0, 1);
    streamHw.startStreamDataMemToFifo(96-I,       1, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,    2, 1);
    streamHw.startStreamDataMemToFifo(64+I,       3, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 20, 1);
    streamHw.startStreamDataMemToFifo(96+I,      21, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 22, 1);
    streamHw.startStreamDataMemToFifo(128-I,     23, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,    8, 1);
    streamHw.startStreamDataMemToFifo(96-I,       9, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 10, 1);
    streamHw.startStreamDataMemToFifo(64+I,      11, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 24, 1);
    streamHw.startStreamDataMemToFifo(128-I,     25, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 26, 1);
    streamHw.startStreamDataMemToFifo(96+I,      27, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 34, 1);
    streamHw.startStreamDataMemToFifo(864-I,     35, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   36, 1);
    streamHw.startStreamDataMemToFifo(832+I,     37, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 46, 1);
    streamHw.startStreamDataMemToFifo(864+I,     47, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 48, 1);
    streamHw.startStreamDataMemToFifo(896-I,     49, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   56, 1);
    streamHw.startStreamDataMemToFifo(864-I,     57, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 64, 1);
    streamHw.startStreamDataMemToFifo(832+I,     65, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 74, 1);
    streamHw.startStreamDataMemToFifo(896-I,     75, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 76, 1);
    streamHw.startStreamDataMemToFifo(864+I,     77, 1);

    streamHw.startStreamDataFifoToMem(3,    IE, 1); // T0
    streamHw.startStreamDataFifoToMem(23, IE+1, 1); // T1
    streamHw.startStreamDataFifoToMem(11, IE+2, 1); // T2
    streamHw.startStreamDataFifoToMem(25, IE+3, 1); // T3
    streamHw.startStreamDataFifoToMem(37, IE+4, 1); // T4
    streamHw.startStreamDataFifoToMem(49, IE+5, 1); // T5
    streamHw.startStreamDataFifoToMem(65, IE+6, 1); // T6
    streamHw.startStreamDataFifoToMem(77, IE+7, 1); // T7
    streamHw.runPipeline();

    // Third Pipeline -> TX 8 - 15
    streamHw.startStreamDataMemToFifo(IE+1, 166, 1);
    streamHw.startStreamDataMemToFifo(IE,   167, 1);
    streamHw.startStreamDataMemToFifo(IE+1, 179, 1);
    streamHw.startStreamDataMemToFifo(IE,   178, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 169, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 181, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 180, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 171, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 183, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 182, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 173, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 185, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 184, 1);

    streamHw.startStreamDataFifoToMem(167,  IE+8, 1); // T8
    streamHw.startStreamDataFifoToMem(179,  IE+9, 1); // T9
    streamHw.startStreamDataFifoToMem(169, IE+10, 1); // T10
    streamHw.startStreamDataFifoToMem(181, IE+11, 1); // T11
    streamHw.startStreamDataFifoToMem(171, IE+12, 1); // T12
    streamHw.startStreamDataFifoToMem(183, IE+13, 1); // T13
    streamHw.startStreamDataFifoToMem(173, IE+14, 1); // T14
    streamHw.startStreamDataFifoToMem(185, IE+15, 1); // T15
    streamHw.runPipeline();

    // Fourth Pipeline -> X[ID]
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IE+8,    3, 1);
    streamHw.startStreamDataMemToFifo(IS,      9, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   11, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   35, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   37, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   29, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 172, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  173, 1);
    streamHw.startStreamDataMemToFifo(IE+10,  57, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   65, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   43, 1);
    streamHw.startStreamDataMemToFifo(IE+11,  45, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   75, 1);
    streamHw.startStreamDataMemToFifo(IE+11,  77, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   67, 1);
    streamHw.startStreamDataMemToFifo(IE+12,  69, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   87, 1);
    streamHw.startStreamDataMemToFifo(IE+12,  89, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 168, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  169, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 181, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  180, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  170, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 171, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  183, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 182, 1);
    streamHw.startStreamDataMemToFifo(IE+14,  95, 1);
    streamHw.startStreamDataMemToFifo(IS+7,   97, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 185, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  184, 1);

    streamHw.startStreamDataFifoToMem(3,       I, 1); // X[I]
    streamHw.startStreamDataFifoToMem(11,   64-I, 1); // X[128-I]
    streamHw.startStreamDataFifoToMem(37,   96+I, 1); // X[32-I]
    streamHw.startStreamDataFifoToMem(31,   96-I, 1); // X[96+I]
    streamHw.startStreamDataFifoToMem(173, 128-I, 1); // X[128-I]
    streamHw.startStreamDataFifoToMem(65,   64+I, 1); // X[64+I]
    streamHw.startStreamDataFifoToMem(45,   32+I, 1); // X[32+I]
    streamHw.startStreamDataFifoToMem(77,   32-I, 1); // X[32-I]
    streamHw.startStreamDataFifoToMem(69,  768+I, 1); // X[768+I]
    streamHw.startStreamDataFifoToMem(89,  832-I, 1); // X[832-I]
    streamHw.startStreamDataFifoToMem(169, 864+I, 1); // X[864+I]
    streamHw.startStreamDataFifoToMem(181, 864-I, 1); // X[864-I]
    streamHw.startStreamDataFifoToMem(171, 800+I, 1); // X[800+I]
    streamHw.startStreamDataFifoToMem(183, 800-I, 1); // X[800-I]
    streamHw.startStreamDataFifoToMem(97,  896-I, 1); // X[896-I]
    streamHw.startStreamDataFifoToMem(185, 832+I, 1); // X[832+I]
    streamHw.runPipeline();
  }
  
  for (size_t I = 1; I < 16; I++)
  {
    ID = 8*I;
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(I+256, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(288-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(288+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(320-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(384+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+4, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(416-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+5, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(416+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+6, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(448-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+7, 1);
    streamHw.runPipeline();

    // First Pipeline -> TX 0 - 7
    streamHw.startStreamDataMemToFifo(IC+253+ID,  0, 1);
    streamHw.startStreamDataMemToFifo(352-I,      1, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,    2, 1);
    streamHw.startStreamDataMemToFifo(320+I,      3, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 20, 1);
    streamHw.startStreamDataMemToFifo(352+I,     21, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 22, 1);
    streamHw.startStreamDataMemToFifo(384-I,     23, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,    8, 1);
    streamHw.startStreamDataMemToFifo(352-I,      9, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 10, 1);
    streamHw.startStreamDataMemToFifo(320+I,     11, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 24, 1);
    streamHw.startStreamDataMemToFifo(384-I,     25, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 26, 1);
    streamHw.startStreamDataMemToFifo(352+I,     27, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 34, 1);
    streamHw.startStreamDataMemToFifo(480-I,     35, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   36, 1);
    streamHw.startStreamDataMemToFifo(448+I,     37, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 46, 1);
    streamHw.startStreamDataMemToFifo(480+I,     47, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 48, 1);
    streamHw.startStreamDataMemToFifo(512-I,     49, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   56, 1);
    streamHw.startStreamDataMemToFifo(480-I,     57, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 64, 1);
    streamHw.startStreamDataMemToFifo(448+I,     65, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 74, 1);
    streamHw.startStreamDataMemToFifo(512-I,     75, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 76, 1);
    streamHw.startStreamDataMemToFifo(480+I,     77, 1);

    streamHw.startStreamDataFifoToMem(3,    IE, 1); // T0
    streamHw.startStreamDataFifoToMem(23, IE+1, 1); // T1
    streamHw.startStreamDataFifoToMem(11, IE+2, 1); // T2
    streamHw.startStreamDataFifoToMem(25, IE+3, 1); // T3
    streamHw.startStreamDataFifoToMem(37, IE+4, 1); // T4
    streamHw.startStreamDataFifoToMem(49, IE+5, 1); // T5
    streamHw.startStreamDataFifoToMem(65, IE+6, 1); // T6
    streamHw.startStreamDataFifoToMem(77, IE+7, 1); // T7
    streamHw.runPipeline();

    // Third Pipeline -> TX 8 - 15
    streamHw.startStreamDataMemToFifo(IE+1, 166, 1);
    streamHw.startStreamDataMemToFifo(IE,   167, 1);
    streamHw.startStreamDataMemToFifo(IE+1, 179, 1);
    streamHw.startStreamDataMemToFifo(IE,   178, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 169, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 181, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 180, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 171, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 183, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 182, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 173, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 185, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 184, 1);

    streamHw.startStreamDataFifoToMem(167,  IE+8, 1); // T8
    streamHw.startStreamDataFifoToMem(179,  IE+9, 1); // T9
    streamHw.startStreamDataFifoToMem(169, IE+10, 1); // T10
    streamHw.startStreamDataFifoToMem(181, IE+11, 1); // T11
    streamHw.startStreamDataFifoToMem(171, IE+12, 1); // T12
    streamHw.startStreamDataFifoToMem(183, IE+13, 1); // T13
    streamHw.startStreamDataFifoToMem(173, IE+14, 1); // T14
    streamHw.startStreamDataFifoToMem(185, IE+15, 1); // T15
    streamHw.runPipeline();

    // Fourth Pipeline -> X[ID]
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IE+8,    3, 1);
    streamHw.startStreamDataMemToFifo(IS,      9, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   11, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   35, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   37, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   29, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 172, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  173, 1);
    streamHw.startStreamDataMemToFifo(IE+10,  57, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   65, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   43, 1);
    streamHw.startStreamDataMemToFifo(IE+11,  45, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   75, 1);
    streamHw.startStreamDataMemToFifo(IE+11,  77, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   67, 1);
    streamHw.startStreamDataMemToFifo(IE+12,  69, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   87, 1);
    streamHw.startStreamDataMemToFifo(IE+12,  89, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 168, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  169, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 181, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  180, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 170, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  171, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 183, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  182, 1);
    streamHw.startStreamDataMemToFifo(IS+5,   95, 1);
    streamHw.startStreamDataMemToFifo(IE+15,  97, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  185, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 184, 1);

    streamHw.startStreamDataFifoToMem(3,   256+I, 1);
    streamHw.startStreamDataFifoToMem(11,  320-I, 1);
    streamHw.startStreamDataFifoToMem(37,  352+I, 1);
    streamHw.startStreamDataFifoToMem(31,  352-I, 1);
    streamHw.startStreamDataFifoToMem(173, 384-I, 1);
    streamHw.startStreamDataFifoToMem(65,  320+I, 1);
    streamHw.startStreamDataFifoToMem(45,  288+I, 1);
    streamHw.startStreamDataFifoToMem(77,  288-I, 1);
    streamHw.startStreamDataFifoToMem(69,  384+I, 1);
    streamHw.startStreamDataFifoToMem(89,  448-I, 1);
    streamHw.startStreamDataFifoToMem(169, 480+I, 1);
    streamHw.startStreamDataFifoToMem(181, 480-I, 1);
    streamHw.startStreamDataFifoToMem(171, 512-I, 1);
    streamHw.startStreamDataFifoToMem(183, 448+I, 1);
    streamHw.startStreamDataFifoToMem(97,  416+I, 1);
    streamHw.startStreamDataFifoToMem(185, 416-I, 1);
    streamHw.runPipeline();
  }
  
  for (size_t I = 1; I < 16; I++)
  {
    ID = 8*I;
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(I+512, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(544-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(544+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(576-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();

    // First Pipeline -> TX 0 - 7
    streamHw.startStreamDataMemToFifo(IC+253+ID,  0, 1);
    streamHw.startStreamDataMemToFifo(608-I,      1, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,    2, 1);
    streamHw.startStreamDataMemToFifo(576+I,      3, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 20, 1);
    streamHw.startStreamDataMemToFifo(608+I,     21, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 22, 1);
    streamHw.startStreamDataMemToFifo(640-I,     23, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,    8, 1);
    streamHw.startStreamDataMemToFifo(608-I,      9, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 10, 1);
    streamHw.startStreamDataMemToFifo(576+I,     11, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 24, 1);
    streamHw.startStreamDataMemToFifo(640-I,     25, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 26, 1);
    streamHw.startStreamDataMemToFifo(608+I,     27, 1);

    streamHw.startStreamDataFifoToMem(3,    IE, 1); // T0
    streamHw.startStreamDataFifoToMem(23, IE+1, 1); // T1
    streamHw.startStreamDataFifoToMem(11, IE+2, 1); // T2
    streamHw.startStreamDataFifoToMem(25, IE+3, 1); // T3
    streamHw.runPipeline();

    // Third Pipeline -> TX 8 - 15
    streamHw.startStreamDataMemToFifo(IE+1, 166, 1);
    streamHw.startStreamDataMemToFifo(IE,   167, 1);
    streamHw.startStreamDataMemToFifo(IE+1, 179, 1);
    streamHw.startStreamDataMemToFifo(IE,   178, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 169, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 181, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 180, 1);

    streamHw.startStreamDataFifoToMem(167,  IE+8, 1); // T8
    streamHw.startStreamDataFifoToMem(179,  IE+9, 1); // T9
    streamHw.startStreamDataFifoToMem(169, IE+10, 1); // T10
    streamHw.startStreamDataFifoToMem(181, IE+11, 1); // T11
    streamHw.runPipeline();

    // Fourth Pipeline -> X[ID]
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IE+8,    3, 1);
    streamHw.startStreamDataMemToFifo(IS,      9, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   11, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   35, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   37, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   29, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 172, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  173, 1);
    streamHw.startStreamDataMemToFifo(IE+10,  57, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   65, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   43, 1);
    streamHw.startStreamDataMemToFifo(IE+11,  45, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   75, 1);
    streamHw.startStreamDataMemToFifo(IE+11,  77, 1);

    streamHw.startStreamDataFifoToMem(3,   512+I, 1);
    streamHw.startStreamDataFifoToMem(11,  576-I, 1);
    streamHw.startStreamDataFifoToMem(37,  608+I, 1);
    streamHw.startStreamDataFifoToMem(31,  608-I, 1);
    streamHw.startStreamDataFifoToMem(173, 640-I, 1);
    streamHw.startStreamDataFifoToMem(65,  576+I, 1);
    streamHw.startStreamDataFifoToMem(45,  544+I, 1);
    streamHw.startStreamDataFifoToMem(77,  544-I, 1);
    streamHw.runPipeline();
  }
  
  // Save values in the available memory space
  streamHw.startStreamDataMemToFifo(16, 32, 1);
  streamHw.startStreamDataFifoToMem(32,   IS, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(48, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+1, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(272, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+2, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(304, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+3, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(400, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+4, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(432, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+5, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(528, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+6, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(560, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+7, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(784, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+8, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(816, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+9, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(0, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+10, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(256, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+11, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(384, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+12, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(512, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+13, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(768, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+14, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(96, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+15, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(352, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+16, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(480, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+17, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(608, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+18, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(864, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+19, 1);
  streamHw.runPipeline();

  // First pipeline - TX & X[I]
  streamHw.startStreamDataMemToFifo(112,   122, 1);
  streamHw.startStreamDataMemToFifo(80,    123, 1);
  streamHw.startStreamDataMemToFifo(336,   186, 1);
  streamHw.startStreamDataMemToFifo(368,   187, 1);
  streamHw.startStreamDataMemToFifo(464,   188, 1);
  streamHw.startStreamDataMemToFifo(496,   189, 1);
  streamHw.startStreamDataMemToFifo(592,   190, 1);
  streamHw.startStreamDataMemToFifo(624,   191, 1);
  streamHw.startStreamDataMemToFifo(848,   192, 1);
  streamHw.startStreamDataMemToFifo(880,   193, 1);
  streamHw.startStreamDataMemToFifo(112,   200, 1);
  streamHw.startStreamDataMemToFifo(80,    201, 1);
  streamHw.startStreamDataMemToFifo(368,   202, 1);
  streamHw.startStreamDataMemToFifo(336,   203, 1);
  streamHw.startStreamDataMemToFifo(496,   204, 1);
  streamHw.startStreamDataMemToFifo(464,   205, 1);
  streamHw.startStreamDataMemToFifo(624,   206, 1);
  streamHw.startStreamDataMemToFifo(592,   207, 1);
  streamHw.startStreamDataMemToFifo(880,   208, 1);
  streamHw.startStreamDataMemToFifo(848,   209, 1);
  streamHw.startStreamDataMemToFifo(IS+15, 175, 1);
  streamHw.startStreamDataMemToFifo(64,    174, 1);
  streamHw.startStreamDataMemToFifo(IS+16, 177, 1);
  streamHw.startStreamDataMemToFifo(320,   176, 1);
  streamHw.startStreamDataMemToFifo(IS+17, 179, 1);
  streamHw.startStreamDataMemToFifo(448,   178, 1);
  streamHw.startStreamDataMemToFifo(IS+18, 181, 1);
  streamHw.startStreamDataMemToFifo(576,   180, 1);
  streamHw.startStreamDataMemToFifo(IS+19, 183, 1);
  streamHw.startStreamDataMemToFifo(832,   182, 1);
  streamHw.startStreamDataMemToFifo(IS+15,   1, 1);
  streamHw.startStreamDataMemToFifo(64,      3, 1);

  streamHw.startStreamDataFifoToMem(123,    IE, 1);
  streamHw.startStreamDataFifoToMem(187,  IE+1, 1);
  streamHw.startStreamDataFifoToMem(189,  IE+2, 1);
  streamHw.startStreamDataFifoToMem(191,  IE+3, 1);
  streamHw.startStreamDataFifoToMem(193,  IE+4, 1);
  streamHw.startStreamDataFifoToMem(201,  IE+5, 1);
  streamHw.startStreamDataFifoToMem(203,  IE+6, 1);
  streamHw.startStreamDataFifoToMem(205,  IE+7, 1);
  streamHw.startStreamDataFifoToMem(207,  IE+8, 1);
  streamHw.startStreamDataFifoToMem(209,  IE+9, 1);
  streamHw.startStreamDataFifoToMem(175,    96, 1);
  streamHw.startStreamDataFifoToMem(177,   352, 1);
  streamHw.startStreamDataFifoToMem(179,   480, 1);
  streamHw.startStreamDataFifoToMem(181,   608, 1);
  streamHw.startStreamDataFifoToMem(183,   864, 1);
  streamHw.startStreamDataFifoToMem(3,   IE+10, 1);
  streamHw.runPipeline();

  // Second pipeline Adds
  streamHw.startStreamDataMemToFifo(IS+16,   1, 1);
  streamHw.startStreamDataMemToFifo(320,     3, 1);
  streamHw.startStreamDataMemToFifo(IS+17,  21, 1);
  streamHw.startStreamDataMemToFifo(448,    23, 1);
  streamHw.startStreamDataMemToFifo(IS+18,  25, 1);
  streamHw.startStreamDataMemToFifo(576,    31, 1);
  streamHw.startStreamDataMemToFifo(IS+19,  35, 1);
  streamHw.startStreamDataMemToFifo(832,    37, 1);
  streamHw.startStreamDataMemToFifo(IE+5,   43, 1);
  streamHw.startStreamDataMemToFifo(IS,     45, 1);
  streamHw.startStreamDataMemToFifo(IE,     51, 1);
  streamHw.startStreamDataMemToFifo(IS+1,   53, 1);
  streamHw.startStreamDataMemToFifo(IE+6,   59, 1);
  streamHw.startStreamDataMemToFifo(IS+2,   61, 1);
  streamHw.startStreamDataMemToFifo(IE+1,   67, 1);
  streamHw.startStreamDataMemToFifo(IS+3,   69, 1);
  streamHw.startStreamDataMemToFifo(IE+7,   79, 1);
  streamHw.startStreamDataMemToFifo(IS+4,   81, 1);
  streamHw.startStreamDataMemToFifo(IE+2,   95, 1);
  streamHw.startStreamDataMemToFifo(IS+5,   97, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  103, 1);
  streamHw.startStreamDataMemToFifo(IS+6,  105, 1);
  streamHw.startStreamDataMemToFifo(IE+3,  124, 1);
  streamHw.startStreamDataMemToFifo(IS+7,  125, 1);
  streamHw.startStreamDataMemToFifo(IE+9,  166, 1);
  streamHw.startStreamDataMemToFifo(IS+8,  167, 1);
  streamHw.startStreamDataMemToFifo(IE+4,  168, 1);
  streamHw.startStreamDataMemToFifo(IS+9,  169, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 170, 1);
  streamHw.startStreamDataMemToFifo(IS+10, 171, 1);

  streamHw.startStreamDataFifoToMem(3,  IE+11, 1);
  streamHw.startStreamDataFifoToMem(23, IE+12, 1);
  streamHw.startStreamDataFifoToMem(31, IE+13, 1);
  streamHw.startStreamDataFifoToMem(37, IE+14, 1);
  streamHw.startStreamDataFifoToMem(45,    16, 1);
  streamHw.startStreamDataFifoToMem(53,   112, 1);
  streamHw.startStreamDataFifoToMem(61,   272, 1);
  streamHw.startStreamDataFifoToMem(69,   368, 1);
  streamHw.startStreamDataFifoToMem(81,   400, 1);
  streamHw.startStreamDataFifoToMem(97,   496, 1);
  streamHw.startStreamDataFifoToMem(105,  528, 1);
  streamHw.startStreamDataFifoToMem(125,  624, 1);
  streamHw.startStreamDataFifoToMem(167,  784, 1);
  streamHw.startStreamDataFifoToMem(169,  880, 1);
  streamHw.startStreamDataFifoToMem(171,    0, 1);
  streamHw.runPipeline();
  
  // Third pipeline Subs
  streamHw.startStreamDataMemToFifo(IS,   9, 1);
  streamHw.startStreamDataMemToFifo(IE+5,  11, 1);
  streamHw.startStreamDataMemToFifo(IE,  31, 1);
  streamHw.startStreamDataMemToFifo(IS+1,  29, 1);
  streamHw.startStreamDataMemToFifo(IS+2, 185, 1);
  streamHw.startStreamDataMemToFifo(IE+6, 184, 1);
  streamHw.startStreamDataMemToFifo(IE+1,  57, 1);
  streamHw.startStreamDataMemToFifo(IS+3,  65, 1);
  streamHw.startStreamDataMemToFifo(IS+4,  75, 1);
  streamHw.startStreamDataMemToFifo(IE+7,  77, 1);
  streamHw.startStreamDataMemToFifo(IE+2,  87, 1);
  streamHw.startStreamDataMemToFifo(IS+5,  89, 1);
  streamHw.startStreamDataMemToFifo(IS+6,  91, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  93, 1);
  streamHw.startStreamDataMemToFifo(IE+3,  97, 1);
  streamHw.startStreamDataMemToFifo(IS+7, 101, 1);
  streamHw.startStreamDataMemToFifo(IS+8, 105, 1);
  streamHw.startStreamDataMemToFifo(IE+9, 109, 1);
  streamHw.startStreamDataMemToFifo(IE+4, 127, 1);
  streamHw.startStreamDataMemToFifo(IS+9, 126, 1);
  streamHw.startStreamDataMemToFifo(IS+10, 129, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 128, 1);
  streamHw.startStreamDataMemToFifo(IS+11, 175, 1);
  streamHw.startStreamDataMemToFifo(IE+11, 174, 1);
  streamHw.startStreamDataMemToFifo(IS+12, 177, 1);
  streamHw.startStreamDataMemToFifo(IE+12, 176, 1);
  streamHw.startStreamDataMemToFifo(IS+13, 179, 1);
  streamHw.startStreamDataMemToFifo(IE+13, 178, 1);
  streamHw.startStreamDataMemToFifo(IS+14, 181, 1);
  streamHw.startStreamDataMemToFifo(IE+14, 180, 1);

  streamHw.startStreamDataFifoToMem(11,   48, 1);
  streamHw.startStreamDataFifoToMem(31,   80, 1);
  streamHw.startStreamDataFifoToMem(185, 304, 1);
  streamHw.startStreamDataFifoToMem(65,  336, 1);
  streamHw.startStreamDataFifoToMem(77,  432, 1);
  streamHw.startStreamDataFifoToMem(89,  464, 1);
  streamHw.startStreamDataFifoToMem(93,  560, 1);
  streamHw.startStreamDataFifoToMem(101, 592, 1);
  streamHw.startStreamDataFifoToMem(109, 816, 1);
  streamHw.startStreamDataFifoToMem(127, 848, 1);
  streamHw.startStreamDataFifoToMem(129,  64, 1);
  streamHw.startStreamDataFifoToMem(175, 320, 1);
  streamHw.startStreamDataFifoToMem(177, 448, 1);
  streamHw.startStreamDataFifoToMem(179, 576, 1);
  streamHw.startStreamDataFifoToMem(181, 832, 1);
  streamHw.runPipeline();

  // Fourth pipeline Adds
  streamHw.startStreamDataMemToFifo(IS+13,  1, 1);
  streamHw.startStreamDataMemToFifo(IE+13,  3, 1);
  streamHw.startStreamDataMemToFifo(IS+14, 21, 1);
  streamHw.startStreamDataMemToFifo(IE+14, 23, 1);
  streamHw.startStreamDataMemToFifo(IS+12, 25, 1);
  streamHw.startStreamDataMemToFifo(IE+12, 31, 1);
  streamHw.startStreamDataMemToFifo(IE+11, 172, 1);
  streamHw.startStreamDataMemToFifo(IS+11, 173, 1);
  
  streamHw.startStreamDataFifoToMem(3,   512, 1);
  streamHw.startStreamDataFifoToMem(23,  768, 1);
  streamHw.startStreamDataFifoToMem(31,  384, 1);
  streamHw.startStreamDataFifoToMem(173, 256, 1);
  streamHw.runPipeline();
}

void fft_8_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int IE = 1100;
  int IC = 2563;
  int ID;
  for (size_t I = 1; I < 16; I++)
  {
    ID = 4*I;
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(32-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(32+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(64-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(128-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+4, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(96-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+5, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(96+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+6, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(64+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+7, 1);
    streamHw.runPipeline();

    // First Pipeline -> TX 8 - 15
    streamHw.startStreamDataMemToFifo(IC+ID-1,    0, 1);
    streamHw.startStreamDataMemToFifo(128+I,      1, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID,  2, 1);
    streamHw.startStreamDataMemToFifo(192-I,      3, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 20, 1);
    streamHw.startStreamDataMemToFifo(192+I,     21, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 22, 1);
    streamHw.startStreamDataMemToFifo(256-I,     23, 1);

    streamHw.startStreamDataMemToFifo(IC+381-ID,  8, 1);
    streamHw.startStreamDataMemToFifo(160-I,      9, 1);
    streamHw.startStreamDataMemToFifo(IC+127-ID, 10, 1);
    streamHw.startStreamDataMemToFifo(160+I,     11, 1);
    streamHw.startStreamDataMemToFifo(IC+254-ID, 24, 1);
    streamHw.startStreamDataMemToFifo(224+I,     25, 1);
    streamHw.startStreamDataMemToFifo(IC+508-ID, 26, 1);
    streamHw.startStreamDataMemToFifo(224-I,     27, 1);

    streamHw.startStreamDataMemToFifo(IC+127-ID, 34, 1);
    streamHw.startStreamDataMemToFifo(160-I,     35, 1);
    streamHw.startStreamDataMemToFifo(IC+381-ID, 36, 1);
    streamHw.startStreamDataMemToFifo(160+I,     37, 1);
    streamHw.startStreamDataMemToFifo(IC+508-ID, 46, 1);
    streamHw.startStreamDataMemToFifo(224+I,     47, 1);
    streamHw.startStreamDataMemToFifo(IC+254-ID, 48, 1);
    streamHw.startStreamDataMemToFifo(224-I,     49, 1);

    streamHw.startStreamDataMemToFifo(IC+253+ID, 56, 1);
    streamHw.startStreamDataMemToFifo(128+I,     57, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   64, 1);
    streamHw.startStreamDataMemToFifo(192-I,     65, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 74, 1);
    streamHw.startStreamDataMemToFifo(256-I,     75, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 76, 1);
    streamHw.startStreamDataMemToFifo(192+I,     77, 1);

    streamHw.startStreamDataFifoToMem(3,   IE+8, 1); // T8
    streamHw.startStreamDataFifoToMem(23,  IE+9, 1); // T9
    streamHw.startStreamDataFifoToMem(11, IE+12, 1); // T12
    streamHw.startStreamDataFifoToMem(25, IE+13, 1); // T13
    streamHw.startStreamDataFifoToMem(37, IE+10, 1); // T10
    streamHw.startStreamDataFifoToMem(49, IE+11, 1); // T11
    streamHw.startStreamDataFifoToMem(65, IE+14, 1); // T14
    streamHw.startStreamDataFifoToMem(77, IE+15, 1); // T15
    streamHw.runPipeline();

    // Third Pipeline -> TX 0 - 7
    streamHw.startStreamDataMemToFifo(IE+9,  166, 1);
    streamHw.startStreamDataMemToFifo(IE+8,  167, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  179, 1);
    streamHw.startStreamDataMemToFifo(IE+8,  178, 1);

    streamHw.startStreamDataMemToFifo(IE+11, 181, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 180, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 169, 1);

    streamHw.startStreamDataMemToFifo(IE+13, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 171, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 183, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 182, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 185, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 184, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 173, 1);

    streamHw.startStreamDataFifoToMem(167,   IE, 1); // T0
    streamHw.startStreamDataFifoToMem(179, IE+7, 1); // T1
    streamHw.startStreamDataFifoToMem(169, IE+1, 1); // T2
    streamHw.startStreamDataFifoToMem(181, IE+5, 1); // T3
    streamHw.startStreamDataFifoToMem(171, IE+2, 1); // T4
    streamHw.startStreamDataFifoToMem(183, IE+6, 1); // T5
    streamHw.startStreamDataFifoToMem(173, IE+3, 1); // T6
    streamHw.startStreamDataFifoToMem(185, IE+4, 1); // T7
    streamHw.runPipeline();

    // Third Pipeline -> X[ID]
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IE,      3, 1);
    streamHw.startStreamDataMemToFifo(IS,      9, 1);
    streamHw.startStreamDataMemToFifo(IE,     11, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   31, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   29, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   35, 1);
    streamHw.startStreamDataMemToFifo(IE+1,   37, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   57, 1);
    streamHw.startStreamDataMemToFifo(IE+2,   65, 1);
    streamHw.startStreamDataMemToFifo(IS+2,  172, 1);
    streamHw.startStreamDataMemToFifo(IE+2,  173, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   75, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   77, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   43, 1);
    streamHw.startStreamDataMemToFifo(IE+3,   45, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   67, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   69, 1);
    streamHw.startStreamDataMemToFifo(IE+4,   87, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   89, 1);
    streamHw.startStreamDataMemToFifo(IE+5,  181, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  180, 1);
    streamHw.startStreamDataMemToFifo(IE+5,  168, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  169, 1);
    streamHw.startStreamDataMemToFifo(IE+6,  183, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  182, 1);
    streamHw.startStreamDataMemToFifo(IE+6,  170, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  171, 1);
    streamHw.startStreamDataMemToFifo(IE+7,  185, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  184, 1);
    streamHw.startStreamDataMemToFifo(IE+7,   95, 1);
    streamHw.startStreamDataMemToFifo(IS+7,   97, 1);

    streamHw.startStreamDataFifoToMem(3,       I, 1); // X[I]
    streamHw.startStreamDataFifoToMem(11,  128-I, 1); // X[128-I]
    streamHw.startStreamDataFifoToMem(37,   32-I, 1); // X[32-I]
    streamHw.startStreamDataFifoToMem(31,   96+I, 1); // X[96+I]
    streamHw.startStreamDataFifoToMem(173,  32+I, 1); // X[32+I]
    streamHw.startStreamDataFifoToMem(65,   96-I, 1); // X[96-I]
    streamHw.startStreamDataFifoToMem(45,   64-I, 1); // X[64-I]
    streamHw.startStreamDataFifoToMem(77,   64+I, 1); // X[64+I]

    streamHw.startStreamDataFifoToMem(69,  256-I, 1); // X[256-I]
    streamHw.startStreamDataFifoToMem(89,  128+I, 1); // X[128+I]
    streamHw.startStreamDataFifoToMem(169, 224-I, 1); // X[224-I]
    streamHw.startStreamDataFifoToMem(181, 160+I, 1); // X[160+I]
    streamHw.startStreamDataFifoToMem(171, 224+I, 1); // X[224+I]
    streamHw.startStreamDataFifoToMem(183, 160-I, 1); // X[160-I]
    streamHw.startStreamDataFifoToMem(97,  192+I, 1); // X[192+I]
    streamHw.startStreamDataFifoToMem(185, 192-I, 1); // X[832-I]
    streamHw.runPipeline();
  }

  for (size_t I = 1; I < 32; I++)
  {
    ID = 4*I;
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(512+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(576-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(576+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(640-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(768+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+4, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(832-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+5, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(832+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+6, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(896-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+7, 1);
    streamHw.runPipeline();

    // First Pipeline -> TX 0 - 7
    streamHw.startStreamDataMemToFifo(IC+ID-1,    0, 1);
    streamHw.startStreamDataMemToFifo(640+I,      1, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID,  2, 1);
    streamHw.startStreamDataMemToFifo(704-I,      3, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 20, 1);
    streamHw.startStreamDataMemToFifo(704+I,     21, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 22, 1);
    streamHw.startStreamDataMemToFifo(768-I,     23, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,    8, 1);
    streamHw.startStreamDataMemToFifo(704-I,      9, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 10, 1);
    streamHw.startStreamDataMemToFifo(640+I,     11, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 24, 1);
    streamHw.startStreamDataMemToFifo(704+I,     25, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 26, 1);
    streamHw.startStreamDataMemToFifo(768-I,     27, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   34, 1);
    streamHw.startStreamDataMemToFifo(896+I,     35, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 36, 1);
    streamHw.startStreamDataMemToFifo(960-I,     37, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 46, 1);
    streamHw.startStreamDataMemToFifo(960+I,     47, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 48, 1);
    streamHw.startStreamDataMemToFifo(1024-I,    49, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 56, 1);
    streamHw.startStreamDataMemToFifo(896+I,     57, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   64, 1);
    streamHw.startStreamDataMemToFifo(960-I,     65, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 74, 1);
    streamHw.startStreamDataMemToFifo(1024-I,     75, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID, 76, 1);
    streamHw.startStreamDataMemToFifo(960+I,     77, 1);

    streamHw.startStreamDataFifoToMem(3,    IE, 1); // T0
    streamHw.startStreamDataFifoToMem(23, IE+1, 1); // T1
    streamHw.startStreamDataFifoToMem(11, IE+2, 1); // T2
    streamHw.startStreamDataFifoToMem(25, IE+3, 1); // T3
    streamHw.startStreamDataFifoToMem(37, IE+4, 1); // T4
    streamHw.startStreamDataFifoToMem(49, IE+5, 1); // T5
    streamHw.startStreamDataFifoToMem(65, IE+6, 1); // T6
    streamHw.startStreamDataFifoToMem(77, IE+7, 1); // T7
    streamHw.runPipeline();

    // Third Pipeline -> TX 8 - 15
    streamHw.startStreamDataMemToFifo(IE+1, 166, 1);
    streamHw.startStreamDataMemToFifo(IE,   167, 1);
    streamHw.startStreamDataMemToFifo(IE+1, 179, 1);
    streamHw.startStreamDataMemToFifo(IE,   178, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 181, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 180, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 168, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 169, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 170, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 171, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 183, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 182, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 185, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 184, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 172, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 173, 1);

    streamHw.startStreamDataFifoToMem(167,  IE+8, 1); // T8
    streamHw.startStreamDataFifoToMem(179,  IE+9, 1); // T9
    streamHw.startStreamDataFifoToMem(181, IE+10, 1); // T10
    streamHw.startStreamDataFifoToMem(169, IE+11, 1); // T11
    streamHw.startStreamDataFifoToMem(171, IE+12, 1); // T12
    streamHw.startStreamDataFifoToMem(183, IE+13, 1); // T13
    streamHw.startStreamDataFifoToMem(185, IE+14, 1); // T14
    streamHw.startStreamDataFifoToMem(173, IE+15, 1); // T15
    streamHw.runPipeline();

    // Third Pipeline -> X[ID]
    streamHw.startStreamDataMemToFifo(IS,      1, 1);
    streamHw.startStreamDataMemToFifo(IE+8,    3, 1);
    streamHw.startStreamDataMemToFifo(IS,      9, 1);
    streamHw.startStreamDataMemToFifo(IE+8,   11, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   31, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   29, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   35, 1);
    streamHw.startStreamDataMemToFifo(IS+2,   37, 1);
    streamHw.startStreamDataMemToFifo(IE+10,  57, 1);
    streamHw.startStreamDataMemToFifo(IS+3,   65, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 172, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  173, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   75, 1);
    streamHw.startStreamDataMemToFifo(IE+11,  77, 1);
    streamHw.startStreamDataMemToFifo(IS+1,   43, 1);
    streamHw.startStreamDataMemToFifo(IE+11,  45, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   67, 1);
    streamHw.startStreamDataMemToFifo(IE+12,  69, 1);
    streamHw.startStreamDataMemToFifo(IS+4,   87, 1);
    streamHw.startStreamDataMemToFifo(IE+12,  89, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 181, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  180, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 168, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  169, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 183, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  182, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 170, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  171, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  185, 1);
    streamHw.startStreamDataMemToFifo(IE+15, 184, 1);
    streamHw.startStreamDataMemToFifo(IS+5,   95, 1);
    streamHw.startStreamDataMemToFifo(IE+15,  97, 1);

    streamHw.startStreamDataFifoToMem(3,   512+I, 1); // X[512+I]
    streamHw.startStreamDataFifoToMem(11,  640-I, 1); // X[640-I]
    streamHw.startStreamDataFifoToMem(31,  704-I, 1); // X[704-I]
    streamHw.startStreamDataFifoToMem(37,  704+I, 1); // X[704+I]
    streamHw.startStreamDataFifoToMem(65,  640+I, 1); // X[640+I]
    streamHw.startStreamDataFifoToMem(173, 768-I, 1); // X[768-I]
    streamHw.startStreamDataFifoToMem(77,  576-I, 1); // X[576-I]
    streamHw.startStreamDataFifoToMem(45,  576+I, 1); // X[576+I]
    streamHw.startStreamDataFifoToMem(69,  768+I, 1); // X[768+I]
    streamHw.startStreamDataFifoToMem(89,  896-I, 1); // X[896-I]
    streamHw.startStreamDataFifoToMem(181, 960-I, 1); // X[960-I]
    streamHw.startStreamDataFifoToMem(169, 960+I, 1); // X[960+I]
    streamHw.startStreamDataFifoToMem(183, 896+I, 1); // X[896+I]
    streamHw.startStreamDataFifoToMem(171,1024-I, 1); // X[1024-I]
    streamHw.startStreamDataFifoToMem(185, 832+I, 1); // X[832-I]
    streamHw.startStreamDataFifoToMem(97,  832-I, 1); // X[832+I]
    streamHw.runPipeline();
  }
  
  // Save values in the available memory space
  streamHw.startStreamDataMemToFifo(0, 32, 1);
  streamHw.startStreamDataFifoToMem(32,   IS, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(32, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+1, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(96, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+2, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(128, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+3, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(160, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+4, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(192, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+5, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(224, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+6, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(512, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+7, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(544, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+8, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(608, 32, 1);
  streamHw.startStreamDataFifoToMem(32,  IS+9, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(640, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+10, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(672, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+11, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(704, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+12, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(736, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+13, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(768, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+14, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(800, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+15, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(864, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+16, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(896, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+17, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(928, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+18, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(960, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+19, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(992, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+20, 1);
  streamHw.runPipeline();

  // First pipeline - TX & X[I]
  streamHw.startStreamDataMemToFifo(IS+6,  200, 1);
  streamHw.startStreamDataMemToFifo(IS+4,  201, 1);
  streamHw.startStreamDataMemToFifo(IS+6,  186, 1);
  streamHw.startStreamDataMemToFifo(IS+4,  187, 1);
  streamHw.startStreamDataMemToFifo(IS+13, 202, 1);
  streamHw.startStreamDataMemToFifo(IS+11, 203, 1);
  streamHw.startStreamDataMemToFifo(IS+13, 188, 1);
  streamHw.startStreamDataMemToFifo(IS+11, 189, 1);
  streamHw.startStreamDataMemToFifo(IS+20, 204, 1);
  streamHw.startStreamDataMemToFifo(IS+18, 205, 1);
  streamHw.startStreamDataMemToFifo(IS+20, 190, 1);
  streamHw.startStreamDataMemToFifo(IS+18, 191, 1);
  streamHw.startStreamDataMemToFifo(IS+5,  175, 1);
  streamHw.startStreamDataMemToFifo(IS+3,  174, 1);
  streamHw.startStreamDataMemToFifo(IS+12, 177, 1);
  streamHw.startStreamDataMemToFifo(IS+10, 176, 1);
  streamHw.startStreamDataMemToFifo(IS+19, 179, 1);
  streamHw.startStreamDataMemToFifo(IS+17, 178, 1);
  streamHw.startStreamDataMemToFifo(IS+17, 166, 1);
  streamHw.startStreamDataMemToFifo(IS+19, 167, 1);
  streamHw.startStreamDataMemToFifo(IS+10, 168, 1);
  streamHw.startStreamDataMemToFifo(IS+12, 169, 1);
  streamHw.startStreamDataMemToFifo(IS+3,   35, 1);
  streamHw.startStreamDataMemToFifo(IS+5,   37, 1);
  streamHw.startStreamDataMemToFifo(208,   114, 1);
  streamHw.startStreamDataMemToFifo(240,   115, 1);
  streamHw.startStreamDataMemToFifo(176,   112, 1);
  streamHw.startStreamDataMemToFifo(144,   113, 1);
  streamHw.startStreamDataMemToFifo(240,   120, 1);
  streamHw.startStreamDataMemToFifo(208,   121, 1);
  streamHw.startStreamDataMemToFifo(176,   118, 1);
  streamHw.startStreamDataMemToFifo(144,   119, 1);

  streamHw.startStreamDataFifoToMem(201,  IE+1, 1); // T1
  streamHw.startStreamDataFifoToMem(187,  IE+2, 1); // T2
  streamHw.startStreamDataFifoToMem(203,  IE+4, 1); // T4
  streamHw.startStreamDataFifoToMem(189,  IE+5, 1); // T5
  streamHw.startStreamDataFifoToMem(205,  IE+7, 1); // T7
  streamHw.startStreamDataFifoToMem(191,  IE+8, 1); // T8
  streamHw.startStreamDataFifoToMem(175,   192, 1); // X[192]
  streamHw.startStreamDataFifoToMem(177,   704, 1); // X[704]
  streamHw.startStreamDataFifoToMem(179,   960, 1); // X[960]
  streamHw.startStreamDataFifoToMem(167,  IE+6, 1); // T6
  streamHw.startStreamDataFifoToMem(169,  IE+3, 1); // T3
  streamHw.startStreamDataFifoToMem(37,     IE, 1); // T0
  streamHw.startStreamDataFifoToMem(115,  IE+9, 1); // T9
  streamHw.startStreamDataFifoToMem(113, IE+10, 1); // T10
  streamHw.startStreamDataFifoToMem(121, IE+11, 1); // T11
  streamHw.startStreamDataFifoToMem(119, IE+12, 1); // T12
  streamHw.runPipeline();
  
  // Second Pipeline -> X[ID]
  streamHw.startStreamDataMemToFifo(IE+9,   67, 1);
  streamHw.startStreamDataMemToFifo(IE+10,  69, 1);
  streamHw.startStreamDataMemToFifo(IE+9,   91, 1);
  streamHw.startStreamDataMemToFifo(IE+10,  93, 1);
  streamHw.startStreamDataMemToFifo(IE+11, 124, 1);
  streamHw.startStreamDataMemToFifo(IE+12, 125, 1);
  streamHw.startStreamDataMemToFifo(IE+11, 105, 1);
  streamHw.startStreamDataMemToFifo(IE+12, 109, 1);

  streamHw.startStreamDataMemToFifo(IE,    168, 1);
  streamHw.startStreamDataMemToFifo(IS,    169, 1);
  streamHw.startStreamDataMemToFifo(IS,    175, 1);
  streamHw.startStreamDataMemToFifo(IE,    174, 1);
  streamHw.startStreamDataMemToFifo(IS+1,    1, 1);
  streamHw.startStreamDataMemToFifo(IE+1,    3, 1);
  streamHw.startStreamDataMemToFifo(IS+1,    9, 1);
  streamHw.startStreamDataMemToFifo(IE+1,   11, 1);
  streamHw.startStreamDataMemToFifo(IE+2,   31, 1);
  streamHw.startStreamDataMemToFifo(IS+2,   29, 1);
  streamHw.startStreamDataMemToFifo(IE+2,   35, 1);
  streamHw.startStreamDataMemToFifo(IS+2,   37, 1);
  streamHw.startStreamDataMemToFifo(IS+7,  167, 1);
  streamHw.startStreamDataMemToFifo(IE+3,  166, 1);
  streamHw.startStreamDataMemToFifo(IS+7,   57, 1);
  streamHw.startStreamDataMemToFifo(IE+3,   65, 1);
  streamHw.startStreamDataMemToFifo(IS+8,   43, 1);
  streamHw.startStreamDataMemToFifo(IE+4,   45, 1);
  streamHw.startStreamDataMemToFifo(IS+8,   75, 1);
  streamHw.startStreamDataMemToFifo(IE+4,   77, 1);
  streamHw.startStreamDataMemToFifo(IE+5,   87, 1);
  streamHw.startStreamDataMemToFifo(IS+9,   89, 1);
  streamHw.startStreamDataFifoToMem(69,  IE+13, 1); // T13
  streamHw.startStreamDataFifoToMem(93,  IE+14, 1); // T14
  streamHw.startStreamDataFifoToMem(125, IE+15, 1); // T15

  streamHw.startStreamDataFifoToMem(109, IE+16, 1); // T16

  streamHw.startStreamDataFifoToMem(169,   0, 1); // X[0]
  streamHw.startStreamDataFifoToMem(175, 128, 1); // X[128]
  streamHw.startStreamDataFifoToMem(3,    32, 1); // X[32]
  streamHw.startStreamDataFifoToMem(11,   96, 1); // X[96]
  streamHw.startStreamDataFifoToMem(31,  160, 1); // X[160]
  streamHw.startStreamDataFifoToMem(37,  224, 1); // X[224]
  streamHw.startStreamDataFifoToMem(167, 512, 1); // X[512]
  streamHw.startStreamDataFifoToMem(65,  640, 1); // X[640]
  streamHw.startStreamDataFifoToMem(45,  544, 1); // X[544]
  streamHw.startStreamDataFifoToMem(77,  608, 1); // X[608]
  streamHw.startStreamDataFifoToMem(89,  672, 1); // X[672]
  streamHw.runPipeline();

  streamHw.startStreamDataMemToFifo(IE+5,   67, 1);
  streamHw.startStreamDataMemToFifo(IS+9,   69, 1);
  streamHw.startStreamDataMemToFifo(IS+14, 124, 1);
  streamHw.startStreamDataMemToFifo(IE+6,  125, 1);
  streamHw.startStreamDataMemToFifo(IS+14,  91, 1);
  streamHw.startStreamDataMemToFifo(IE+6,   93, 1);
  streamHw.startStreamDataMemToFifo(IS+15, 103, 1);
  streamHw.startStreamDataMemToFifo(IE+7,  105, 1);
  streamHw.startStreamDataMemToFifo(IS+15, 129, 1);
  streamHw.startStreamDataMemToFifo(IE+7,  128, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  175, 1);
  streamHw.startStreamDataMemToFifo(IS+16, 174, 1);
  streamHw.startStreamDataMemToFifo(IE+8,   95, 1);
  streamHw.startStreamDataMemToFifo(IS+16,  97, 1);

  streamHw.startStreamDataMemToFifo(16,      1, 1);
  streamHw.startStreamDataMemToFifo(IE+13,   3, 1);
  streamHw.startStreamDataMemToFifo(16,      9, 1);
  streamHw.startStreamDataMemToFifo(IE+13,  11, 1);
  streamHw.startStreamDataMemToFifo(IE+14, 166, 1);
  streamHw.startStreamDataMemToFifo(80,    167, 1);
  streamHw.startStreamDataMemToFifo(IE+14, 177, 1);
  streamHw.startStreamDataMemToFifo(80,    176, 1);
  streamHw.startStreamDataMemToFifo(IE+15, 170, 1);
  streamHw.startStreamDataMemToFifo(112,   171, 1);
  streamHw.startStreamDataMemToFifo(IE+15, 179, 1);
  streamHw.startStreamDataMemToFifo(112,   178, 1);
  streamHw.startStreamDataMemToFifo(48,    172, 1);
  streamHw.startStreamDataMemToFifo(IE+16, 173, 1);
  streamHw.startStreamDataMemToFifo(48,    181, 1);
  streamHw.startStreamDataMemToFifo(IE+16, 180, 1);
  
  streamHw.startStreamDataFifoToMem(69,  736, 1); // X[736]
  streamHw.startStreamDataFifoToMem(125, 768, 1); // X[768]
  streamHw.startStreamDataFifoToMem(93,  896, 1); // X[896]
  streamHw.startStreamDataFifoToMem(105, 800, 1); // X[800]
  streamHw.startStreamDataFifoToMem(129, 864, 1); // X[864]
  streamHw.startStreamDataFifoToMem(175, 928, 1); // X[928]
  streamHw.startStreamDataFifoToMem(97,  992, 1); // X[992]
  streamHw.startStreamDataFifoToMem(3,    16, 1); // X[16]
  streamHw.startStreamDataFifoToMem(11,  112, 1); // X[112]
  streamHw.startStreamDataFifoToMem(167, 208, 1); // X[208]
  streamHw.startStreamDataFifoToMem(177, 176, 1); // X[176]
  streamHw.startStreamDataFifoToMem(171, 240, 1); // X[240]
  streamHw.startStreamDataFifoToMem(179, 144, 1); // X[144]
  streamHw.startStreamDataFifoToMem(173,  48, 1); // X[48]
  streamHw.startStreamDataFifoToMem(181,  80, 1); // X[80]
  streamHw.runPipeline();
}

void fft_9_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int IE = 1056;
  int IC = 2563;
  int ID;
  for (size_t I = 1; I < 32; I++)
  {
    ID = 2*I;
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(32+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(96-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(128-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(128+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+4, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(160+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+5, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(224-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+6, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(256-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+7, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(256+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+8, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(288+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+9, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(352-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+10, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(384-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+11, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(384+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+12, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(416+I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+13, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(480-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+14, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(512-I, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+15, 1);
    streamHw.runPipeline();

    // First Pipeline -> TX
    streamHw.startStreamDataMemToFifo(IC+126+ID,  0, 1);
    streamHw.startStreamDataMemToFifo(IS+12,      1, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID,  2, 1);
    streamHw.startStreamDataMemToFifo(IS+15,      3, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   20, 1);
    streamHw.startStreamDataMemToFifo(IS+8,      21, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 22, 1);
    streamHw.startStreamDataMemToFifo(IS+11,     23, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID,  8, 1);
    streamHw.startStreamDataMemToFifo(IS+12,      9, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 10, 1);
    streamHw.startStreamDataMemToFifo(IS+15,     11, 1);  
    streamHw.startStreamDataMemToFifo(IC+253+ID, 24, 1);
    streamHw.startStreamDataMemToFifo(IS+8,      25, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   26, 1);
    streamHw.startStreamDataMemToFifo(IS+11,     27, 1);
    streamHw.startStreamDataMemToFifo(IC+190+ID, 34, 1);
    streamHw.startStreamDataMemToFifo(IS+13,     35, 1);
    streamHw.startStreamDataMemToFifo(IC+444+ID, 36, 1);
    streamHw.startStreamDataMemToFifo(IS+14,     37, 1);
    streamHw.startStreamDataMemToFifo(IC+63+ID,  46, 1);
    streamHw.startStreamDataMemToFifo(IS+9,      47, 1);
    streamHw.startStreamDataMemToFifo(IC+317+ID, 48, 1);
    streamHw.startStreamDataMemToFifo(IS+10,     49, 1);
    streamHw.startStreamDataMemToFifo(IC+444+ID, 74, 1);
    streamHw.startStreamDataMemToFifo(IS+13,     75, 1);
    streamHw.startStreamDataMemToFifo(IC+190+ID, 76, 1);
    streamHw.startStreamDataMemToFifo(IS+14,     77, 1);
    streamHw.startStreamDataMemToFifo(IC+317+ID, 56, 1);
    streamHw.startStreamDataMemToFifo(IS+9,      57, 1);
    streamHw.startStreamDataMemToFifo(IC+63+ID,  64, 1);
    streamHw.startStreamDataMemToFifo(IS+10,     65, 1);

    streamHw.startStreamDataFifoToMem(3,    IE, 1); // T0
    streamHw.startStreamDataFifoToMem(23, IE+1, 1); // T1
    streamHw.startStreamDataFifoToMem(11, IE+2, 1); // T2
    streamHw.startStreamDataFifoToMem(25, IE+3, 1); // T3
    streamHw.startStreamDataFifoToMem(37, IE+4, 1); // T4
    streamHw.startStreamDataFifoToMem(49, IE+5, 1); // T5
    streamHw.startStreamDataFifoToMem(77, IE+6, 1); // T6
    streamHw.startStreamDataFifoToMem(65, IE+7, 1); // T7
    streamHw.runPipeline();

    // Second Pipeline -> TX
    streamHw.startStreamDataMemToFifo(IE,    1, 1);
    streamHw.startStreamDataMemToFifo(IE+1,  3, 1);
    streamHw.startStreamDataMemToFifo(IE,    9, 1);
    streamHw.startStreamDataMemToFifo(IE+1, 11, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 25, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 31, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 57, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 65, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 35, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 37, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 75, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 77, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 17, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 19, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 91, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 93, 1);

    streamHw.startStreamDataFifoToMem(3,   IE+9, 1); // T9
    streamHw.startStreamDataFifoToMem(11, IE+10, 1); // T10
    streamHw.startStreamDataFifoToMem(31, IE+11, 1); // T11
    streamHw.startStreamDataFifoToMem(65, IE+12, 1); // T12
    streamHw.startStreamDataFifoToMem(37, IE+13, 1); // T13
    streamHw.startStreamDataFifoToMem(77, IE+14, 1); // T14
    streamHw.startStreamDataFifoToMem(19, IE+15, 1); // T15
    streamHw.startStreamDataFifoToMem(93, IE+16, 1); // T16
    streamHw.runPipeline();

    // Third Pipeline -> X[ID]
    streamHw.startStreamDataMemToFifo(IS,     1, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   3, 1);
    streamHw.startStreamDataMemToFifo(IS,     9, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  11, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  29, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 31, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  35, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 37, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  57, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 65, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  17, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 19, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  43, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 45, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  75, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 77, 1);
    streamHw.startStreamDataMemToFifo(IS+1,  67, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 69, 1);
    streamHw.startStreamDataMemToFifo(IS+1,  87, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 89, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  93, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 91, 1);
    streamHw.startStreamDataMemToFifo(IS+5, 124, 1);
    streamHw.startStreamDataMemToFifo(IE+14,125, 1);
    streamHw.startStreamDataMemToFifo(IS+6, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+15,105, 1);
    streamHw.startStreamDataMemToFifo(IS+6, 126, 1);
    streamHw.startStreamDataMemToFifo(IE+15,127, 1);
    streamHw.startStreamDataMemToFifo(IS+2, 129, 1);
    streamHw.startStreamDataMemToFifo(IE+16,128, 1);
    streamHw.startStreamDataMemToFifo(IS+2,  95, 1);
    streamHw.startStreamDataMemToFifo(IE+16, 97, 1);

    streamHw.startStreamDataFifoToMem(3,      I, 1); // X[I]
    streamHw.startStreamDataFifoToMem(11, 256-I, 1); // X[256-I]
    streamHw.startStreamDataFifoToMem(31, 384-I, 1); // X[384-I]
    streamHw.startStreamDataFifoToMem(37, 384+I, 1); // X[384+I]
    streamHw.startStreamDataFifoToMem(65, 512-I, 1); // X[512-I]
    streamHw.startStreamDataFifoToMem(19, 256+I, 1); // X[256+I]
    streamHw.startStreamDataFifoToMem(77, 128-I, 1); // X[128-I]
    streamHw.startStreamDataFifoToMem(45, 128+I, 1); // X[128+I]
    streamHw.startStreamDataFifoToMem(69,  32+I, 1); // X[ 32+I]
    streamHw.startStreamDataFifoToMem(89, 224-I, 1); // X[224-I]
    streamHw.startStreamDataFifoToMem(93, 352-I, 1); // X[352-I]
    streamHw.startStreamDataFifoToMem(125,416+I, 1); // X[416+I]
    streamHw.startStreamDataFifoToMem(105,480-I, 1); // X[480-I]
    streamHw.startStreamDataFifoToMem(127,288+I, 1); // X[288+I]
    streamHw.startStreamDataFifoToMem(97,  96-I, 1); // X[96-I]
    streamHw.startStreamDataFifoToMem(129,160+I, 1); // X[160+I]
    streamHw.runPipeline();
  }
  
  // Save values in the available memory space
  streamHw.startStreamDataMemToFifo(0, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(32, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+1, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(64, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+2, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(96, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+3, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(160, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+4, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(192, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+5, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(224, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+6, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(256, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+7, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(288, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+8, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(320, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+9, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(352, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+10, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(384, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+11, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(416, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+12, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(448, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+13, 1);
  streamHw.runPipeline();
  streamHw.startStreamDataMemToFifo(480, 32, 1);
  streamHw.startStreamDataFifoToMem(32, IS+14, 1);
  streamHw.runPipeline();

  // TODO: This can be optimized into two pipelines
  streamHw.startStreamDataMemToFifo(IS+7,    1, 1);
  streamHw.startStreamDataMemToFifo(IS+11,   3, 1);
  streamHw.startStreamDataMemToFifo(IS+9,   85, 1);
  streamHw.startStreamDataMemToFifo(IS+13,  81, 1);
  streamHw.startStreamDataMemToFifo(IS+9,  122, 1);
  streamHw.startStreamDataMemToFifo(IS+13, 123, 1);
  streamHw.startStreamDataMemToFifo(IS+12, 114, 1);
  streamHw.startStreamDataMemToFifo(IS+14, 115, 1);
  streamHw.startStreamDataMemToFifo(IS+10, 112, 1);
  streamHw.startStreamDataMemToFifo(IS+8,  113, 1);
  streamHw.startStreamDataMemToFifo(IS+14, 120, 1);
  streamHw.startStreamDataMemToFifo(IS+12, 121, 1);
  streamHw.startStreamDataMemToFifo(IS+10, 118, 1);
  streamHw.startStreamDataMemToFifo(IS+8,  119, 1);
  streamHw.startStreamDataMemToFifo(IS+11, 9, 1);
  streamHw.startStreamDataMemToFifo(IS+7, 11, 1);

  streamHw.startStreamDataFifoToMem(3,     IE, 1); // T0
  streamHw.startStreamDataFifoToMem(85,  1+IE, 1); // T1
  streamHw.startStreamDataFifoToMem(123, 2+IE, 1); // T2
  streamHw.startStreamDataFifoToMem(115, 3+IE, 1); // T3
  streamHw.startStreamDataFifoToMem(113, 4+IE, 1); // T4
  streamHw.startStreamDataFifoToMem(121, 5+IE, 1); // T5
  streamHw.startStreamDataFifoToMem(119, 6+IE, 1); // T6
  streamHw.startStreamDataFifoToMem(11,   384, 1); // X[384]
  streamHw.runPipeline();

  streamHw.startStreamDataMemToFifo(IS,    1, 1);
  streamHw.startStreamDataMemToFifo(IE,    3, 1);
  streamHw.startStreamDataMemToFifo(IS,    9, 1);
  streamHw.startStreamDataMemToFifo(IE,   11, 1);
  streamHw.startStreamDataMemToFifo(IS+2, 25, 1);
  streamHw.startStreamDataMemToFifo(IE+1, 27, 1);
  streamHw.startStreamDataMemToFifo(IS+2, 35, 1);
  streamHw.startStreamDataMemToFifo(IE+1, 37, 1);
  streamHw.startStreamDataMemToFifo(IS+5, 43, 1);
  streamHw.startStreamDataMemToFifo(IE+2, 45, 1);
  streamHw.startStreamDataMemToFifo(IS+5, 65, 1);
  streamHw.startStreamDataMemToFifo(IE+2, 57, 1);

  streamHw.startStreamDataMemToFifo(IE+3, 67, 1);
  streamHw.startStreamDataMemToFifo(IE+4, 69, 1);
  streamHw.startStreamDataMemToFifo(IE+6, 75, 1);
  streamHw.startStreamDataMemToFifo(IE+5, 77, 1);
  streamHw.startStreamDataMemToFifo(IE+3, 87, 1);
  streamHw.startStreamDataMemToFifo(IE+4, 89, 1);
  streamHw.startStreamDataMemToFifo(IE+6, 79, 1);
  streamHw.startStreamDataMemToFifo(IE+5, 81, 1);

  streamHw.startStreamDataFifoToMem(3,     0, 1); // X[0]
  streamHw.startStreamDataFifoToMem(11,  256, 1); // X[256]
  streamHw.startStreamDataFifoToMem(37,   64, 1); // X[64]
  streamHw.startStreamDataFifoToMem(25,  192, 1); // X[192]
  streamHw.startStreamDataFifoToMem(65,  320, 1); // X[320]
  streamHw.startStreamDataFifoToMem(45,  448, 1); // X[448]
  streamHw.startStreamDataFifoToMem(69, 7+IE, 1); // T7
  streamHw.startStreamDataFifoToMem(77, 8+IE, 1); // T8
  streamHw.startStreamDataFifoToMem(89, 9+IE, 1); // T9
  streamHw.startStreamDataFifoToMem(81,10+IE, 1); // T10
  streamHw.runPipeline();

  streamHw.startStreamDataMemToFifo(IS+1,   1, 1);
  streamHw.startStreamDataMemToFifo(IE+7,   3, 1);
  streamHw.startStreamDataMemToFifo(IS+1,   9, 1);
  streamHw.startStreamDataMemToFifo(IE+7,  11, 1);
  streamHw.startStreamDataMemToFifo(IS+3,  25, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  27, 1);
  streamHw.startStreamDataMemToFifo(IS+3,  35, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  37, 1);
  streamHw.startStreamDataMemToFifo(IS+4,  43, 1);
  streamHw.startStreamDataMemToFifo(IE+9,  45, 1);
  streamHw.startStreamDataMemToFifo(IS+4,  65, 1);
  streamHw.startStreamDataMemToFifo(IE+9,  57, 1);
  streamHw.startStreamDataMemToFifo(IS+6,  77, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 75, 1);
  streamHw.startStreamDataMemToFifo(IS+6,  79, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 81, 1);

  streamHw.startStreamDataFifoToMem(3,   32, 1); // X[32]
  streamHw.startStreamDataFifoToMem(11, 224, 1); // X[224]
  streamHw.startStreamDataFifoToMem(25,  96, 1); // X[96]
  streamHw.startStreamDataFifoToMem(37, 160, 1); // X[160]
  streamHw.startStreamDataFifoToMem(65, 352, 1); // X[352]
  streamHw.startStreamDataFifoToMem(45, 416, 1); // X[416]
  streamHw.startStreamDataFifoToMem(77, 288, 1); // X[288]
  streamHw.startStreamDataFifoToMem(81, 480, 1); // X[480]
  streamHw.runPipeline();
}

void fft_10_Streamed(ec::StreamHw& streamHw)
{
  int IS = 1024;
  int IE = 1056;
  int IC = 2563;
  int ID;
  for (size_t ID = 1; ID < 64; ID++)
  {
    // Save values in the available memory space
    streamHw.startStreamDataMemToFifo(ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(128-ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+1, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(128+ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+2, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(256-ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+3, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(256+ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+4, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(384-ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+5, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(384+ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+6, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(512-ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+7, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(512+ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+8, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(640-ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+9, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(640+ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+10, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(768-ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+11, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(768+ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+12, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(896-ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+13, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(896+ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+14, 1);
    streamHw.runPipeline();
    streamHw.startStreamDataMemToFifo(1024-ID, 32, 1);
    streamHw.startStreamDataFifoToMem(32, IS+15, 1);
    streamHw.runPipeline();

    // First Pipeline -> TX
    streamHw.startStreamDataMemToFifo(IC+126+ID,  0, 1);
    streamHw.startStreamDataMemToFifo(IS+12,      1, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID,  2, 1);
    streamHw.startStreamDataMemToFifo(IS+15,      3, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   20, 1);
    streamHw.startStreamDataMemToFifo(IS+8,      21, 1);
    streamHw.startStreamDataMemToFifo(IC+253+ID, 22, 1);
    streamHw.startStreamDataMemToFifo(IS+11,     23, 1);
    streamHw.startStreamDataMemToFifo(IC+380+ID,  8, 1);
    streamHw.startStreamDataMemToFifo(IS+12,      9, 1);
    streamHw.startStreamDataMemToFifo(IC+126+ID, 10, 1);
    streamHw.startStreamDataMemToFifo(IS+15,     11, 1);  
    streamHw.startStreamDataMemToFifo(IC+253+ID, 24, 1);
    streamHw.startStreamDataMemToFifo(IS+8,      25, 1);
    streamHw.startStreamDataMemToFifo(IC+ID-1,   26, 1);
    streamHw.startStreamDataMemToFifo(IS+11,     27, 1);
    streamHw.startStreamDataMemToFifo(IC+254-ID, 34, 1);
    streamHw.startStreamDataMemToFifo(IS+13,     35, 1);
    streamHw.startStreamDataMemToFifo(IC+508-ID, 36, 1);
    streamHw.startStreamDataMemToFifo(IS+14,     37, 1);
    streamHw.startStreamDataMemToFifo(IC+127-ID, 46, 1);
    streamHw.startStreamDataMemToFifo(IS+9,      47, 1);
    streamHw.startStreamDataMemToFifo(IC+381-ID, 48, 1);
    streamHw.startStreamDataMemToFifo(IS+10,     49, 1);
    streamHw.startStreamDataMemToFifo(IC+381-ID, 56, 1);
    streamHw.startStreamDataMemToFifo(IS+9,      57, 1);
    streamHw.startStreamDataMemToFifo(IC+127-ID, 64, 1);
    streamHw.startStreamDataMemToFifo(IS+10,     65, 1);
    streamHw.startStreamDataMemToFifo(IC+254-ID, 74, 1);
    streamHw.startStreamDataMemToFifo(IS+14,     75, 1);
    streamHw.startStreamDataMemToFifo(IC+508-ID, 76, 1);
    streamHw.startStreamDataMemToFifo(IS+13,     77, 1);

    streamHw.startStreamDataFifoToMem(3,    IE, 1); // T0
    streamHw.startStreamDataFifoToMem(23, IE+1, 1); // T1
    streamHw.startStreamDataFifoToMem(11, IE+2, 1); // T2
    streamHw.startStreamDataFifoToMem(25, IE+3, 1); // T3
    streamHw.startStreamDataFifoToMem(37, IE+4, 1); // T4
    streamHw.startStreamDataFifoToMem(49, IE+5, 1); // T5
    streamHw.startStreamDataFifoToMem(65, IE+6, 1); // T6
    streamHw.startStreamDataFifoToMem(77, IE+7, 1); // T7
    streamHw.runPipeline();

    // Second Pipeline -> TX
    streamHw.startStreamDataMemToFifo(IE,    1, 1);
    streamHw.startStreamDataMemToFifo(IE+1,  3, 1);
    streamHw.startStreamDataMemToFifo(IE,    9, 1);
    streamHw.startStreamDataMemToFifo(IE+1, 11, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 25, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 31, 1);
    streamHw.startStreamDataMemToFifo(IE+2, 57, 1);
    streamHw.startStreamDataMemToFifo(IE+3, 65, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 35, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 37, 1);
    streamHw.startStreamDataMemToFifo(IE+4, 75, 1);
    streamHw.startStreamDataMemToFifo(IE+5, 77, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 79, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 81, 1);
    streamHw.startStreamDataMemToFifo(IE+7, 91, 1);
    streamHw.startStreamDataMemToFifo(IE+6, 93, 1);

    streamHw.startStreamDataFifoToMem(3,   IE+9, 1); // T9
    streamHw.startStreamDataFifoToMem(11, IE+10, 1); // T10
    streamHw.startStreamDataFifoToMem(31, IE+11, 1); // T11
    streamHw.startStreamDataFifoToMem(65, IE+12, 1); // T12
    streamHw.startStreamDataFifoToMem(37, IE+13, 1); // T13
    streamHw.startStreamDataFifoToMem(77, IE+14, 1); // T14
    streamHw.startStreamDataFifoToMem(81, IE+15, 1); // T15
    streamHw.startStreamDataFifoToMem(93, IE+16, 1); // T16
    streamHw.runPipeline();

    // Third Pipeline -> X[ID]
    streamHw.startStreamDataMemToFifo(IS,     1, 1);
    streamHw.startStreamDataMemToFifo(IE+9,   3, 1);
    streamHw.startStreamDataMemToFifo(IS,     9, 1);
    streamHw.startStreamDataMemToFifo(IE+9,  11, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  31, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 29, 1);
    streamHw.startStreamDataMemToFifo(IS+4,  35, 1);
    streamHw.startStreamDataMemToFifo(IE+10, 37, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  57, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 65, 1);
    streamHw.startStreamDataMemToFifo(IS+7,  17, 1);
    streamHw.startStreamDataMemToFifo(IE+11, 19, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  75, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 77, 1);
    streamHw.startStreamDataMemToFifo(IS+3,  43, 1);
    streamHw.startStreamDataMemToFifo(IE+12, 45, 1);
    streamHw.startStreamDataMemToFifo(IS+1,  67, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 69, 1);
    streamHw.startStreamDataMemToFifo(IS+1,  87, 1);
    streamHw.startStreamDataMemToFifo(IE+13, 89, 1);
    streamHw.startStreamDataMemToFifo(IS+5,  91, 1);
    streamHw.startStreamDataMemToFifo(IE+14, 93, 1);
    streamHw.startStreamDataMemToFifo(IS+5, 124, 1);
    streamHw.startStreamDataMemToFifo(IE+14,125, 1);
    streamHw.startStreamDataMemToFifo(IS+2, 103, 1);
    streamHw.startStreamDataMemToFifo(IE+15,105, 1);
    streamHw.startStreamDataMemToFifo(IS+2, 127, 1);
    streamHw.startStreamDataMemToFifo(IE+15,126, 1);
    streamHw.startStreamDataMemToFifo(IS+6, 128, 1);
    streamHw.startStreamDataMemToFifo(IE+16,129, 1);
    streamHw.startStreamDataMemToFifo(IS+6,  95, 1);
    streamHw.startStreamDataMemToFifo(IE+16, 97, 1);

    streamHw.startStreamDataFifoToMem(3,      ID, 1); // X[ID]
    streamHw.startStreamDataFifoToMem(11, 512-ID, 1); // X[512-ID]
    streamHw.startStreamDataFifoToMem(31, 768-ID, 1); // X[768-ID]
    streamHw.startStreamDataFifoToMem(37, 768+ID, 1); // X[768+ID]
    streamHw.startStreamDataFifoToMem(65,1024-ID, 1); // X[1024-ID]
    streamHw.startStreamDataFifoToMem(19, 512+ID, 1); // X[512+ID]
    streamHw.startStreamDataFifoToMem(77, 256-ID, 1); // X[256-ID]
    streamHw.startStreamDataFifoToMem(45, 256+ID, 1); // X[256+ID]
    streamHw.startStreamDataFifoToMem(69, 128-ID, 1); // X[128-ID]
    streamHw.startStreamDataFifoToMem(89, 384+ID, 1); // X[384+ID]
    streamHw.startStreamDataFifoToMem(93, 640+ID, 1); // X[640+ID]
    streamHw.startStreamDataFifoToMem(125,896-ID, 1); // X[896-ID]
    streamHw.startStreamDataFifoToMem(105,128+ID, 1); // X[128+ID]
    streamHw.startStreamDataFifoToMem(127,384-ID, 1); // X[384-ID]
    streamHw.startStreamDataFifoToMem(129,640-ID, 1); // X[640-ID]
    streamHw.startStreamDataFifoToMem(97, 896+ID, 1); // X[896+ID]
    streamHw.runPipeline();
  }

  // First Pipeline -> TX
  streamHw.startStreamDataMemToFifo(832, 114, 1);
  streamHw.startStreamDataMemToFifo(960, 115, 1);
  streamHw.startStreamDataMemToFifo(704, 112, 1);
  streamHw.startStreamDataMemToFifo(576, 113, 1);
  streamHw.startStreamDataMemToFifo(960, 120, 1);
  streamHw.startStreamDataMemToFifo(832, 121, 1);
  streamHw.startStreamDataMemToFifo(704, 118, 1);
  streamHw.startStreamDataMemToFifo(576, 119, 1);
  streamHw.startStreamDataMemToFifo(640,  81, 1);
  streamHw.startStreamDataMemToFifo(896,  85, 1);
  streamHw.startStreamDataMemToFifo(640, 122, 1);
  streamHw.startStreamDataMemToFifo(896, 123, 1);
  streamHw.startStreamDataMemToFifo(512, 124, 1);
  streamHw.startStreamDataMemToFifo(768, 125, 1);
  streamHw.startStreamDataMemToFifo(768,   9, 1);
  streamHw.startStreamDataMemToFifo(512,  11, 1);

  streamHw.startStreamDataFifoToMem(115,   IE, 1); // T0
  streamHw.startStreamDataFifoToMem(113, 1+IE, 1); // T1
  streamHw.startStreamDataFifoToMem(121, 2+IE, 1); // T2
  streamHw.startStreamDataFifoToMem(119, 3+IE, 1); // T3
  streamHw.startStreamDataFifoToMem(85,  4+IE, 1); // T4
  streamHw.startStreamDataFifoToMem(123, 5+IE, 1); // T5
  streamHw.startStreamDataFifoToMem(125, 6+IE, 1); // T6
  streamHw.startStreamDataFifoToMem(11,   768, 1); // X[768]
  streamHw.runPipeline();

  streamHw.startStreamDataMemToFifo(0,     1, 1);
  streamHw.startStreamDataMemToFifo(IE+6,  3, 1);
  streamHw.startStreamDataMemToFifo(0,     9, 1);
  streamHw.startStreamDataMemToFifo(IE+6, 11, 1);
  streamHw.startStreamDataMemToFifo(384,  27, 1);
  streamHw.startStreamDataMemToFifo(IE+5, 25, 1);
  streamHw.startStreamDataMemToFifo(384,  35, 1);
  streamHw.startStreamDataMemToFifo(IE+5, 37, 1);
  streamHw.startStreamDataMemToFifo(128,  43, 1);
  streamHw.startStreamDataMemToFifo(IE+4, 45, 1);
  streamHw.startStreamDataMemToFifo(128,  57, 1);
  streamHw.startStreamDataMemToFifo(IE+4, 65, 1);
  streamHw.startStreamDataMemToFifo(IE,   67, 1);
  streamHw.startStreamDataMemToFifo(IE+1, 69, 1);
  streamHw.startStreamDataMemToFifo(IE,   75, 1);
  streamHw.startStreamDataMemToFifo(IE+1, 77, 1);
  streamHw.startStreamDataMemToFifo(IE+2, 87, 1);
  streamHw.startStreamDataMemToFifo(IE+3, 89, 1);
  streamHw.startStreamDataMemToFifo(IE+2, 79, 1);
  streamHw.startStreamDataMemToFifo(IE+3, 81, 1);

  streamHw.startStreamDataFifoToMem(3,     0, 1); // X[0]
  streamHw.startStreamDataFifoToMem(11,  512, 1); // X[512]
  streamHw.startStreamDataFifoToMem(25,  640, 1); // X[640]
  streamHw.startStreamDataFifoToMem(37,  896, 1); // X[896]
  streamHw.startStreamDataFifoToMem(45,  384, 1); // X[384]
  streamHw.startStreamDataFifoToMem(65,  128, 1); // X[128]
  streamHw.startStreamDataFifoToMem(69, 7+IE, 1); // T7
  streamHw.startStreamDataFifoToMem(77, 8+IE, 1); // T8
  streamHw.startStreamDataFifoToMem(89, 9+IE, 1); // T9
  streamHw.startStreamDataFifoToMem(81,10+IE, 1); // T10
  streamHw.runPipeline();

  streamHw.startStreamDataMemToFifo(64,     1, 1);
  streamHw.startStreamDataMemToFifo(IE+7,   3, 1);
  streamHw.startStreamDataMemToFifo(64,     9, 1);
  streamHw.startStreamDataMemToFifo(IE+7,  11, 1);
  streamHw.startStreamDataMemToFifo(320,   27, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  25, 1);
  streamHw.startStreamDataMemToFifo(320,   35, 1);
  streamHw.startStreamDataMemToFifo(IE+8,  37, 1);
  streamHw.startStreamDataMemToFifo(192,   43, 1);
  streamHw.startStreamDataMemToFifo(IE+9,  45, 1);
  streamHw.startStreamDataMemToFifo(192,   57, 1);
  streamHw.startStreamDataMemToFifo(IE+9,  65, 1);
  streamHw.startStreamDataMemToFifo(448,   77, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 75, 1);
  streamHw.startStreamDataMemToFifo(448,   79, 1);
  streamHw.startStreamDataMemToFifo(IE+10, 81, 1);

  streamHw.startStreamDataFifoToMem(3,   64, 1); // X[64]
  streamHw.startStreamDataFifoToMem(11, 448, 1); // X[448]
  streamHw.startStreamDataFifoToMem(25, 704, 1); // X[704]
  streamHw.startStreamDataFifoToMem(37, 832, 1); // X[832]
  streamHw.startStreamDataFifoToMem(45, 192, 1); // X[192]
  streamHw.startStreamDataFifoToMem(65, 320, 1); // X[320]
  streamHw.startStreamDataFifoToMem(77, 576, 1); // X[576]
  streamHw.startStreamDataFifoToMem(81, 960, 1); // X[960]
  streamHw.runPipeline();
}

void mag_out_Streamed(ec::StreamHw& streamHw)
{
  for (size_t I = 1; I < 497; I+=16)
  {
    streamHw.startStreamDataMemToFifo(I, 130, 1);
    streamHw.startStreamDataMemToFifo(1024 - I, 131, 1);
    streamHw.startStreamDataMemToFifo(I+1, 132, 1);
    streamHw.startStreamDataMemToFifo(1023 - I, 133, 1);
    streamHw.startStreamDataMemToFifo(I+2, 134, 1);
    streamHw.startStreamDataMemToFifo(1022 - I, 135, 1);
    streamHw.startStreamDataMemToFifo(I+3, 136, 1);
    streamHw.startStreamDataMemToFifo(1021 - I, 137, 1);
    streamHw.startStreamDataMemToFifo(I+4, 138, 1);
    streamHw.startStreamDataMemToFifo(1020 - I, 139, 1);
    streamHw.startStreamDataMemToFifo(I+5, 140, 1);
    streamHw.startStreamDataMemToFifo(1019 - I, 141, 1);
    streamHw.startStreamDataMemToFifo(I+6, 142, 1);
    streamHw.startStreamDataMemToFifo(1018 - I, 143, 1);
    streamHw.startStreamDataMemToFifo(I+7, 144, 1);
    streamHw.startStreamDataMemToFifo(1017 - I, 145, 1);
    streamHw.startStreamDataMemToFifo(I+8, 146, 1);
    streamHw.startStreamDataMemToFifo(1016 - I, 147, 1);
    streamHw.startStreamDataMemToFifo(I+9, 148, 1);
    streamHw.startStreamDataMemToFifo(1015 - I, 149, 1);
    streamHw.startStreamDataMemToFifo(I+10, 150, 1);
    streamHw.startStreamDataMemToFifo(1014 - I, 151, 1);
    streamHw.startStreamDataMemToFifo(I+11, 152, 1);
    streamHw.startStreamDataMemToFifo(1013 - I, 153, 1);
    streamHw.startStreamDataMemToFifo(I+12, 154, 1);
    streamHw.startStreamDataMemToFifo(1012 - I, 155, 1);
    streamHw.startStreamDataMemToFifo(I+13, 156, 1);
    streamHw.startStreamDataMemToFifo(1011 - I, 157, 1);
    streamHw.startStreamDataMemToFifo(I+14, 158, 1);
    streamHw.startStreamDataMemToFifo(1010 - I, 159, 1);
    streamHw.startStreamDataMemToFifo(I+15, 160, 1);
    streamHw.startStreamDataMemToFifo(1009 - I, 161, 1);

    streamHw.startStreamDataFifoToMem(131, I, 1);
    streamHw.startStreamDataFifoToMem(133, I+1, 1);
    streamHw.startStreamDataFifoToMem(135, I+2, 1);
    streamHw.startStreamDataFifoToMem(137, I+3, 1);
    streamHw.startStreamDataFifoToMem(139, I+4, 1);
    streamHw.startStreamDataFifoToMem(141, I+5, 1);
    streamHw.startStreamDataFifoToMem(143, I+6, 1);
    streamHw.startStreamDataFifoToMem(145, I+7, 1);
    streamHw.startStreamDataFifoToMem(147, I+8, 1);
    streamHw.startStreamDataFifoToMem(149, I+9, 1);
    streamHw.startStreamDataFifoToMem(151, I+10, 1);
    streamHw.startStreamDataFifoToMem(153, I+11, 1);
    streamHw.startStreamDataFifoToMem(155, I+12, 1);
    streamHw.startStreamDataFifoToMem(157, I+13, 1);
    streamHw.startStreamDataFifoToMem(159, I+14, 1);
    streamHw.startStreamDataFifoToMem(161, I+15, 1);
    streamHw.runPipeline();
  }
  
  streamHw.startStreamDataMemToFifo(497, 130, 1);
  streamHw.startStreamDataMemToFifo(527, 131, 1);
  streamHw.startStreamDataMemToFifo(498, 132, 1);
  streamHw.startStreamDataMemToFifo(526, 133, 1);
  streamHw.startStreamDataMemToFifo(499, 134, 1);
  streamHw.startStreamDataMemToFifo(525, 135, 1);
  streamHw.startStreamDataMemToFifo(500, 136, 1); 
  streamHw.startStreamDataMemToFifo(524, 137, 1);
  streamHw.startStreamDataMemToFifo(501, 138, 1);
  streamHw.startStreamDataMemToFifo(523, 139, 1); 
  streamHw.startStreamDataMemToFifo(502, 140, 1); 
  streamHw.startStreamDataMemToFifo(522, 141, 1); 
  streamHw.startStreamDataMemToFifo(503, 142, 1); 
  streamHw.startStreamDataMemToFifo(521, 143, 1); 
  streamHw.startStreamDataMemToFifo(504, 144, 1); 
  streamHw.startStreamDataMemToFifo(520, 145, 1);
  streamHw.startStreamDataMemToFifo(505, 146, 1);
  streamHw.startStreamDataMemToFifo(519, 147, 1);
  streamHw.startStreamDataMemToFifo(506, 148, 1);
  streamHw.startStreamDataMemToFifo(518, 149, 1);
  streamHw.startStreamDataMemToFifo(507, 150, 1);
  streamHw.startStreamDataMemToFifo(517, 151, 1);
  streamHw.startStreamDataMemToFifo(508, 152, 1);
  streamHw.startStreamDataMemToFifo(516, 153, 1);
  streamHw.startStreamDataMemToFifo(509, 154, 1);
  streamHw.startStreamDataMemToFifo(515, 155, 1);
  streamHw.startStreamDataMemToFifo(510, 156, 1);
  streamHw.startStreamDataMemToFifo(514, 157, 1);
  streamHw.startStreamDataMemToFifo(511, 158, 1);
  streamHw.startStreamDataMemToFifo(513, 159, 1);
  
  streamHw.startStreamDataMemToFifo(0, 162, 1);
  streamHw.startStreamDataMemToFifo(512, 163, 1);

  streamHw.startStreamDataFifoToMem(131, 497, 1);
  streamHw.startStreamDataFifoToMem(133, 498, 1);
  streamHw.startStreamDataFifoToMem(135, 499, 1);
  streamHw.startStreamDataFifoToMem(137, 500, 1);
  streamHw.startStreamDataFifoToMem(139, 501, 1);
  streamHw.startStreamDataFifoToMem(141, 502, 1);
  streamHw.startStreamDataFifoToMem(143, 503, 1);
  streamHw.startStreamDataFifoToMem(145, 504, 1);
  streamHw.startStreamDataFifoToMem(147, 505, 1);
  streamHw.startStreamDataFifoToMem(149, 506, 1);
  streamHw.startStreamDataFifoToMem(151, 507, 1);
  streamHw.startStreamDataFifoToMem(153, 508, 1);
  streamHw.startStreamDataFifoToMem(155, 509, 1);
  streamHw.startStreamDataFifoToMem(157, 510, 1);
  streamHw.startStreamDataFifoToMem(159, 511, 1);

  streamHw.startStreamDataFifoToMem(162, 0, 1); 
  streamHw.startStreamDataFifoToMem(163, 512, 1);
  streamHw.runPipeline();
}
